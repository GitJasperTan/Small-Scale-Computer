
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002d95

Program Header:
0x70000001 off    0x000195a4 vaddr 0x000095a4 paddr 0x000095a4 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000965c memsz 0x0000965c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0000965c align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000200f8 vaddr 0x100000f8 paddr 0x100000f8 align 2**16
         filesz 0x00000000 memsz 0x00000ae0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000958c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  10000000  0000965c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  000200f8  2**2
                  CONTENTS
  3 .bss          00000ae0  100000f8  100000f8  000200f8  2**3
                  ALLOC
  4 .ARM.extab    00000018  0000958c  0000958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx    000000b8  000095a4  000095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200f8  2**2
                  CONTENTS
  7 .noinit_RAM2  00000000  20000000  20000000  000200f8  2**2
                  CONTENTS
  8 .noinit       00000000  10000bd8  10000bd8  000200f8  2**2
                  CONTENTS
  9 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 10 .comment      00000079  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 11 .debug_info   000985f9  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000066f0  00000000  00000000  000b879a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012e8  00000000  00000000  000bee8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001248  00000000  00000000  000c0172  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a001  00000000  00000000  000c13ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00037537  00000000  00000000  000cb3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005f20  00000000  00000000  001028f4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000f8 l    d  .bss	00000000 .bss
0000958c l    d  .ARM.extab	00000000 .ARM.extab
000095a4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000bd8 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00008c80 l     O .text	00000004 config::kSystemClockRateMhz
000044aa l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000044c6 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00008c84 l     O .text	00000004 config::kRtosFrequency
0000450c l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004528 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004ad8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004af4 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000054bc l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
1000006c l     O .data	00000004 (anonymous namespace)::system_controller
10000808 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000070 l     O .data	00000008 (anonymous namespace)::uart0
10000078 l     O .data	00000008 (anonymous namespace)::system_timer
1000008c l     O .data	00000004 (anonymous namespace)::interrupt_controller
000058e4 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
00005908 l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
000094a0 l     O .text	0000000c sjsu::InitializePlatform()::file
00005db8 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005ed6 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00005f48 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
000063be l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /mnt/c/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /mnt/c/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000032c l     F .text	00000000 __do_global_dtors_aux
100000f8 l       .bss	00000001 completed.10274
00000350 l     F .text	00000000 frame_dummy
100000fc l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00008238 l     O .text	00000009 main::file
00008244 l     O .text	00000009 keyboard_interrupt()::file
00008250 l     O .text	00000009 keyboard_interrupt()::file
0000825c l     O .text	00000009 keyboard_interrupt()::file
00008268 l     O .text	00000009 keyboard_interrupt()::file
00008274 l     O .text	00000009 keyboard_interrupt()::file
00008280 l     O .text	00000009 keyboard_interrupt()::file
0000828c l     O .text	00000009 keyboard_interrupt()::file
00008298 l     O .text	00000009 keyboard_interrupt()::file
000082a4 l     O .text	00000009 keyboard_interrupt()::file
000082b0 l     O .text	00000009 keyboard_interrupt()::file
000082bc l     O .text	00000009 keyboard_interrupt()::file
000082c8 l     O .text	00000009 keyboard_interrupt()::file
000082d4 l     O .text	00000009 keyboard_interrupt()::file
000082e0 l     O .text	00000009 keyboard_interrupt()::file
000082ec l     O .text	00000009 keyboard_interrupt()::file
000082f8 l     O .text	00000009 keyboard_interrupt()::file
00008304 l     O .text	00000009 keyboard_interrupt()::file
00002894 l     F .text	00000028 __tcf_0
000028bc l     F .text	00000140 __static_initialization_and_destruction_0(int, int)
000029fc l     F .text	00000010 _GLOBAL__sub_I_bus
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00002a0c l     F .text	00000026 _Unwind_GetGR
00002b60 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00002bbc l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 exceptions.cpp
00002d84 l       .text	00000000 handler2_address_const
00002e14 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00002e70 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000768 l     O .bss	00000064 pxReadyTasksLists
100007cc l     O .bss	00000004 uxTopReadyPriority
100007d0 l     O .bss	00000004 xYieldPending
100007d4 l     O .bss	00000004 uxSchedulerSuspended
100007d8 l     O .bss	00000004 ulTaskSwitchedInTime
100007dc l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00003066 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00003082 l     F .text	0000002e _strlen(char const*)
000030b0 l     F .text	00000028 _is_digit(char)
000030d8 l     F .text	00000048 _atoi(char const**)
00003120 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00003362 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00003432 l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00008c54 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00003510 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00003954 l     F .text	000008d6 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
0000429c l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
100007e0 l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
000063f0 l       .text	00000000 pxCurrentTCBConst2
00006460 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00006b64 l     F .text	00000012 selfrel_offset31
00006b78 l     F .text	0000005c search_EIT_table
00006bd4 l     F .text	00000028 __gnu_unwind_get_pr_addr
00006bfc l     F .text	0000009c get_eit_entry
00006c98 l     F .text	00000058 restore_non_core_regs
00006cf0 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00006cfc l     F .text	00000004 __gnu_unwind_24bit.isra.0
00006d00 l     F .text	00000002 _Unwind_DebugHook
00006d04 l     F .text	0000003a unwind_phase2
00006d40 l     F .text	000000ca unwind_phase2_forced
00006f18 l     F .text	00000018 _Unwind_GetGR
00006f60 l     F .text	00000018 _Unwind_SetGR
00006ff0 l     F .text	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
000076c8 l     F .text	00000036 next_unwind_byte
00007700 l     F .text	0000001a _Unwind_GetGR.constprop.0
0000771c l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00002a34  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00007680 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00006e10 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000010a8  w    F .text	0000001c sjsu::lpc40xx::Gpio::LocalInterruptRegister() const
0000462c  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
00002628  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
10000800  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00004678  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00002c68  w    F .text	0000006c sjsu::InitializeBssSection()
00002f44 g     F .text	00000010 _getpid
000093d8  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00000c98  w    F .text	00000070 sjsu::lpc40xx::Gpio::InterruptHandler()
0000257c  w    F .text	00000020 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
00004738  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
00009434  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
10000088  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
00004410  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000271e  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
000006b4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10000750  w    O .bss	00000004 guard variable for sjsu::Uptime
00001cb0  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
10000bd0  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
10000010  w    O .data	00000004 sjsu::newlib::in
00005cd4  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
10000008 g     O .data	00000001 addr_port_B
10000bc8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
000010c4  w    F .text	000001a0 Bus::Initialize()
00000e60  w    F .text	0000002e sjsu::lpc40xx::Gpio::Toggle() const
000004d8  w    F .text	00000014 sjsu::lpc40xx::Pin::Initialize() const
00004840  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
000045dc  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00007afc g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
0000422c g     F .text	00000044 printf
00000a40  w    F .text	00000018 auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)
00001060  w    F .text	00000048 sjsu::lpc40xx::Gpio::IsAValidPort() const
00001264  w    F .text	00000106 Bus::IOWrite(unsigned char, unsigned char)
00000820  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
000027ee  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
0000067c  w    F .text	0000001c sjsu::Gpio::SetAsInput() const
00005e82  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
00005b48  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000640  w    F .text	0000001e sjsu::Gpio::SetHigh() const
00005a6e  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
00006140  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00005c7c  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
00005e44  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
00006336  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
00002438  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
00002ac0  w    F .text	00000098 sjsu::debug::PrintBacktrace(bool, void*)
00000ab4  w    F .text	0000002c sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const
20000000 g       *ABS*	00000000 __base_RAM2
0000753c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
0000765c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
10000114  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
0000965c g       .ARM.exidx	00000000 __exidx_end
00000984  w    F .text	00000020 sjsu::Gpio::Gpio()
00007b34  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00005940 g     F .text	00000014 ThreadRuntimeCounter
00007298 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
00002482  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00004588  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
00004c94  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
00001cb0  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
10000764 g     O .bss	00000004 pxCurrentTCB
0000219a  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
000079e8 g     F .text	0000000a .hidden _Unwind_GetRegionStart
0000249a  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
0000765c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00005250  w    F .text	00000038 sjsu::Uart::Read() const
000093d0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000284c  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
00000720  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
10010000 g       *ABS*	00000000 __top_SRAM
10000bd4 g     O .bss	00000004 errno
0000965c g       .ARM.exidx	00000000 _etext
00005b12  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000590  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00004d8c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
000076a4 g     F .text	00000022 .hidden _Unwind_Backtrace
10000118  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000065c0 g     F .text	00000160 .hidden __aeabi_fadd
000065bc g     F .text	00000164 .hidden __subsf3
00004e94  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
0000946c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
0000751c g     F .text	00000018 .hidden __restore_core_regs
0000755c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00006366  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00002140  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)
00005cd4  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000093cc  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
000094c0  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
00007b38  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
000051d4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
0000166c g     F .text	00000424 keyboard_interrupt()
00006e0c g     F .text	00000004 .hidden _Unwind_GetCFA
00007a80 g     F .text	0000001c memcpy
00004ef8  w    F .text	00000198 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006480 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00001ea6  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()
00006f30 g     F .text	0000002e .hidden _Unwind_VRS_Set
00001ec0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00006870 g     F .text	00000000 .hidden __aeabi_uldivmod
10000bd8 g       .noinit	00000000 _noinit
00004eac  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000009f8  w    F .text	00000048 sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const
00002fa0 g     F .text	00000048 puts
00000b5e  w    F .text	00000030 sjsu::lpc17xx::Pin::PinRegisterLookup() const
0000495e  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000052b4  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00005b6e  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00001fee  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
00004bc0  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
1000001c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
0000040a  w    F .text	00000022 std::_Function_base::_M_empty() const
00007a9c g     F .text	00000050 _raise_r
00006728 g     F .text	0000001c .hidden __aeabi_i2f
0000521c  w    F .text	0000001e sjsu::Pin::PullUp() const
000023e6  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
10000144  w    O .bss	00000400 sjsu::lpc40xx::Gpio::handlers
00000782  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()
10010000 g       *ABS*	00000000 __top_RAM
00006400 g     F .text	00000066 xPortPendSVHandler
00001f76  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000ee4  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
0000065e  w    F .text	0000001e sjsu::Gpio::SetLow() const
00004468  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00000554  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00007b20 g     F .text	00000004 _getpid_r
00005288  w    F .text	0000002a sjsu::Uart::PollingFlush() const
00006f78 g     F .text	00000076 .hidden __gnu_Unwind_Backtrace
0000273a  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00001a90  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00000820  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
10010000 g       *ABS*	00000000 StackTop
000009a4  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00006284  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00005d18  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
00005bea  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000068a0 g     F .text	000002c2 .hidden __udivmoddi4
00005a38  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
00007b3c  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
000048ec  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00005c54  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
0000754c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
00001fca  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
000072a4 g     F .text	00000278 .hidden _Unwind_VRS_Pop
000072a0  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
00004860  w    F .text	0000008c sjsu::cortex::SystemTimer::StartTimer() const
10000bc0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00000ee4  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
000076a4 g     F .text	00000022 .hidden ___Unwind_Backtrace
00002332  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00002a7c  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00009484  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000f00  w    F .text	000000dc sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)
00008350  w    O .text	00000024 vtable for sjsu::Gpio
20000000 g       *ABS*	00000000 __user_heap_base
000095a4 g       .ARM.extab	00000000 __exidx_start
000061b4  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00005f18  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00000698  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
00006180  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
000025de  w    F .text	00000018 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00007a38 g     F .text	00000048 __libc_init_array
000060b4  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
0000542c  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00007614 g     F .text	00000022 .hidden ___Unwind_RaiseException
10000006 g     O .data	00000001 addr_port_A
10000000 g       *ABS*	00000000 __base_SRAM
00002012  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000024fe  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
000049f0  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00007a0c g     F .text	0000000e abort
00007638 g     F .text	00000022 .hidden ___Unwind_Resume
000049d8  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000058  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00005e98  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
1000074c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
10000007 g     O .data	00000001 data_port_A
000062f8  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
00002552  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)
00006468 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
000021f4  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
000026e0  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
000003b2  w    F .text	00000016 std::_Any_data::_M_access() const
00007b40  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
00000d08  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
00006508 g     F .text	0000000a std::terminate()
00006514 g     F .text	0000009e .hidden __aeabi_d2f
00007564 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
00001ec0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00002356  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000065bc g     F .text	00000164 .hidden __aeabi_fsub
00005752  w    F .text	00000092 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
00001d96  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10000bcc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00002d6c g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00000fdc  w    F .text	00000084 sjsu::lpc40xx::Gpio::DetachInterrupt() const
000049b6  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000bd8 g       .bss	00000000 _ebss
000063a8  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
00002418  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
000058c0  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
000094e0  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00001d44  w    F .text	0000002c std::function<void ()>::operator()() const
0000951c  w    O .text	0000000e sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file
10000028  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
00004c3c  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
000047b0  w    F .text	00000090 sjsu::cortex::SystemTimer::Initialize() const
000044ea  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006754 g     F .text	0000007c .hidden __floatdisf
0000523a  w    F .text	00000016 sjsu::Uart::Flush() const
00009454  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002ce8 g     F .text	00000084 GetRegistersFromStack
000062b8  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
00005d88  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
10000754  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::function_map
0000207a  w    F .text	00000016 bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)
00000916  w    F .text	0000001a std::function<bool ()>::~function()
00000916  w    F .text	0000001a std::function<bool ()>::~function()
00007b48  w    O .text	00000008 sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file
000021ba  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
0000036c  w    F .text	00000018 operator new(unsigned int, void*)
00000d08  w    F .text	000000ac sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00007534 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00005954  w    F .text	000000e4 sjsu::InitializePlatform()
10000588  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
0000952c g     O .text	00000020 __sf_fake_stderr
00002332  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
000064f8 g     F .text	00000010 std::get_terminate()
00008334  w    O .text	0000001c vtable for sjsu::lpc17xx::Pin
10000bd8 g       .bss	00000000 end
00001ad0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00007638 g     F .text	00000022 .hidden _Unwind_Resume
00006edc g     F .text	0000000c .hidden _Unwind_DeleteException
00006ed8 g     F .text	00000002 .hidden _Unwind_Complete
00004d44  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
00001f94  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
00002ff4 g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
000020ea  w    F .text	00000056 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)
000022ec  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()
00009504  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00002450  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
000093e8  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
0000427e g     F .text	0000001e trace_write
000060e4  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
00001b04  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
10000bc4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
100000f8 g       .bss	00000000 _bss
0000941c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00005458  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
00005af8  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
100007f8  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
00004270 g     F .text	0000000e trace_initialize
00000a58  w    F .text	0000005c sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const
000064e2 g     F .text	00000006 __cxa_pure_virtual
00004ed0  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00005e62  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
00000900  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const
00006728 g     F .text	0000001c .hidden __floatsisf
0000945c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000804  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00007720 g     F .text	0000029c .hidden __gnu_unwind_execute
000025b4  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)
10000005 g     O .data	00000001 data_setmode_0
00004b24  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00007544 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000490  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00001c60  w    F .text	00000022 bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001ef4  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00000930  w    F .text	0000003a sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
00000744  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00008390  w    O .text	0000001c vtable for sjsu::Pin
00001ab6  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
10000bd8 g       .noinit	00000000 _end_noinit
00002834  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
000025f6  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
00004c18  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00002e80 g     F .text	000000c4 vTaskSwitchContext
00001de8  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000020a6  w    F .text	00000024 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)
000093d4  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
000045a4  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
00005ac6  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00006e84 g     F .text	00000044 .hidden __gnu_Unwind_Resume
00005d5a  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00007a1c g     F .text	0000001c __cxa_atexit
10000560  w    O .bss	00000028 sjsu::lpc40xx::Gpio::InterruptRegister(int)::interrupt
00004364  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00009464  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00007554 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
00004a14  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00006350  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
00001d2a  w    F .text	0000001a std::function<void ()>::function()
00007b44  w    O .text	00000004 sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes
00000ae0  w    F .text	00000048 sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const
00002660  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006744 g     F .text	0000008c .hidden __floatundisf
10000138  w    O .bss	00000004 sjsu::lpc17xx::Pin::function_map
00007614 g     F .text	00000022 .hidden _Unwind_RaiseException
00007a08  w    F .text	00000002 .hidden __aeabi_ldiv0
00000eca  w    F .text	0000001a std::function<void ()>::~function()
10000030  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00002cd4  w    F .text	00000014 sjsu::SystemInitialize()
100007e8  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
00002648  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006720 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
000007aa  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000120  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
000024b0  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
1000075c  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::open_drain_map
00000b28  w    F .text	00000036 sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)
00006498 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
0000443c  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
000061e2  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
0000083c  w    F .text	000000c4 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)
000004a8  w    F .text	00000030 sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)
0000954c g     O .text	00000020 __sf_fake_stdin
00000768  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()
000002fc g       .text	00000000 __CRP_WORD_START__
00001d2a  w    F .text	0000001a std::function<void ()>::function()
000061fc  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
00005158  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
0000042c  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
000046ee  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
000015a4 g     F .text	000000c8 main
000043a8  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00005836  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
000014b6  w    F .text	000000ee Bus::Bus()
00006754 g     F .text	0000007c .hidden __aeabi_l2f
00002068  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00001bce  w    F .text	00000032 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const
20000000 g       *ABS*	00000000 heap
000064e8 g     F .text	00000006 std::__throw_bad_function_call()
000043c8  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000948c  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00008374  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
00006514 g     F .text	0000009e .hidden __truncdfsf2
00000320 g       .text	00000000 __init_array_end
000063d0 g     F .text	00000026 vPortSVCHandler
00000000 g       *ABS*	00000000 __base_FLASH
100007e4  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
000093e0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000014  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006744 g     F .text	0000008c .hidden __aeabi_ul2f
000014b6  w    F .text	000000ee Bus::Bus()
0000454c  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006e70 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000003e4  w    F .text	00000026 std::_Function_base::~_Function_base()
00002692  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00002266  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00002266  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
10000004 g     O .data	00000001 command_register
00004e58  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000eca  w    F .text	0000001a std::function<void ()>::~function()
00001f4e  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
000009e4  w    F .text	00000014 sjsu::lpc17xx::Pin::Initialize() const
00002864  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
00006ec8 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000758  w    O .bss	00000004 guard variable for sjsu::lpc17xx::Pin::resistor_map
1000000c  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00005f18  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00005c26  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
00000320 g     F .text	00000000 _fini
0000751c g     F .text	00000018 .hidden restore_core_regs
00004c58  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
0000822c  w    O .text	00000009 sjsu::lpc40xx::Gpio::IsAValidPort() const::file
00007600 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
0000469a  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
0000947c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
00000e8e  w    F .text	00000024 sjsu::lpc40xx::Gpio::Read() const
000045c4  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
00001e72  w    F .text	00000034 std::function<void ()>::operator=(decltype(nullptr))
00000984  w    F .text	00000020 sjsu::Gpio::Gpio()
10000044  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000026aa  w    F .text	00000020 std::function<void ()>::operator bool() const
0000589c  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
0000096a  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
000065b4 g     F .text	0000016c .hidden __aeabi_frsub
00000444  w    F .text	00000034 sjsu::Pin::Pin(unsigned char, unsigned char)
000022aa  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
10000094 g     O .data	00000004 _impure_ptr
000093e4  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00004904  w    F .text	0000001e units::linear_scale<float>::operator()() const
000043f0  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
00000b90  w    F .text	00000074 sjsu::lpc40xx::Gpio::GpioRegister(int)
00004e1c  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000030c g       .text	00000000 __preinit_array_end
00006392  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
000005c4  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
0000136a  w    F .text	0000014c Bus::IORead(unsigned char)
10000000 g       .data	00000000 _data
00001dba  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000057e4  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
00004922  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00002514  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00002372  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000079f4 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00009404  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
10000bbc  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
00005aaa  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00005efa  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
00000e1c  w    F .text	00000044 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00002d94 g     F .text	00000080 ArmResetHandler
0000622c  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
0000287a  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
000006d0  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001b58  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()
00006ee8 g     F .text	0000002e .hidden _Unwind_VRS_Get
000003c8  w    F .text	0000001c std::_Function_base::_Function_base()
10000090 g     O .data	00000004 __cxxabiv1::__terminate_handler
000075ec g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00004cc8  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
000021d0  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
00004cfc  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00002f70 g     F .text	00000030 _write
000079bc g     F .text	0000002a .hidden __gnu_unwind_frame
00007680 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000f8 g       .data	00000000 _edata
10000544  w    O .bss	00000018 sjsu::lpc40xx::Gpio::GpioRegister(int)::port
1000080c  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00001c00  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000140  w    O .bss	00000004 sjsu::lpc17xx::Pin::open_drain_map
00005884  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00000db4  w    F .text	00000068 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
00008310  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
00002210  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00001c82  w    F .text	0000002e std::function<bool ()>::operator()() const
0000259c  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()
10000084  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
000093ec  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
000027c0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
00005b92  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000000 g       *ABS*	00000000 __base_RAM
10000080  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006720 g     F .text	00000024 .hidden __floatunsisf
000064ee g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
000075a8 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000093c8  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
00002f54 g     F .text	0000001a _kill
00002bcc  w    F .text	0000009c sjsu::InitializeDataSection()
00006198  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
00005c54  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
000007d8  w    F .text	00000048 sjsu::DefaultUptime()
00001b04  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
0000956c g     O .text	00000020 __sf_fake_stdout
00000384  w    F .text	00000018 std::numeric_limits<long long>::max()
000009a4  w    F .text	00000040 sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)
00002090  w    F .text	00000016 std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)
0000030c g       .text	00000000 __init_array_start
00007a08  w    F .text	00000002 .hidden __aeabi_idiv0
00001d70  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00001e3c  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
000026ca  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
0000039c  w    F .text	00000016 std::_Any_data::_M_access()
00005ae0  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00002fe8 g     F .text	0000000c _exit
00002806  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const
00009474  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
1000002c  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
0000281e  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)
1000058c g     O .bss	000001c0 bus
0000448a  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
000020ca  w    F .text	00000020 std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
00005394  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000eb2  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
00000478  w    F .text	00000018 sjsu::Pin::GetPort() const
000027d8  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
00007b24 g     F .text	00000010 strlen
10000128  w    O .bss	00000010 sjsu::Uptime
000004ec  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00001b80  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
0000729c  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00005e2c  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
00005090  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000064b8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
000053e0  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
000094ac  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000020  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
00005dd4  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000520  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
00002314  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00004dd4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
10000760  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::handlers
000067d0 g     F .text	00000000 .hidden __aeabi_ldivmod
00002b58  w    F .text	00000008 sjsu::Halt()
00000c84  w    F .text	00000014 sjsu::lpc40xx::Gpio::InterruptStatus()
000093dc  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
000064d8 g     F .text	0000000a __aeabi_atexit
00001de8  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
00005aaa  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
000065c0 g     F .text	00000160 .hidden __addsf3
00001ad0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001d04  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)
00000c04  w    F .text	00000080 sjsu::lpc40xx::Gpio::InterruptRegister(int)
1000013c  w    O .bss	00000004 sjsu::lpc17xx::Pin::resistor_map
0000944c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
000056a8  w    F .text	000000aa sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000018  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00007aec g     F .text	00000010 raise
1000055c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::GpioRegister(int)::port
00001fb4  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 95 2d 00 00 7d 5c 00 00 6d 2d 00 00     .....-..}\..m-..
      10:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 00 00 00 00     }\..}\..}\......
	...
      2c:	d1 63 00 00 7d 5c 00 00 00 00 00 00 01 64 00 00     .c..}\.......d..
      3c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      4c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      5c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      6c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      7c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      8c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      9c:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      ac:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      bc:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      cc:	7d 5c 00 00 7d 5c 00 00 7d 5c 00 00 7d 5c 00 00     }\..}\..}\..}\..
      dc:	7d 5c 00 00 7d 5c 00 00                             }\..}\..

000000e4 <data_section_table>:
      e4:	0000965c 	.word	0x0000965c
      e8:	10000000 	.word	0x10000000
      ec:	000000f8 	.word	0x000000f8
      f0:	0000965c 	.word	0x0000965c
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000f8 	.word	0x100000f8
     100:	00000ae0 	.word	0x00000ae0
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000351 	.word	0x00000351
     310:	000029fd 	.word	0x000029fd
     314:	00002bbd 	.word	0x00002bbd
     318:	00002e71 	.word	0x00002e71
     31c:	000063bf 	.word	0x000063bf

00000320 <_fini>:
     320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     322:	bf00      	nop
     324:	bcf8      	pop	{r3, r4, r5, r6, r7}
     326:	bc08      	pop	{r3}
     328:	469e      	mov	lr, r3
     32a:	4770      	bx	lr

0000032c <__do_global_dtors_aux>:
     32c:	b510      	push	{r4, lr}
     32e:	4c05      	ldr	r4, [pc, #20]	; (344 <__do_global_dtors_aux+0x18>)
     330:	7823      	ldrb	r3, [r4, #0]
     332:	b933      	cbnz	r3, 342 <__do_global_dtors_aux+0x16>
     334:	4b04      	ldr	r3, [pc, #16]	; (348 <__do_global_dtors_aux+0x1c>)
     336:	b113      	cbz	r3, 33e <__do_global_dtors_aux+0x12>
     338:	4804      	ldr	r0, [pc, #16]	; (34c <__do_global_dtors_aux+0x20>)
     33a:	f3af 8000 	nop.w
     33e:	2301      	movs	r3, #1
     340:	7023      	strb	r3, [r4, #0]
     342:	bd10      	pop	{r4, pc}
     344:	100000f8 	.word	0x100000f8
     348:	00000000 	.word	0x00000000
     34c:	000095a4 	.word	0x000095a4

00000350 <frame_dummy>:
     350:	b508      	push	{r3, lr}
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <frame_dummy+0x10>)
     354:	b11b      	cbz	r3, 35e <frame_dummy+0xe>
     356:	4903      	ldr	r1, [pc, #12]	; (364 <frame_dummy+0x14>)
     358:	4803      	ldr	r0, [pc, #12]	; (368 <frame_dummy+0x18>)
     35a:	f3af 8000 	nop.w
     35e:	bd08      	pop	{r3, pc}
     360:	00000000 	.word	0x00000000
     364:	100000fc 	.word	0x100000fc
     368:	000095a4 	.word	0x000095a4

0000036c <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     36c:	b480      	push	{r7}
     36e:	b083      	sub	sp, #12
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	6039      	str	r1, [r7, #0]
     376:	683b      	ldr	r3, [r7, #0]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	f85d 7b04 	ldr.w	r7, [sp], #4
     382:	4770      	bx	lr

00000384 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     384:	b480      	push	{r7}
     386:	af00      	add	r7, sp, #0
     388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     38c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
     390:	4610      	mov	r0, r2
     392:	4619      	mov	r1, r3
     394:	46bd      	mov	sp, r7
     396:	f85d 7b04 	ldr.w	r7, [sp], #4
     39a:	4770      	bx	lr

0000039c <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     39c:	b480      	push	{r7}
     39e:	b083      	sub	sp, #12
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	4618      	mov	r0, r3
     3a8:	370c      	adds	r7, #12
     3aa:	46bd      	mov	sp, r7
     3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     3b0:	4770      	bx	lr

000003b2 <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     3b2:	b480      	push	{r7}
     3b4:	b083      	sub	sp, #12
     3b6:	af00      	add	r7, sp, #0
     3b8:	6078      	str	r0, [r7, #4]
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	4618      	mov	r0, r3
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	2200      	movs	r2, #0
     3d4:	609a      	str	r2, [r3, #8]
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	4618      	mov	r0, r3
     3da:	370c      	adds	r7, #12
     3dc:	46bd      	mov	sp, r7
     3de:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e2:	4770      	bx	lr

000003e4 <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	689b      	ldr	r3, [r3, #8]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	689b      	ldr	r3, [r3, #8]
     3f8:	6878      	ldr	r0, [r7, #4]
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2203      	movs	r2, #3
     3fe:	4798      	blx	r3
    }
     400:	687b      	ldr	r3, [r7, #4]
     402:	4618      	mov	r0, r3
     404:	3708      	adds	r7, #8
     406:	46bd      	mov	sp, r7
     408:	bd80      	pop	{r7, pc}

0000040a <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     40a:	b480      	push	{r7}
     40c:	b083      	sub	sp, #12
     40e:	af00      	add	r7, sp, #0
     410:	6078      	str	r0, [r7, #4]
     412:	687b      	ldr	r3, [r7, #4]
     414:	689b      	ldr	r3, [r3, #8]
     416:	2b00      	cmp	r3, #0
     418:	bf0c      	ite	eq
     41a:	2301      	moveq	r3, #1
     41c:	2300      	movne	r3, #0
     41e:	b2db      	uxtb	r3, r3
     420:	4618      	mov	r0, r3
     422:	370c      	adds	r7, #12
     424:	46bd      	mov	sp, r7
     426:	f85d 7b04 	ldr.w	r7, [sp], #4
     42a:	4770      	bx	lr

0000042c <sjsu::InterruptController::GetPlatformController()>:
  static void SetPlatformController(InterruptController * interrupt_controller)
  {
    platform_interrupt_controller = interrupt_controller;
  }
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
     42c:	b480      	push	{r7}
     42e:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
     430:	4b03      	ldr	r3, [pc, #12]	; (440 <sjsu::InterruptController::GetPlatformController()+0x14>)
     432:	681b      	ldr	r3, [r3, #0]
  }
     434:	4618      	mov	r0, r3
     436:	46bd      	mov	sp, r7
     438:	f85d 7b04 	ldr.w	r7, [sp], #4
     43c:	4770      	bx	lr
     43e:	bf00      	nop
     440:	10000114 	.word	0x10000114

00000444 <sjsu::Pin::Pin(unsigned char, unsigned char)>:
    /// resistor.
    kRepeater
  };

  /// Set internal port and pin values.
  constexpr Pin(uint8_t port, uint8_t pin) : port_(port), pin_(pin) {}
     444:	b480      	push	{r7}
     446:	b083      	sub	sp, #12
     448:	af00      	add	r7, sp, #0
     44a:	6078      	str	r0, [r7, #4]
     44c:	460b      	mov	r3, r1
     44e:	70fb      	strb	r3, [r7, #3]
     450:	4613      	mov	r3, r2
     452:	70bb      	strb	r3, [r7, #2]
     454:	4a07      	ldr	r2, [pc, #28]	; (474 <sjsu::Pin::Pin(unsigned char, unsigned char)+0x30>)
     456:	687b      	ldr	r3, [r7, #4]
     458:	601a      	str	r2, [r3, #0]
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	78fa      	ldrb	r2, [r7, #3]
     45e:	711a      	strb	r2, [r3, #4]
     460:	687b      	ldr	r3, [r7, #4]
     462:	78ba      	ldrb	r2, [r7, #2]
     464:	715a      	strb	r2, [r3, #5]
     466:	687b      	ldr	r3, [r7, #4]
     468:	4618      	mov	r0, r3
     46a:	370c      	adds	r7, #12
     46c:	46bd      	mov	sp, r7
     46e:	f85d 7b04 	ldr.w	r7, [sp], #4
     472:	4770      	bx	lr
     474:	00008398 	.word	0x00008398

00000478 <sjsu::Pin::GetPort() const>:
  {
    SetPull(Resistor::kNone);
  }

  /// Getter method for the pin's port.
  uint8_t GetPort() const
     478:	b480      	push	{r7}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
     47e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     480:	687b      	ldr	r3, [r7, #4]
     482:	791b      	ldrb	r3, [r3, #4]
  }
     484:	4618      	mov	r0, r3
     486:	370c      	adds	r7, #12
     488:	46bd      	mov	sp, r7
     48a:	f85d 7b04 	ldr.w	r7, [sp], #4
     48e:	4770      	bx	lr

00000490 <sjsu::Pin::GetPin() const>:
  /// Getter method for the pin's pin.
  uint8_t GetPin() const
     490:	b480      	push	{r7}
     492:	b083      	sub	sp, #12
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     498:	687b      	ldr	r3, [r7, #4]
     49a:	795b      	ldrb	r3, [r3, #5]
  }
     49c:	4618      	mov	r0, r3
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>:

  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}
     4a8:	b580      	push	{r7, lr}
     4aa:	b082      	sub	sp, #8
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
     4b0:	460b      	mov	r3, r1
     4b2:	70fb      	strb	r3, [r7, #3]
     4b4:	4613      	mov	r3, r2
     4b6:	70bb      	strb	r3, [r7, #2]
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	78ba      	ldrb	r2, [r7, #2]
     4bc:	78f9      	ldrb	r1, [r7, #3]
     4be:	4618      	mov	r0, r3
     4c0:	f7ff ffc0 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     4c4:	4a03      	ldr	r2, [pc, #12]	; (4d4 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)+0x2c>)
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	601a      	str	r2, [r3, #0]
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	4618      	mov	r0, r3
     4ce:	3708      	adds	r7, #8
     4d0:	46bd      	mov	sp, r7
     4d2:	bd80      	pop	{r7, pc}
     4d4:	0000837c 	.word	0x0000837c

000004d8 <sjsu::lpc40xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     4d8:	b480      	push	{r7}
     4da:	b083      	sub	sp, #12
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	bf00      	nop
     4e2:	370c      	adds	r7, #12
     4e4:	46bd      	mov	sp, r7
     4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4ea:	4770      	bx	lr

000004ec <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     4ec:	b580      	push	{r7, lr}
     4ee:	b082      	sub	sp, #8
     4f0:	af00      	add	r7, sp, #0
     4f2:	6078      	str	r0, [r7, #4]
     4f4:	460b      	mov	r3, r1
     4f6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     4f8:	4b08      	ldr	r3, [pc, #32]	; (51c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     4fa:	78f9      	ldrb	r1, [r7, #3]
     4fc:	781a      	ldrb	r2, [r3, #0]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	021b      	lsls	r3, r3, #8
     502:	431a      	orrs	r2, r3
     504:	2300      	movs	r3, #0
     506:	f362 030f 	bfi	r3, r2, #0, #16
     50a:	461a      	mov	r2, r3
     50c:	6878      	ldr	r0, [r7, #4]
     50e:	f000 f859 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     512:	bf00      	nop
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	bd80      	pop	{r7, pc}
     51a:	bf00      	nop
     51c:	00007b34 	.word	0x00007b34

00000520 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
     528:	460b      	mov	r3, r1
     52a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     52c:	4b08      	ldr	r3, [pc, #32]	; (550 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     52e:	78f9      	ldrb	r1, [r7, #3]
     530:	781a      	ldrb	r2, [r3, #0]
     532:	785b      	ldrb	r3, [r3, #1]
     534:	021b      	lsls	r3, r3, #8
     536:	431a      	orrs	r2, r3
     538:	2300      	movs	r3, #0
     53a:	f362 030f 	bfi	r3, r2, #0, #16
     53e:	461a      	mov	r2, r3
     540:	6878      	ldr	r0, [r7, #4]
     542:	f000 f83f 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     546:	bf00      	nop
     548:	3708      	adds	r7, #8
     54a:	46bd      	mov	sp, r7
     54c:	bd80      	pop	{r7, pc}
     54e:	bf00      	nop
     550:	00007b38 	.word	0x00007b38

00000554 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  void SetAsAnalogMode(bool set_as_analog = true) const override
     554:	b580      	push	{r7, lr}
     556:	b082      	sub	sp, #8
     558:	af00      	add	r7, sp, #0
     55a:	6078      	str	r0, [r7, #4]
     55c:	460b      	mov	r3, r1
     55e:	70fb      	strb	r3, [r7, #3]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     560:	78fb      	ldrb	r3, [r7, #3]
     562:	f083 0301 	eor.w	r3, r3, #1
     566:	b2db      	uxtb	r3, r3
     568:	4619      	mov	r1, r3
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     56c:	781a      	ldrb	r2, [r3, #0]
     56e:	785b      	ldrb	r3, [r3, #1]
     570:	021b      	lsls	r3, r3, #8
     572:	431a      	orrs	r2, r3
     574:	2300      	movs	r3, #0
     576:	f362 030f 	bfi	r3, r2, #0, #16
     57a:	461a      	mov	r2, r3
     57c:	6878      	ldr	r0, [r7, #4]
     57e:	f000 f821 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     582:	bf00      	nop
     584:	3708      	adds	r7, #8
     586:	46bd      	mov	sp, r7
     588:	bd80      	pop	{r7, pc}
     58a:	bf00      	nop
     58c:	00007b3c 	.word	0x00007b3c

00000590 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:
  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
     598:	460b      	mov	r3, r1
     59a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     59c:	78f9      	ldrb	r1, [r7, #3]
     59e:	4b08      	ldr	r3, [pc, #32]	; (5c0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     5a0:	781a      	ldrb	r2, [r3, #0]
     5a2:	785b      	ldrb	r3, [r3, #1]
     5a4:	021b      	lsls	r3, r3, #8
     5a6:	431a      	orrs	r2, r3
     5a8:	2300      	movs	r3, #0
     5aa:	f362 030f 	bfi	r3, r2, #0, #16
     5ae:	461a      	mov	r2, r3
     5b0:	6878      	ldr	r0, [r7, #4]
     5b2:	f000 f807 	bl	5c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     5b6:	bf00      	nop
     5b8:	3708      	adds	r7, #8
     5ba:	46bd      	mov	sp, r7
     5bc:	bd80      	pop	{r7, pc}
     5be:	bf00      	nop
     5c0:	00007b40 	.word	0x00007b40

000005c4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c6:	b087      	sub	sp, #28
     5c8:	af00      	add	r7, sp, #0
     5ca:	60f8      	str	r0, [r7, #12]
     5cc:	460b      	mov	r3, r1
     5ce:	80ba      	strh	r2, [r7, #4]
     5d0:	72fb      	strb	r3, [r7, #11]
     5d2:	68fb      	ldr	r3, [r7, #12]
     5d4:	613b      	str	r3, [r7, #16]
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  /// @returns a pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
     5d6:	4b19      	ldr	r3, [pc, #100]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     5d8:	681c      	ldr	r4, [r3, #0]
     5da:	693b      	ldr	r3, [r7, #16]
     5dc:	4618      	mov	r0, r3
     5de:	f7ff ff4b 	bl	478 <sjsu::Pin::GetPort() const>
     5e2:	4603      	mov	r3, r0
     5e4:	461d      	mov	r5, r3
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	4618      	mov	r0, r3
     5ea:	f7ff ff51 	bl	490 <sjsu::Pin::GetPin() const>
     5ee:	4603      	mov	r3, r0
     5f0:	461a      	mov	r2, r3
     5f2:	016b      	lsls	r3, r5, #5
     5f4:	4413      	add	r3, r2
     5f6:	009b      	lsls	r3, r3, #2
     5f8:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	7af9      	ldrb	r1, [r7, #11]
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4618      	mov	r0, r3
     602:	f001 fa45 	bl	1a90 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     606:	4605      	mov	r5, r0
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     60e:	681c      	ldr	r4, [r3, #0]
     610:	697b      	ldr	r3, [r7, #20]
     612:	4618      	mov	r0, r3
     614:	f7ff ff30 	bl	478 <sjsu::Pin::GetPort() const>
     618:	4603      	mov	r3, r0
     61a:	461e      	mov	r6, r3
     61c:	697b      	ldr	r3, [r7, #20]
     61e:	4618      	mov	r0, r3
     620:	f7ff ff36 	bl	490 <sjsu::Pin::GetPin() const>
     624:	4603      	mov	r3, r0
     626:	461a      	mov	r2, r3
     628:	0173      	lsls	r3, r6, #5
     62a:	4413      	add	r3, r2
     62c:	009b      	lsls	r3, r3, #2
     62e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     630:	601d      	str	r5, [r3, #0]
  }
     632:	bf00      	nop
     634:	371c      	adds	r7, #28
     636:	46bd      	mov	sp, r7
     638:	bdf0      	pop	{r4, r5, r6, r7, pc}
     63a:	bf00      	nop
     63c:	10000118 	.word	0x10000118

00000640 <sjsu::Gpio::SetHigh() const>:

  // ==============================
  // Utility Methods
  // ==============================
  /// Set pin to HIGH voltage
  void SetHigh() const
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
     648:	687b      	ldr	r3, [r7, #4]
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	3304      	adds	r3, #4
     64e:	681b      	ldr	r3, [r3, #0]
     650:	2101      	movs	r1, #1
     652:	6878      	ldr	r0, [r7, #4]
     654:	4798      	blx	r3
  }
     656:	bf00      	nop
     658:	3708      	adds	r7, #8
     65a:	46bd      	mov	sp, r7
     65c:	bd80      	pop	{r7, pc}

0000065e <sjsu::Gpio::SetLow() const>:
  /// Set pin to LOW voltage
  void SetLow() const
     65e:	b580      	push	{r7, lr}
     660:	b082      	sub	sp, #8
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     666:	687b      	ldr	r3, [r7, #4]
     668:	681b      	ldr	r3, [r3, #0]
     66a:	3304      	adds	r3, #4
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	2100      	movs	r1, #0
     670:	6878      	ldr	r0, [r7, #4]
     672:	4798      	blx	r3
  }
     674:	bf00      	nop
     676:	3708      	adds	r7, #8
     678:	46bd      	mov	sp, r7
     67a:	bd80      	pop	{r7, pc}

0000067c <sjsu::Gpio::SetAsInput() const>:
  /// Set pin direction as input
  void SetAsInput() const
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kInput);
     684:	687b      	ldr	r3, [r7, #4]
     686:	681b      	ldr	r3, [r3, #0]
     688:	681b      	ldr	r3, [r3, #0]
     68a:	2100      	movs	r1, #0
     68c:	6878      	ldr	r0, [r7, #4]
     68e:	4798      	blx	r3
  }
     690:	bf00      	nop
     692:	3708      	adds	r7, #8
     694:	46bd      	mov	sp, r7
     696:	bd80      	pop	{r7, pc}

00000698 <sjsu::Gpio::SetAsOutput() const>:
  /// Set pin direction as output
  void SetAsOutput() const
     698:	b580      	push	{r7, lr}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	681b      	ldr	r3, [r3, #0]
     6a6:	2101      	movs	r1, #1
     6a8:	6878      	ldr	r0, [r7, #4]
     6aa:	4798      	blx	r3
  }
     6ac:	bf00      	nop
     6ae:	3708      	adds	r7, #8
     6b0:	46bd      	mov	sp, r7
     6b2:	bd80      	pop	{r7, pc}

000006b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     6b4:	b480      	push	{r7}
     6b6:	b083      	sub	sp, #12
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	{ return __r; }
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	e9d3 2300 	ldrd	r2, r3, [r3]
     6c2:	4610      	mov	r0, r2
     6c4:	4619      	mov	r1, r3
     6c6:	370c      	adds	r7, #12
     6c8:	46bd      	mov	sp, r7
     6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ce:	4770      	bx	lr

000006d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      }

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
     6d0:	b5b0      	push	{r4, r5, r7, lr}
     6d2:	b086      	sub	sp, #24
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
     6e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
     6e4:	f107 0308 	add.w	r3, r7, #8
     6e8:	4618      	mov	r0, r3
     6ea:	f7ff ffe3 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     6ee:	4604      	mov	r4, r0
     6f0:	460d      	mov	r5, r1
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     6f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
     6fc:	f107 0310 	add.w	r3, r7, #16
     700:	4618      	mov	r0, r3
     702:	f7ff ffd7 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     706:	4602      	mov	r2, r0
     708:	460b      	mov	r3, r1
     70a:	4294      	cmp	r4, r2
     70c:	eb75 0303 	sbcs.w	r3, r5, r3
     710:	bfb4      	ite	lt
     712:	2301      	movlt	r3, #1
     714:	2300      	movge	r3, #0
     716:	b2db      	uxtb	r3, r3
      }
     718:	4618      	mov	r0, r3
     71a:	3718      	adds	r7, #24
     71c:	46bd      	mov	sp, r7
     71e:	bdb0      	pop	{r4, r5, r7, pc}

00000720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     720:	b480      	push	{r7}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     72a:	683b      	ldr	r3, [r7, #0]
     72c:	e9d3 2300 	ldrd	r2, r3, [r3]
     730:	6879      	ldr	r1, [r7, #4]
     732:	e9c1 2300 	strd	r2, r3, [r1]
     736:	687b      	ldr	r3, [r7, #4]
     738:	4618      	mov	r0, r3
     73a:	370c      	adds	r7, #12
     73c:	46bd      	mov	sp, r7
     73e:	f85d 7b04 	ldr.w	r7, [sp], #4
     742:	4770      	bx	lr

00000744 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     744:	b480      	push	{r7}
     746:	b083      	sub	sp, #12
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
     74c:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     74e:	683b      	ldr	r3, [r7, #0]
     750:	e9d3 2300 	ldrd	r2, r3, [r3]
     754:	6879      	ldr	r1, [r7, #4]
     756:	e9c1 2300 	strd	r2, r3, [r1]
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	4618      	mov	r0, r3
     75e:	370c      	adds	r7, #12
     760:	46bd      	mov	sp, r7
     762:	f85d 7b04 	ldr.w	r7, [sp], #4
     766:	4770      	bx	lr

00000768 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
     770:	687b      	ldr	r3, [r7, #4]
     772:	4618      	mov	r0, r3
     774:	f000 f805 	bl	782 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>
     778:	bf00      	nop
     77a:	6878      	ldr	r0, [r7, #4]
     77c:	3708      	adds	r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}

00000782 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>:
      constexpr _Dur __check_overflow()
     782:	b580      	push	{r7, lr}
     784:	b084      	sub	sp, #16
     786:	af00      	add	r7, sp, #0
     788:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
     78a:	f04f 0200 	mov.w	r2, #0
     78e:	f04f 0300 	mov.w	r3, #0
     792:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
     796:	f107 0308 	add.w	r3, r7, #8
     79a:	4619      	mov	r1, r3
     79c:	6878      	ldr	r0, [r7, #4]
     79e:	f7ff ffbf 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
     7a2:	6878      	ldr	r0, [r7, #4]
     7a4:	3710      	adds	r7, #16
     7a6:	46bd      	mov	sp, r7
     7a8:	bd80      	pop	{r7, pc}

000007aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	operator+=(const duration& __d)
     7aa:	b5b0      	push	{r4, r5, r7, lr}
     7ac:	b082      	sub	sp, #8
     7ae:	af00      	add	r7, sp, #0
     7b0:	6078      	str	r0, [r7, #4]
     7b2:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
     7b4:	6838      	ldr	r0, [r7, #0]
     7b6:	f7ff ff7d 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
     7c0:	1884      	adds	r4, r0, r2
     7c2:	eb41 0503 	adc.w	r5, r1, r3
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     7cc:	687b      	ldr	r3, [r7, #4]
	}
     7ce:	4618      	mov	r0, r3
     7d0:	3708      	adds	r7, #8
     7d2:	46bd      	mov	sp, r7
     7d4:	bdb0      	pop	{r4, r5, r7, pc}
     7d6:	Address 0x00000000000007d6 is out of bounds.


000007d8 <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     7d8:	b580      	push	{r7, lr}
     7da:	b086      	sub	sp, #24
     7dc:	af00      	add	r7, sp, #0
     7de:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     7e0:	f107 0310 	add.w	r3, r7, #16
     7e4:	4618      	mov	r0, r3
     7e6:	f001 f966 	bl	1ab6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     7ea:	f107 0210 	add.w	r2, r7, #16
     7ee:	f107 0308 	add.w	r3, r7, #8
     7f2:	4611      	mov	r1, r2
     7f4:	4618      	mov	r0, r3
     7f6:	f001 f96b 	bl	1ad0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     7fa:	f107 0308 	add.w	r3, r7, #8
     7fe:	4619      	mov	r1, r3
     800:	4806      	ldr	r0, [pc, #24]	; (81c <sjsu::DefaultUptime()+0x44>)
     802:	f7ff ffd2 	bl	7aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     806:	6879      	ldr	r1, [r7, #4]
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <sjsu::DefaultUptime()+0x44>)
     80a:	e9d3 2300 	ldrd	r2, r3, [r3]
     80e:	e9c1 2300 	strd	r2, r3, [r1]
}
     812:	6878      	ldr	r0, [r7, #4]
     814:	3718      	adds	r7, #24
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	bf00      	nop
     81c:	10000120 	.word	0x10000120

00000820 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     820:	b580      	push	{r7, lr}
     822:	b082      	sub	sp, #8
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
     828:	687b      	ldr	r3, [r7, #4]
     82a:	4618      	mov	r0, r3
     82c:	f7ff fdda 	bl	3e4 <std::_Function_base::~_Function_base()>
     830:	687b      	ldr	r3, [r7, #4]
     832:	4618      	mov	r0, r3
     834:	3708      	adds	r7, #8
     836:	46bd      	mov	sp, r7
     838:	bd80      	pop	{r7, pc}
     83a:	Address 0x000000000000083a is out of bounds.


0000083c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>:
///        return true.
/// @param is_done will be run in a tight loop until it returns true or the
///        timeout time has elapsed.
inline Status Wait(std::chrono::nanoseconds timeout,
                   std::function<bool()> is_done)
{
     83c:	b580      	push	{r7, lr}
     83e:	b092      	sub	sp, #72	; 0x48
     840:	af00      	add	r7, sp, #0
     842:	e9c7 0104 	strd	r0, r1, [r7, #16]
     846:	60fa      	str	r2, [r7, #12]
  std::chrono::nanoseconds timeout_time;
  if (timeout == std::chrono::nanoseconds::max())
     848:	f107 0320 	add.w	r3, r7, #32
     84c:	4618      	mov	r0, r3
     84e:	f001 f983 	bl	1b58 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>
     852:	f107 0220 	add.w	r2, r7, #32
     856:	f107 0310 	add.w	r3, r7, #16
     85a:	4611      	mov	r1, r2
     85c:	4618      	mov	r0, r3
     85e:	f001 f98f 	bl	1b80 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     862:	4603      	mov	r3, r0
     864:	2b00      	cmp	r3, #0
     866:	d004      	beq.n	872 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x36>
  {
    // TODO(#983): This is a cheap hack to keep overflows from happening, but
    // what if the system hsa been on for a long period of time and a new
    // timeout overflows? This needs to be handled properly.
    timeout_time = timeout;
     868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     86c:	e9c7 2306 	strd	r2, r3, [r7, #24]
     870:	e023      	b.n	8ba <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x7e>
  }
  else if (timeout == 0ns)
     872:	f107 0328 	add.w	r3, r7, #40	; 0x28
     876:	4618      	mov	r0, r3
     878:	f7ff ff76 	bl	768 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>
     87c:	f107 0228 	add.w	r2, r7, #40	; 0x28
     880:	f107 0310 	add.w	r3, r7, #16
     884:	4611      	mov	r1, r2
     886:	4618      	mov	r0, r3
     888:	f001 f97a 	bl	1b80 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     88c:	4603      	mov	r3, r0
     88e:	2b00      	cmp	r3, #0
     890:	d001      	beq.n	896 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x5a>
  {
    return Status::kTimedOut;
     892:	2301      	movs	r3, #1
     894:	e02d      	b.n	8f2 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb6>
      // this function, we substract 2ns.
      timeout_time = (Uptime() + timeout) - 2us;
    }
    else
    {
      timeout_time = Uptime() + timeout;
     896:	f107 0330 	add.w	r3, r7, #48	; 0x30
     89a:	4918      	ldr	r1, [pc, #96]	; (8fc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     89c:	4618      	mov	r0, r3
     89e:	f001 f996 	bl	1bce <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     8a2:	463b      	mov	r3, r7
     8a4:	f107 0210 	add.w	r2, r7, #16
     8a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
     8ac:	4618      	mov	r0, r3
     8ae:	f001 f9a7 	bl	1c00 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
     8b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
  }

  Status status = Status::kTimedOut;
     8ba:	2301      	movs	r3, #1
     8bc:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() <= timeout_time)
     8be:	f107 0338 	add.w	r3, r7, #56	; 0x38
     8c2:	490e      	ldr	r1, [pc, #56]	; (8fc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xc0>)
     8c4:	4618      	mov	r0, r3
     8c6:	f001 f982 	bl	1bce <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     8ca:	f107 0218 	add.w	r2, r7, #24
     8ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
     8d2:	4611      	mov	r1, r2
     8d4:	4618      	mov	r0, r3
     8d6:	f001 f9c3 	bl	1c60 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     8da:	4603      	mov	r3, r0
     8dc:	2b00      	cmp	r3, #0
     8de:	d007      	beq.n	8f0 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xb4>
  {
    if (is_done())
     8e0:	68f8      	ldr	r0, [r7, #12]
     8e2:	f001 f9ce 	bl	1c82 <std::function<bool ()>::operator()() const>
     8e6:	4603      	mov	r3, r0
     8e8:	2b00      	cmp	r3, #0
     8ea:	d0e8      	beq.n	8be <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x82>
    {
      status = Status::kSuccess;
     8ec:	2300      	movs	r3, #0
     8ee:	647b      	str	r3, [r7, #68]	; 0x44
      break;
    }
  }
  return status;
     8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     8f2:	4618      	mov	r0, r3
     8f4:	3748      	adds	r7, #72	; 0x48
     8f6:	46bd      	mov	sp, r7
     8f8:	bd80      	pop	{r7, pc}
     8fa:	bf00      	nop
     8fc:	10000128 	.word	0x10000128

00000900 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>:
///
/// @param timeout - the amount of time to wait.
/// @return always returns Status::kTimedOut
inline Status Wait(std::chrono::nanoseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     900:	b480      	push	{r7}
     902:	b083      	sub	sp, #12
     904:	af00      	add	r7, sp, #0
     906:	6078      	str	r0, [r7, #4]
     908:	2300      	movs	r3, #0
     90a:	4618      	mov	r0, r3
     90c:	370c      	adds	r7, #12
     90e:	46bd      	mov	sp, r7
     910:	f85d 7b04 	ldr.w	r7, [sp], #4
     914:	4770      	bx	lr

00000916 <std::function<bool ()>::~function()>:
     916:	b580      	push	{r7, lr}
     918:	b082      	sub	sp, #8
     91a:	af00      	add	r7, sp, #0
     91c:	6078      	str	r0, [r7, #4]
     91e:	687b      	ldr	r3, [r7, #4]
     920:	4618      	mov	r0, r3
     922:	f7ff fd5f 	bl	3e4 <std::_Function_base::~_Function_base()>
     926:	687b      	ldr	r3, [r7, #4]
     928:	4618      	mov	r0, r3
     92a:	3708      	adds	r7, #8
     92c:	46bd      	mov	sp, r7
     92e:	bd80      	pop	{r7, pc}

00000930 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:
{
     930:	b590      	push	{r4, r7, lr}
     932:	b089      	sub	sp, #36	; 0x24
     934:	af00      	add	r7, sp, #0
     936:	e9c7 0100 	strd	r0, r1, [r7]
  return Wait(timeout, []() -> bool { return false; });
     93a:	f107 030c 	add.w	r3, r7, #12
     93e:	4611      	mov	r1, r2
     940:	4618      	mov	r0, r3
     942:	f001 f9b5 	bl	1cb0 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>
     946:	f107 030c 	add.w	r3, r7, #12
     94a:	461a      	mov	r2, r3
     94c:	e9d7 0100 	ldrd	r0, r1, [r7]
     950:	f7ff ff74 	bl	83c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>
     954:	4604      	mov	r4, r0
     956:	f107 030c 	add.w	r3, r7, #12
     95a:	4618      	mov	r0, r3
     95c:	f7ff ffdb 	bl	916 <std::function<bool ()>::~function()>
     960:	4623      	mov	r3, r4
}
     962:	4618      	mov	r0, r3
     964:	3724      	adds	r7, #36	; 0x24
     966:	46bd      	mov	sp, r7
     968:	bd90      	pop	{r4, r7, pc}

0000096a <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:

/// Delay the system for a duration of time
inline void Delay(std::chrono::nanoseconds delay_time)
{
     96a:	b580      	push	{r7, lr}
     96c:	b082      	sub	sp, #8
     96e:	af00      	add	r7, sp, #0
     970:	e9c7 0100 	strd	r0, r1, [r7]
  Wait(delay_time);
     974:	e9d7 0100 	ldrd	r0, r1, [r7]
     978:	f7ff ffda 	bl	930 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
}
     97c:	bf00      	nop
     97e:	3708      	adds	r7, #8
     980:	46bd      	mov	sp, r7
     982:	bd80      	pop	{r7, pc}

00000984 <sjsu::Gpio::Gpio()>:
class Gpio
     984:	b480      	push	{r7}
     986:	b083      	sub	sp, #12
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
     98c:	4a04      	ldr	r2, [pc, #16]	; (9a0 <sjsu::Gpio::Gpio()+0x1c>)
     98e:	687b      	ldr	r3, [r7, #4]
     990:	601a      	str	r2, [r3, #0]
     992:	687b      	ldr	r3, [r7, #4]
     994:	4618      	mov	r0, r3
     996:	370c      	adds	r7, #12
     998:	46bd      	mov	sp, r7
     99a:	f85d 7b04 	ldr.w	r7, [sp], #4
     99e:	4770      	bx	lr
     9a0:	00008358 	.word	0x00008358

000009a4 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>:
  }
  /// Construct a pin for the specified port and pin numbers.
  ///
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin)
     9a4:	b590      	push	{r4, r7, lr}
     9a6:	b083      	sub	sp, #12
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
     9ac:	460b      	mov	r3, r1
     9ae:	70fb      	strb	r3, [r7, #3]
     9b0:	4613      	mov	r3, r2
     9b2:	70bb      	strb	r3, [r7, #2]
      : sjsu::Pin(port, pin), kPinMask(GetPinsBitmask(pin))
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	78ba      	ldrb	r2, [r7, #2]
     9b8:	78f9      	ldrb	r1, [r7, #3]
     9ba:	4618      	mov	r0, r3
     9bc:	f7ff fd42 	bl	444 <sjsu::Pin::Pin(unsigned char, unsigned char)>
     9c0:	4a07      	ldr	r2, [pc, #28]	; (9e0 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)+0x3c>)
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	601a      	str	r2, [r3, #0]
     9c6:	687c      	ldr	r4, [r7, #4]
     9c8:	78bb      	ldrb	r3, [r7, #2]
     9ca:	4618      	mov	r0, r3
     9cc:	f000 f8ac 	bl	b28 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>
     9d0:	4603      	mov	r3, r0
     9d2:	80e3      	strh	r3, [r4, #6]
  {
  }
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	4618      	mov	r0, r3
     9d8:	370c      	adds	r7, #12
     9da:	46bd      	mov	sp, r7
     9dc:	bd90      	pop	{r4, r7, pc}
     9de:	bf00      	nop
     9e0:	0000833c 	.word	0x0000833c

000009e4 <sjsu::lpc17xx::Pin::Initialize() const>:

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  void Initialize() const override {}
     9e4:	b480      	push	{r7}
     9e6:	b083      	sub	sp, #12
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	bf00      	nop
     9ee:	370c      	adds	r7, #12
     9f0:	46bd      	mov	sp, r7
     9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f6:	4770      	bx	lr

000009f8 <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const>:

  void SetPinFunction(uint8_t function) const override
     9f8:	b590      	push	{r4, r7, lr}
     9fa:	b085      	sub	sp, #20
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
     a00:	460b      	mov	r3, r1
     a02:	70fb      	strb	r3, [r7, #3]
  {
    uint32_t pin_reg_select = PinRegisterLookup();
     a04:	6878      	ldr	r0, [r7, #4]
     a06:	f000 f8aa 	bl	b5e <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     a0a:	60f8      	str	r0, [r7, #12]
    function_map->pin[pin_reg_select] =
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     a0c:	4b0b      	ldr	r3, [pc, #44]	; (a3c <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	68fa      	ldr	r2, [r7, #12]
     a12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    function_map->pin[pin_reg_select] =
     a16:	4b09      	ldr	r3, [pc, #36]	; (a3c <sjsu::lpc17xx::Pin::SetPinFunction(unsigned char) const+0x44>)
     a18:	681c      	ldr	r4, [r3, #0]
        bit::Insert(function_map->pin[pin_reg_select], function, kPinMask);
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	78f9      	ldrb	r1, [r7, #3]
     a1e:	88da      	ldrh	r2, [r3, #6]
     a20:	2300      	movs	r3, #0
     a22:	f362 030f 	bfi	r3, r2, #0, #16
     a26:	461a      	mov	r2, r3
     a28:	f001 f832 	bl	1a90 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     a2c:	4602      	mov	r2, r0
    function_map->pin[pin_reg_select] =
     a2e:	68fb      	ldr	r3, [r7, #12]
     a30:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  }
     a34:	bf00      	nop
     a36:	3714      	adds	r7, #20
     a38:	46bd      	mov	sp, r7
     a3a:	bd90      	pop	{r4, r7, pc}
     a3c:	10000138 	.word	0x10000138

00000a40 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
     a40:	b480      	push	{r7}
     a42:	b083      	sub	sp, #12
     a44:	af00      	add	r7, sp, #0
     a46:	4603      	mov	r3, r0
     a48:	71fb      	strb	r3, [r7, #7]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
     a4a:	79fb      	ldrb	r3, [r7, #7]
}
     a4c:	4618      	mov	r0, r3
     a4e:	370c      	adds	r7, #12
     a50:	46bd      	mov	sp, r7
     a52:	f85d 7b04 	ldr.w	r7, [sp], #4
     a56:	4770      	bx	lr

00000a58 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     a58:	b5b0      	push	{r4, r5, r7, lr}
     a5a:	b084      	sub	sp, #16
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
     a60:	460b      	mov	r3, r1
     a62:	70fb      	strb	r3, [r7, #3]
      0b10,  // kNone [0]
      0b11,  // kPullDown [1]
      0b00,  // kPullUp   [2]
      0b01,  // kRepeater [3]
    };
    uint32_t pin_reg_select = PinRegisterLookup();
     a64:	6878      	ldr	r0, [r7, #4]
     a66:	f000 f87a 	bl	b5e <sjsu::lpc17xx::Pin::PinRegisterLookup() const>
     a6a:	60f8      	str	r0, [r7, #12]
    resistor_map->pin[pin_reg_select] =
        bit::Insert(resistor_map->pin[pin_reg_select],
     a6c:	4b0f      	ldr	r3, [pc, #60]	; (aac <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	68fa      	ldr	r2, [r7, #12]
     a72:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    kResistorModes[Value(resistor)],
     a76:	78fb      	ldrb	r3, [r7, #3]
     a78:	4618      	mov	r0, r3
     a7a:	f7ff ffe1 	bl	a40 <auto sjsu::Value<sjsu::Pin::Resistor>(sjsu::Pin::Resistor)>
     a7e:	4603      	mov	r3, r0
     a80:	461a      	mov	r2, r3
     a82:	4b0b      	ldr	r3, [pc, #44]	; (ab0 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x58>)
     a84:	5c99      	ldrb	r1, [r3, r2]
    resistor_map->pin[pin_reg_select] =
     a86:	4b09      	ldr	r3, [pc, #36]	; (aac <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x54>)
     a88:	681c      	ldr	r4, [r3, #0]
        bit::Insert(resistor_map->pin[pin_reg_select],
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	88da      	ldrh	r2, [r3, #6]
     a8e:	2300      	movs	r3, #0
     a90:	f362 030f 	bfi	r3, r2, #0, #16
     a94:	461a      	mov	r2, r3
     a96:	4628      	mov	r0, r5
     a98:	f000 fffa 	bl	1a90 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     a9c:	4602      	mov	r2, r0
    resistor_map->pin[pin_reg_select] =
     a9e:	68fb      	ldr	r3, [r7, #12]
     aa0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    kPinMask);
  }
     aa4:	bf00      	nop
     aa6:	3710      	adds	r7, #16
     aa8:	46bd      	mov	sp, r7
     aaa:	bdb0      	pop	{r4, r5, r7, pc}
     aac:	1000013c 	.word	0x1000013c
     ab0:	00007b44 	.word	0x00007b44

00000ab4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const>:
  /// Implement SetAsAnalogMode as deprecated and unsupported
  [[deprecated("Unsupported operation")]]
  void SetAsAnalogMode(bool) const override {
     ab4:	b580      	push	{r7, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
     abc:	460b      	mov	r3, r1
     abe:	70fb      	strb	r3, [r7, #3]
    LOG_WARNING("Unsupported operation");
     ac0:	2357      	movs	r3, #87	; 0x57
     ac2:	4a04      	ldr	r2, [pc, #16]	; (ad4 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x20>)
     ac4:	4904      	ldr	r1, [pc, #16]	; (ad8 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x24>)
     ac6:	4805      	ldr	r0, [pc, #20]	; (adc <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const+0x28>)
     ac8:	f003 fbb0 	bl	422c <printf>
  }
     acc:	bf00      	nop
     ace:	3708      	adds	r7, #8
     ad0:	46bd      	mov	sp, r7
     ad2:	bd80      	pop	{r7, pc}
     ad4:	00007b50 	.word	0x00007b50
     ad8:	00007b48 	.word	0x00007b48
     adc:	00007b90 	.word	0x00007b90

00000ae0 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     ae0:	b5b0      	push	{r4, r5, r7, lr}
     ae2:	b084      	sub	sp, #16
     ae4:	af00      	add	r7, sp, #0
     ae6:	6078      	str	r0, [r7, #4]
     ae8:	460b      	mov	r3, r1
     aea:	70fb      	strb	r3, [r7, #3]
  {
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     aec:	4b0d      	ldr	r3, [pc, #52]	; (b24 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     aee:	681b      	ldr	r3, [r3, #0]
     af0:	687a      	ldr	r2, [r7, #4]
     af2:	7912      	ldrb	r2, [r2, #4]
     af4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
                                             set_as_open_drain,
                                             {
                                                 .position = pin_,
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	795b      	ldrb	r3, [r3, #5]
    open_drain_map->pin[port_] = bit::Insert(open_drain_map->pin[port_],
     afc:	733b      	strb	r3, [r7, #12]
     afe:	2301      	movs	r3, #1
     b00:	737b      	strb	r3, [r7, #13]
     b02:	4b08      	ldr	r3, [pc, #32]	; (b24 <sjsu::lpc17xx::Pin::SetAsOpenDrain(bool) const+0x44>)
     b04:	681c      	ldr	r4, [r3, #0]
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	791b      	ldrb	r3, [r3, #4]
     b0a:	461d      	mov	r5, r3
     b0c:	78fb      	ldrb	r3, [r7, #3]
     b0e:	68fa      	ldr	r2, [r7, #12]
     b10:	4619      	mov	r1, r3
     b12:	f001 f8f7 	bl	1d04 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>
     b16:	4603      	mov	r3, r0
     b18:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
                                                 .width    = 1,
                                             });
  }
     b1c:	bf00      	nop
     b1e:	3710      	adds	r7, #16
     b20:	46bd      	mov	sp, r7
     b22:	bdb0      	pop	{r4, r5, r7, pc}
     b24:	10000140 	.word	0x10000140

00000b28 <sjsu::lpc17xx::Pin::GetPinsBitmask(unsigned char)>:

 private:
  /// Utility function for generating bitmasks for specific pins.
  static constexpr bit::Mask GetPinsBitmask(uint8_t pin)
     b28:	b480      	push	{r7}
     b2a:	b085      	sub	sp, #20
     b2c:	af00      	add	r7, sp, #0
     b2e:	4603      	mov	r3, r0
     b30:	71fb      	strb	r3, [r7, #7]
  {
    return {
      .position = static_cast<uint8_t>((pin * 2) % kNumberOfPins),
     b32:	79fb      	ldrb	r3, [r7, #7]
     b34:	005b      	lsls	r3, r3, #1
     b36:	b2db      	uxtb	r3, r3
     b38:	f003 031e 	and.w	r3, r3, #30
     b3c:	b2db      	uxtb	r3, r3
      .width    = 2,
    };
     b3e:	733b      	strb	r3, [r7, #12]
     b40:	2302      	movs	r3, #2
     b42:	737b      	strb	r3, [r7, #13]
     b44:	2300      	movs	r3, #0
     b46:	7b3a      	ldrb	r2, [r7, #12]
     b48:	f362 0307 	bfi	r3, r2, #0, #8
     b4c:	7b7a      	ldrb	r2, [r7, #13]
     b4e:	f362 230f 	bfi	r3, r2, #8, #8
  }
     b52:	4618      	mov	r0, r3
     b54:	3714      	adds	r7, #20
     b56:	46bd      	mov	sp, r7
     b58:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5c:	4770      	bx	lr

00000b5e <sjsu::lpc17xx::Pin::PinRegisterLookup() const>:
  /// Performs the necessary math to figure out which register corresponds to
  /// this objects port.
  ///
  /// @returns index of register in PinTable_t map.
  uint32_t PinRegisterLookup() const
     b5e:	b480      	push	{r7}
     b60:	b085      	sub	sp, #20
     b62:	af00      	add	r7, sp, #0
     b64:	6078      	str	r0, [r7, #4]
  {
    uint32_t odd_register = (pin_ > 15) ? 1 : 0;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	795b      	ldrb	r3, [r3, #5]
     b6a:	2b0f      	cmp	r3, #15
     b6c:	d901      	bls.n	b72 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x14>
     b6e:	2301      	movs	r3, #1
     b70:	e000      	b.n	b74 <sjsu::lpc17xx::Pin::PinRegisterLookup() const+0x16>
     b72:	2300      	movs	r3, #0
     b74:	60fb      	str	r3, [r7, #12]
    return (port_ * 2) + odd_register;
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	791b      	ldrb	r3, [r3, #4]
     b7a:	005b      	lsls	r3, r3, #1
     b7c:	461a      	mov	r2, r3
     b7e:	68fb      	ldr	r3, [r7, #12]
     b80:	4413      	add	r3, r2
  }
     b82:	4618      	mov	r0, r3
     b84:	3714      	adds	r7, #20
     b86:	46bd      	mov	sp, r7
     b88:	f85d 7b04 	ldr.w	r7, [sp], #4
     b8c:	4770      	bx	lr
     b8e:	Address 0x0000000000000b8e is out of bounds.


00000b90 <sjsu::lpc40xx::Gpio::GpioRegister(int)>:
  /// @param port_index - which gpio port to get a pointer of.
  /// @return returns a pointer to a LPC_GPIO_TypeDef pointer internal to this
  /// function. The purpose for the double pointer nature is to allow test code
  /// to re-assign the lookup table contents simply by running this function and
  /// assigning the returned result to what ever block of memory you desire.
  static lpc40xx::LPC_GPIO_TypeDef ** GpioRegister(int port_index)
     b90:	b480      	push	{r7}
     b92:	b083      	sub	sp, #12
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[] = {
        lpc40xx::LPC_GPIO0, lpc40xx::LPC_GPIO1, lpc40xx::LPC_GPIO2,
        lpc40xx::LPC_GPIO3, lpc40xx::LPC_GPIO4, lpc40xx::LPC_GPIO5,
      };
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	f003 0301 	and.w	r3, r3, #1
     ba0:	2b00      	cmp	r3, #0
     ba2:	d114      	bne.n	bce <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x3e>
     ba4:	4a10      	ldr	r2, [pc, #64]	; (be8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x58>)
     ba6:	4b11      	ldr	r3, [pc, #68]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     ba8:	601a      	str	r2, [r3, #0]
     baa:	4a11      	ldr	r2, [pc, #68]	; (bf0 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x60>)
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bae:	605a      	str	r2, [r3, #4]
     bb0:	4a10      	ldr	r2, [pc, #64]	; (bf4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x64>)
     bb2:	4b0e      	ldr	r3, [pc, #56]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bb4:	609a      	str	r2, [r3, #8]
     bb6:	4a10      	ldr	r2, [pc, #64]	; (bf8 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x68>)
     bb8:	4b0c      	ldr	r3, [pc, #48]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bba:	60da      	str	r2, [r3, #12]
     bbc:	4a0f      	ldr	r2, [pc, #60]	; (bfc <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x6c>)
     bbe:	4b0b      	ldr	r3, [pc, #44]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bc0:	611a      	str	r2, [r3, #16]
     bc2:	4a0f      	ldr	r2, [pc, #60]	; (c00 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x70>)
     bc4:	4b09      	ldr	r3, [pc, #36]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bc6:	615a      	str	r2, [r3, #20]
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x54>)
     bca:	2201      	movs	r2, #1
     bcc:	601a      	str	r2, [r3, #0]
      return &port[port_index];
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	009b      	lsls	r3, r3, #2
     bd2:	4a06      	ldr	r2, [pc, #24]	; (bec <sjsu::lpc40xx::Gpio::GpioRegister(int)+0x5c>)
     bd4:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static lpc40xx::LPC_GPIO_TypeDef * port[6];
      return &port[port_index];
    }
  }
     bd6:	4618      	mov	r0, r3
     bd8:	370c      	adds	r7, #12
     bda:	46bd      	mov	sp, r7
     bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	1000055c 	.word	0x1000055c
     be8:	20098000 	.word	0x20098000
     bec:	10000544 	.word	0x10000544
     bf0:	20098020 	.word	0x20098020
     bf4:	20098040 	.word	0x20098040
     bf8:	20098060 	.word	0x20098060
     bfc:	20098080 	.word	0x20098080
     c00:	200980a0 	.word	0x200980a0

00000c04 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>:
  ///
  /// @param interrupt_index - which interrupt port you want to work with. Only
  ///        0 and 1 are valid.
  /// @return returns a pointer to a GpioInterruptRegisterMap_t object internal
  /// to this function.
  static GpioInterruptRegisterMap_t * InterruptRegister(int interrupt_index)
     c04:	b480      	push	{r7}
     c06:	b083      	sub	sp, #12
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
        },
      };
     c0c:	4b1a      	ldr	r3, [pc, #104]	; (c78 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	f003 0301 	and.w	r3, r3, #1
     c14:	2b00      	cmp	r3, #0
     c16:	d122      	bne.n	c5e <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x5a>
     c18:	4b18      	ldr	r3, [pc, #96]	; (c7c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO0IntStatR),
     c1a:	4a19      	ldr	r2, [pc, #100]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c1c:	3204      	adds	r2, #4
      };
     c1e:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO0IntStatF),
     c20:	4a17      	ldr	r2, [pc, #92]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c22:	3208      	adds	r2, #8
      };
     c24:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO0IntClr),
     c26:	4a16      	ldr	r2, [pc, #88]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c28:	320c      	adds	r2, #12
      };
     c2a:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO0IntEnR),
     c2c:	4a14      	ldr	r2, [pc, #80]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c2e:	3210      	adds	r2, #16
      };
     c30:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO0IntEnF),
     c32:	4a13      	ldr	r2, [pc, #76]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c34:	3214      	adds	r2, #20
      };
     c36:	611a      	str	r2, [r3, #16]
     c38:	3314      	adds	r3, #20
            .rising_status  = &(lpc40xx::LPC_GPIOINT->IO2IntStatR),
     c3a:	4a11      	ldr	r2, [pc, #68]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c3c:	3224      	adds	r2, #36	; 0x24
      };
     c3e:	601a      	str	r2, [r3, #0]
            .falling_status = &(lpc40xx::LPC_GPIOINT->IO2IntStatF),
     c40:	4a0f      	ldr	r2, [pc, #60]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c42:	3228      	adds	r2, #40	; 0x28
      };
     c44:	605a      	str	r2, [r3, #4]
            .clear          = &(lpc40xx::LPC_GPIOINT->IO2IntClr),
     c46:	4a0e      	ldr	r2, [pc, #56]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c48:	322c      	adds	r2, #44	; 0x2c
      };
     c4a:	609a      	str	r2, [r3, #8]
            .rising_enable  = &(lpc40xx::LPC_GPIOINT->IO2IntEnR),
     c4c:	4a0c      	ldr	r2, [pc, #48]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c4e:	3230      	adds	r2, #48	; 0x30
      };
     c50:	60da      	str	r2, [r3, #12]
            .falling_enable = &(lpc40xx::LPC_GPIOINT->IO2IntEnF),
     c52:	4a0b      	ldr	r2, [pc, #44]	; (c80 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x7c>)
     c54:	3234      	adds	r2, #52	; 0x34
      };
     c56:	611a      	str	r2, [r3, #16]
     c58:	4b07      	ldr	r3, [pc, #28]	; (c78 <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x74>)
     c5a:	2201      	movs	r2, #1
     c5c:	601a      	str	r2, [r3, #0]
      return &interrupt[interrupt_index];
     c5e:	687a      	ldr	r2, [r7, #4]
     c60:	4613      	mov	r3, r2
     c62:	009b      	lsls	r3, r3, #2
     c64:	4413      	add	r3, r2
     c66:	009b      	lsls	r3, r3, #2
     c68:	4a04      	ldr	r2, [pc, #16]	; (c7c <sjsu::lpc40xx::Gpio::InterruptRegister(int)+0x78>)
     c6a:	4413      	add	r3, r2
    else  // Used for unit testing
    {
      static GpioInterruptRegisterMap_t interrupt[kInterruptPorts];
      return &interrupt[interrupt_index];
    }
  }
     c6c:	4618      	mov	r0, r3
     c6e:	370c      	adds	r7, #12
     c70:	46bd      	mov	sp, r7
     c72:	f85d 7b04 	ldr.w	r7, [sp], #4
     c76:	4770      	bx	lr
     c78:	10000588 	.word	0x10000588
     c7c:	10000560 	.word	0x10000560
     c80:	40028080 	.word	0x40028080

00000c84 <sjsu::lpc40xx::Gpio::InterruptStatus()>:

  /// @return a pointer to the interrupt status register based on the current
  /// building platform.
  static volatile uint32_t * InterruptStatus()
     c84:	b480      	push	{r7}
     c86:	af00      	add	r7, sp, #0
  {
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      return &lpc40xx::LPC_GPIOINT->IntStatus;
     c88:	4b02      	ldr	r3, [pc, #8]	; (c94 <sjsu::lpc40xx::Gpio::InterruptStatus()+0x10>)
    else  // Used for unit testing
    {
      static volatile uint32_t status;
      return &status;
    }
  }
     c8a:	4618      	mov	r0, r3
     c8c:	46bd      	mov	sp, r7
     c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
     c92:	4770      	bx	lr
     c94:	40028080 	.word	0x40028080

00000c98 <sjsu::lpc40xx::Gpio::InterruptHandler()>:

  /// The gpio interrupt handler that calls the attached interrupt callbacks.
  static void InterruptHandler()
     c98:	b580      	push	{r7, lr}
     c9a:	b084      	sub	sp, #16
     c9c:	af00      	add	r7, sp, #0
  {
    int triggered_port;
    if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
    {
      triggered_port = *InterruptStatus() >> 2;
     c9e:	f7ff fff1 	bl	c84 <sjsu::lpc40xx::Gpio::InterruptStatus()>
     ca2:	4603      	mov	r3, r0
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	089b      	lsrs	r3, r3, #2
     ca8:	60fb      	str	r3, [r7, #12]
    else
    {
      triggered_port = *InterruptStatus() >> 2;
    }

    auto * interrupt  = InterruptRegister(triggered_port);
     caa:	68f8      	ldr	r0, [r7, #12]
     cac:	f7ff ffaa 	bl	c04 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
     cb0:	60b8      	str	r0, [r7, #8]
    int status        = *interrupt->rising_status | *interrupt->falling_status;
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	681a      	ldr	r2, [r3, #0]
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	685b      	ldr	r3, [r3, #4]
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	4313      	orrs	r3, r2
     cc0:	607b      	str	r3, [r7, #4]
    int triggered_pin = __builtin_ctz(status);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	fa93 f3a3 	rbit	r3, r3
     cc8:	fab3 f383 	clz	r3, r3
     ccc:	603b      	str	r3, [r7, #0]

    handlers[triggered_port][triggered_pin]();
     cce:	68fb      	ldr	r3, [r7, #12]
     cd0:	015a      	lsls	r2, r3, #5
     cd2:	683b      	ldr	r3, [r7, #0]
     cd4:	4413      	add	r3, r2
     cd6:	011b      	lsls	r3, r3, #4
     cd8:	4a0a      	ldr	r2, [pc, #40]	; (d04 <sjsu::lpc40xx::Gpio::InterruptHandler()+0x6c>)
     cda:	4413      	add	r3, r2
     cdc:	4618      	mov	r0, r3
     cde:	f001 f831 	bl	1d44 <std::function<void ()>::operator()() const>
    *interrupt->clear |= (1 << triggered_pin);
     ce2:	68bb      	ldr	r3, [r7, #8]
     ce4:	689b      	ldr	r3, [r3, #8]
     ce6:	681a      	ldr	r2, [r3, #0]
     ce8:	2101      	movs	r1, #1
     cea:	683b      	ldr	r3, [r7, #0]
     cec:	fa01 f303 	lsl.w	r3, r1, r3
     cf0:	4619      	mov	r1, r3
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	689b      	ldr	r3, [r3, #8]
     cf6:	430a      	orrs	r2, r1
     cf8:	601a      	str	r2, [r3, #0]
  }
     cfa:	bf00      	nop
     cfc:	3710      	adds	r7, #16
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	bf00      	nop
     d04:	10000144 	.word	0x10000144

00000d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>:
  /// For port 0-4, pins 0-31 are available. Port 5 only has pins 0-4 available.
  ///
  /// @param port_number - port number
  /// @param pin_number - pin number
  /// @param pin - pointer to an sjsu::Pin, keep as nullptr to ignore this a
  constexpr Gpio(uint8_t port_number,
     d08:	b580      	push	{r7, lr}
     d0a:	b084      	sub	sp, #16
     d0c:	af00      	add	r7, sp, #0
     d0e:	60f8      	str	r0, [r7, #12]
     d10:	607b      	str	r3, [r7, #4]
     d12:	460b      	mov	r3, r1
     d14:	72fb      	strb	r3, [r7, #11]
     d16:	4613      	mov	r3, r2
     d18:	72bb      	strb	r3, [r7, #10]
      : kLpc17xxPin(port_number, pin_number),
        kLpc40xxPin(port_number, pin_number),
        pin_obj_(nullptr),
        gpio_port_(nullptr),
        pin_(pin_number),
        interrupt_index_(0)
     d1a:	68fb      	ldr	r3, [r7, #12]
     d1c:	4618      	mov	r0, r3
     d1e:	f7ff fe31 	bl	984 <sjsu::Gpio::Gpio()>
     d22:	4a23      	ldr	r2, [pc, #140]	; (db0 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0xa8>)
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	601a      	str	r2, [r3, #0]
     d28:	68fb      	ldr	r3, [r7, #12]
     d2a:	3304      	adds	r3, #4
     d2c:	7aba      	ldrb	r2, [r7, #10]
     d2e:	7af9      	ldrb	r1, [r7, #11]
     d30:	4618      	mov	r0, r3
     d32:	f7ff fe37 	bl	9a4 <sjsu::lpc17xx::Pin::Pin(unsigned char, unsigned char)>
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	330c      	adds	r3, #12
     d3a:	7aba      	ldrb	r2, [r7, #10]
     d3c:	7af9      	ldrb	r1, [r7, #11]
     d3e:	4618      	mov	r0, r3
     d40:	f7ff fbb2 	bl	4a8 <sjsu::lpc40xx::Pin::Pin(unsigned char, unsigned char)>
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	2200      	movs	r2, #0
     d48:	615a      	str	r2, [r3, #20]
     d4a:	68fb      	ldr	r3, [r7, #12]
     d4c:	2200      	movs	r2, #0
     d4e:	619a      	str	r2, [r3, #24]
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	7aba      	ldrb	r2, [r7, #10]
     d54:	771a      	strb	r2, [r3, #28]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	2200      	movs	r2, #0
     d5a:	775a      	strb	r2, [r3, #29]
  {
    // Assign pin object pointer
    if (pin == nullptr)
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	2b00      	cmp	r3, #0
     d60:	d105      	bne.n	d6e <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x66>
    {
      if constexpr (IsPlatform(sjsu::build::Platform::lpc40xx))
      {
        pin_obj_ = &kLpc40xxPin;
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	f103 020c 	add.w	r2, r3, #12
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	615a      	str	r2, [r3, #20]
     d6c:	e002      	b.n	d74 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x6c>
        pin_obj_ = &sjsu::GetInactive<sjsu::Pin>();
      }
    }
    else
    {
      pin_obj_ = pin;
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	687a      	ldr	r2, [r7, #4]
     d72:	615a      	str	r2, [r3, #20]
    }

    // Assign interrupt_index_ pointer
    if (port_number == 2)
     d74:	7afb      	ldrb	r3, [r7, #11]
     d76:	2b02      	cmp	r3, #2
     d78:	d103      	bne.n	d82 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x7a>
    {
      interrupt_index_ = 1;
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	2201      	movs	r2, #1
     d7e:	775a      	strb	r2, [r3, #29]
     d80:	e009      	b.n	d96 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else if (port_number == 0)
     d82:	7afb      	ldrb	r3, [r7, #11]
     d84:	2b00      	cmp	r3, #0
     d86:	d103      	bne.n	d90 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x88>
    {
      interrupt_index_ = 0;
     d88:	68fb      	ldr	r3, [r7, #12]
     d8a:	2200      	movs	r2, #0
     d8c:	775a      	strb	r2, [r3, #29]
     d8e:	e002      	b.n	d96 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)+0x8e>
    }
    else
    {
      interrupt_index_ = kInterruptPorts;
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	2202      	movs	r2, #2
     d94:	775a      	strb	r2, [r3, #29]
    }

    // Assign gpio port
    gpio_port_ = *GpioRegister(port_number);
     d96:	7afb      	ldrb	r3, [r7, #11]
     d98:	4618      	mov	r0, r3
     d9a:	f7ff fef9 	bl	b90 <sjsu::lpc40xx::Gpio::GpioRegister(int)>
     d9e:	4603      	mov	r3, r0
     da0:	681a      	ldr	r2, [r3, #0]
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	619a      	str	r2, [r3, #24]
  }
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	4618      	mov	r0, r3
     daa:	3710      	adds	r7, #16
     dac:	46bd      	mov	sp, r7
     dae:	bd80      	pop	{r7, pc}
     db0:	00008318 	.word	0x00008318

00000db4 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  void SetDirection(Direction direction) const override
     db4:	b590      	push	{r4, r7, lr}
     db6:	b085      	sub	sp, #20
     db8:	af00      	add	r7, sp, #0
     dba:	6078      	str	r0, [r7, #4]
     dbc:	460b      	mov	r3, r1
     dbe:	70fb      	strb	r3, [r7, #3]
  {
    /// Pin function is zero fall pins on the LPC40xx and LPC17xx.
    constexpr uint8_t kGpioFunction = 0;
     dc0:	2300      	movs	r3, #0
     dc2:	73fb      	strb	r3, [r7, #15]
    pin_obj_->SetPinFunction(kGpioFunction);
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	695b      	ldr	r3, [r3, #20]
     dc8:	681b      	ldr	r3, [r3, #0]
     dca:	3304      	adds	r3, #4
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	687a      	ldr	r2, [r7, #4]
     dd0:	6952      	ldr	r2, [r2, #20]
     dd2:	2100      	movs	r1, #0
     dd4:	4610      	mov	r0, r2
     dd6:	4798      	blx	r3

    if (direction == Direction::kInput)
     dd8:	78fb      	ldrb	r3, [r7, #3]
     dda:	2b00      	cmp	r3, #0
     ddc:	d10d      	bne.n	dfa <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x46>
    {
      gpio_port_->DIR = bit::Clear(gpio_port_->DIR, pin_);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	699b      	ldr	r3, [r3, #24]
     de2:	681a      	ldr	r2, [r3, #0]
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	7f1b      	ldrb	r3, [r3, #28]
     de8:	4619      	mov	r1, r3
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	699c      	ldr	r4, [r3, #24]
     dee:	4610      	mov	r0, r2
     df0:	f000 ffbe 	bl	1d70 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     df4:	4603      	mov	r3, r0
     df6:	6023      	str	r3, [r4, #0]
    }
    else
    {
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
    }
  }
     df8:	e00c      	b.n	e14 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x60>
      gpio_port_->DIR = bit::Set(gpio_port_->DIR, pin_);
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	699b      	ldr	r3, [r3, #24]
     dfe:	681a      	ldr	r2, [r3, #0]
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	7f1b      	ldrb	r3, [r3, #28]
     e04:	4619      	mov	r1, r3
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	699c      	ldr	r4, [r3, #24]
     e0a:	4610      	mov	r0, r2
     e0c:	f000 ffc3 	bl	1d96 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     e10:	4603      	mov	r3, r0
     e12:	6023      	str	r3, [r4, #0]
  }
     e14:	bf00      	nop
     e16:	3714      	adds	r7, #20
     e18:	46bd      	mov	sp, r7
     e1a:	bd90      	pop	{r4, r7, pc}

00000e1c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  void Set(State output = kHigh) const override
     e1c:	b480      	push	{r7}
     e1e:	b083      	sub	sp, #12
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
     e24:	460b      	mov	r3, r1
     e26:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     e28:	78fb      	ldrb	r3, [r7, #3]
     e2a:	2b01      	cmp	r3, #1
     e2c:	d109      	bne.n	e42 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x26>
    {
      gpio_port_->SET = (1 << pin_);
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	7f1b      	ldrb	r3, [r3, #28]
     e32:	461a      	mov	r2, r3
     e34:	2301      	movs	r3, #1
     e36:	fa03 f202 	lsl.w	r2, r3, r2
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	699b      	ldr	r3, [r3, #24]
     e3e:	619a      	str	r2, [r3, #24]
    }
    else
    {
      gpio_port_->CLR = (1 << pin_);
    }
  }
     e40:	e008      	b.n	e54 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x38>
      gpio_port_->CLR = (1 << pin_);
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	7f1b      	ldrb	r3, [r3, #28]
     e46:	461a      	mov	r2, r3
     e48:	2301      	movs	r3, #1
     e4a:	fa03 f202 	lsl.w	r2, r3, r2
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	699b      	ldr	r3, [r3, #24]
     e52:	61da      	str	r2, [r3, #28]
  }
     e54:	bf00      	nop
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <sjsu::lpc40xx::Gpio::Toggle() const>:
  void Toggle() const override
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
  {
    gpio_port_->PIN ^= (1 << pin_);
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	699b      	ldr	r3, [r3, #24]
     e6c:	695a      	ldr	r2, [r3, #20]
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	7f1b      	ldrb	r3, [r3, #28]
     e72:	4619      	mov	r1, r3
     e74:	2301      	movs	r3, #1
     e76:	408b      	lsls	r3, r1
     e78:	4619      	mov	r1, r3
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	699b      	ldr	r3, [r3, #24]
     e7e:	404a      	eors	r2, r1
     e80:	615a      	str	r2, [r3, #20]
  }
     e82:	bf00      	nop
     e84:	370c      	adds	r7, #12
     e86:	46bd      	mov	sp, r7
     e88:	f85d 7b04 	ldr.w	r7, [sp], #4
     e8c:	4770      	bx	lr

00000e8e <sjsu::lpc40xx::Gpio::Read() const>:
  bool Read() const override
     e8e:	b580      	push	{r7, lr}
     e90:	b082      	sub	sp, #8
     e92:	af00      	add	r7, sp, #0
     e94:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port_->PIN, pin_);
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	699b      	ldr	r3, [r3, #24]
     e9a:	695a      	ldr	r2, [r3, #20]
     e9c:	687b      	ldr	r3, [r7, #4]
     e9e:	7f1b      	ldrb	r3, [r3, #28]
     ea0:	4619      	mov	r1, r3
     ea2:	4610      	mov	r0, r2
     ea4:	f000 ff89 	bl	1dba <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     ea8:	4603      	mov	r3, r0
  }
     eaa:	4618      	mov	r0, r3
     eac:	3708      	adds	r7, #8
     eae:	46bd      	mov	sp, r7
     eb0:	bd80      	pop	{r7, pc}

00000eb2 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     eb2:	b480      	push	{r7}
     eb4:	b083      	sub	sp, #12
     eb6:	af00      	add	r7, sp, #0
     eb8:	6078      	str	r0, [r7, #4]
  {
    return *pin_obj_;
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	695b      	ldr	r3, [r3, #20]
  }
     ebe:	4618      	mov	r0, r3
     ec0:	370c      	adds	r7, #12
     ec2:	46bd      	mov	sp, r7
     ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec8:	4770      	bx	lr

00000eca <std::function<void ()>::~function()>:
     eca:	b580      	push	{r7, lr}
     ecc:	b082      	sub	sp, #8
     ece:	af00      	add	r7, sp, #0
     ed0:	6078      	str	r0, [r7, #4]
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	4618      	mov	r0, r3
     ed6:	f7ff fa85 	bl	3e4 <std::_Function_base::~_Function_base()>
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	4618      	mov	r0, r3
     ede:	3708      	adds	r7, #8
     ee0:	46bd      	mov	sp, r7
     ee2:	bd80      	pop	{r7, pc}

00000ee4 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
     ee4:	b580      	push	{r7, lr}
     ee6:	b082      	sub	sp, #8
     ee8:	af00      	add	r7, sp, #0
     eea:	6078      	str	r0, [r7, #4]
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	3304      	adds	r3, #4
     ef0:	4618      	mov	r0, r3
     ef2:	f7ff ffea 	bl	eca <std::function<void ()>::~function()>
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	4618      	mov	r0, r3
     efa:	3708      	adds	r7, #8
     efc:	46bd      	mov	sp, r7
     efe:	bd80      	pop	{r7, pc}

00000f00 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>:

  /// Assign the developer's ISR and sets the selected edge that the gpio
  /// interrupt will be triggered on.
  void AttachInterrupt(InterruptCallback callback, Edge edge) override
     f00:	b5b0      	push	{r4, r5, r7, lr}
     f02:	b08c      	sub	sp, #48	; 0x30
     f04:	af00      	add	r7, sp, #0
     f06:	60f8      	str	r0, [r7, #12]
     f08:	60b9      	str	r1, [r7, #8]
     f0a:	4613      	mov	r3, r2
     f0c:	71fb      	strb	r3, [r7, #7]
  {
    if (!IsAValidPort())
     f0e:	68f8      	ldr	r0, [r7, #12]
     f10:	f000 f8a6 	bl	1060 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     f14:	4603      	mov	r3, r0
     f16:	f083 0301 	eor.w	r3, r3, #1
     f1a:	b2db      	uxtb	r3, r3
     f1c:	2b00      	cmp	r3, #0
     f1e:	d155      	bne.n	fcc <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xcc>
          .interrupt_handler        = InterruptHandler,
      });
    }
    else  // For LPC40xx and host tests
    {
      sjsu::InterruptController::GetPlatformController().Enable({
     f20:	f7ff fa84 	bl	42c <sjsu::InterruptController::GetPlatformController()>
     f24:	4604      	mov	r4, r0
          .interrupt_request_number = lpc40xx::GPIO_IRQn,
          .interrupt_handler        = InterruptHandler,
      });
     f26:	6823      	ldr	r3, [r4, #0]
     f28:	3304      	adds	r3, #4
     f2a:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
     f2c:	2326      	movs	r3, #38	; 0x26
     f2e:	617b      	str	r3, [r7, #20]
     f30:	f107 0314 	add.w	r3, r7, #20
     f34:	3304      	adds	r3, #4
     f36:	4927      	ldr	r1, [pc, #156]	; (fd4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd4>)
     f38:	4618      	mov	r0, r3
     f3a:	f000 ff55 	bl	1de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
     f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f42:	62bb      	str	r3, [r7, #40]	; 0x28
     f44:	f107 0314 	add.w	r3, r7, #20
     f48:	4619      	mov	r1, r3
     f4a:	4620      	mov	r0, r4
     f4c:	47a8      	blx	r5
      });
     f4e:	f107 0314 	add.w	r3, r7, #20
     f52:	4618      	mov	r0, r3
     f54:	f7ff ffc6 	bl	ee4 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
    }

    handlers[interrupt_index_][pin_] = callback;
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	7f5b      	ldrb	r3, [r3, #29]
     f5c:	4619      	mov	r1, r3
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	7f1b      	ldrb	r3, [r3, #28]
     f62:	461a      	mov	r2, r3
     f64:	014b      	lsls	r3, r1, #5
     f66:	4413      	add	r3, r2
     f68:	011b      	lsls	r3, r3, #4
     f6a:	4a1b      	ldr	r2, [pc, #108]	; (fd8 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xd8>)
     f6c:	4413      	add	r3, r2
     f6e:	68b9      	ldr	r1, [r7, #8]
     f70:	4618      	mov	r0, r3
     f72:	f000 ff63 	bl	1e3c <std::function<void ()>::operator=(std::function<void ()> const&)>

    auto * interrupt = LocalInterruptRegister();
     f76:	68f8      	ldr	r0, [r7, #12]
     f78:	f000 f896 	bl	10a8 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
     f7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeRising)
     f7e:	79fb      	ldrb	r3, [r7, #7]
     f80:	2b02      	cmp	r3, #2
     f82:	d002      	beq.n	f8a <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0x8a>
     f84:	79fb      	ldrb	r3, [r7, #7]
     f86:	2b00      	cmp	r3, #0
     f88:	d10c      	bne.n	fa4 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xa4>
    {
      *interrupt->rising_enable = bit::Set(*interrupt->rising_enable, pin_);
     f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f8c:	68db      	ldr	r3, [r3, #12]
     f8e:	681a      	ldr	r2, [r3, #0]
     f90:	68fb      	ldr	r3, [r7, #12]
     f92:	7f1b      	ldrb	r3, [r3, #28]
     f94:	4619      	mov	r1, r3
     f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f98:	68dc      	ldr	r4, [r3, #12]
     f9a:	4610      	mov	r0, r2
     f9c:	f000 fefb 	bl	1d96 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     fa0:	4603      	mov	r3, r0
     fa2:	6023      	str	r3, [r4, #0]
    }
    if (edge == Edge::kEdgeBoth || edge == Edge::kEdgeFalling)
     fa4:	79fb      	ldrb	r3, [r7, #7]
     fa6:	2b02      	cmp	r3, #2
     fa8:	d002      	beq.n	fb0 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xb0>
     faa:	79fb      	ldrb	r3, [r7, #7]
     fac:	2b01      	cmp	r3, #1
     fae:	d10e      	bne.n	fce <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
    {
      *interrupt->falling_enable = bit::Set(*interrupt->falling_enable, pin_);
     fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fb2:	691b      	ldr	r3, [r3, #16]
     fb4:	681a      	ldr	r2, [r3, #0]
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	7f1b      	ldrb	r3, [r3, #28]
     fba:	4619      	mov	r1, r3
     fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fbe:	691c      	ldr	r4, [r3, #16]
     fc0:	4610      	mov	r0, r2
     fc2:	f000 fee8 	bl	1d96 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     fc6:	4603      	mov	r3, r0
     fc8:	6023      	str	r3, [r4, #0]
     fca:	e000      	b.n	fce <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)+0xce>
      return;
     fcc:	bf00      	nop
    }
  }
     fce:	3730      	adds	r7, #48	; 0x30
     fd0:	46bd      	mov	sp, r7
     fd2:	bdb0      	pop	{r4, r5, r7, pc}
     fd4:	00000c99 	.word	0x00000c99
     fd8:	10000144 	.word	0x10000144

00000fdc <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  /// Removes the developer's ISR and clears the selected edge of the gpio
  /// interrupt from being triggered.
  void DetachInterrupt() const override
     fdc:	b590      	push	{r4, r7, lr}
     fde:	b085      	sub	sp, #20
     fe0:	af00      	add	r7, sp, #0
     fe2:	6078      	str	r0, [r7, #4]
  {
    if (!IsAValidPort())
     fe4:	6878      	ldr	r0, [r7, #4]
     fe6:	f000 f83b 	bl	1060 <sjsu::lpc40xx::Gpio::IsAValidPort() const>
     fea:	4603      	mov	r3, r0
     fec:	f083 0301 	eor.w	r3, r3, #1
     ff0:	b2db      	uxtb	r3, r3
     ff2:	2b00      	cmp	r3, #0
     ff4:	d12d      	bne.n	1052 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x76>
    {
      return;
    }

    handlers[interrupt_index_][pin_] = nullptr;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	7f5b      	ldrb	r3, [r3, #29]
     ffa:	4619      	mov	r1, r3
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	7f1b      	ldrb	r3, [r3, #28]
    1000:	461a      	mov	r2, r3
    1002:	014b      	lsls	r3, r1, #5
    1004:	4413      	add	r3, r2
    1006:	011b      	lsls	r3, r3, #4
    1008:	4a14      	ldr	r2, [pc, #80]	; (105c <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x80>)
    100a:	4413      	add	r3, r2
    100c:	2100      	movs	r1, #0
    100e:	4618      	mov	r0, r3
    1010:	f000 ff2f 	bl	1e72 <std::function<void ()>::operator=(decltype(nullptr))>

    auto * interrupt           = LocalInterruptRegister();
    1014:	6878      	ldr	r0, [r7, #4]
    1016:	f000 f847 	bl	10a8 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>
    101a:	60f8      	str	r0, [r7, #12]
    *interrupt->rising_enable  = bit::Clear(*interrupt->rising_enable, pin_);
    101c:	68fb      	ldr	r3, [r7, #12]
    101e:	68db      	ldr	r3, [r3, #12]
    1020:	681a      	ldr	r2, [r3, #0]
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	7f1b      	ldrb	r3, [r3, #28]
    1026:	4619      	mov	r1, r3
    1028:	68fb      	ldr	r3, [r7, #12]
    102a:	68dc      	ldr	r4, [r3, #12]
    102c:	4610      	mov	r0, r2
    102e:	f000 fe9f 	bl	1d70 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    1032:	4603      	mov	r3, r0
    1034:	6023      	str	r3, [r4, #0]
    *interrupt->falling_enable = bit::Clear(*interrupt->falling_enable, pin_);
    1036:	68fb      	ldr	r3, [r7, #12]
    1038:	691b      	ldr	r3, [r3, #16]
    103a:	681a      	ldr	r2, [r3, #0]
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	7f1b      	ldrb	r3, [r3, #28]
    1040:	4619      	mov	r1, r3
    1042:	68fb      	ldr	r3, [r7, #12]
    1044:	691c      	ldr	r4, [r3, #16]
    1046:	4610      	mov	r0, r2
    1048:	f000 fe92 	bl	1d70 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    104c:	4603      	mov	r3, r0
    104e:	6023      	str	r3, [r4, #0]
    1050:	e000      	b.n	1054 <sjsu::lpc40xx::Gpio::DetachInterrupt() const+0x78>
      return;
    1052:	bf00      	nop
  }
    1054:	3714      	adds	r7, #20
    1056:	46bd      	mov	sp, r7
    1058:	bd90      	pop	{r4, r7, pc}
    105a:	bf00      	nop
    105c:	10000144 	.word	0x10000144

00001060 <sjsu::lpc40xx::Gpio::IsAValidPort() const>:

 private:
  /// Checks if the selected gpio port is valid for external interrupts.
  bool IsAValidPort() const
    1060:	b580      	push	{r7, lr}
    1062:	b084      	sub	sp, #16
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = !(interrupt_index_ == kInterruptPorts);
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	7f5b      	ldrb	r3, [r3, #29]
    106c:	2b02      	cmp	r3, #2
    106e:	bf14      	ite	ne
    1070:	2301      	movne	r3, #1
    1072:	2300      	moveq	r3, #0
    1074:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(
    1076:	7bfb      	ldrb	r3, [r7, #15]
    1078:	f083 0301 	eor.w	r3, r3, #1
    107c:	b2db      	uxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	d006      	beq.n	1090 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x30>
    1082:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    1086:	4a05      	ldr	r2, [pc, #20]	; (109c <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x3c>)
    1088:	4905      	ldr	r1, [pc, #20]	; (10a0 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x40>)
    108a:	4806      	ldr	r0, [pc, #24]	; (10a4 <sjsu::lpc40xx::Gpio::IsAValidPort() const+0x44>)
    108c:	f003 f8ce 	bl	422c <printf>
        is_valid,
        "This gpio port cannot be used for External Interrupts. Need "
        "to use GPIOs on Port 0 or 2.");
    return is_valid;
    1090:	7bfb      	ldrb	r3, [r7, #15]
  }
    1092:	4618      	mov	r0, r3
    1094:	3710      	adds	r7, #16
    1096:	46bd      	mov	sp, r7
    1098:	bd80      	pop	{r7, pc}
    109a:	bf00      	nop
    109c:	00007be0 	.word	0x00007be0
    10a0:	0000822c 	.word	0x0000822c
    10a4:	00007c10 	.word	0x00007c10

000010a8 <sjsu::lpc40xx::Gpio::LocalInterruptRegister() const>:

  GpioInterruptRegisterMap_t * LocalInterruptRegister() const
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	6078      	str	r0, [r7, #4]
  {
    return InterruptRegister(interrupt_index_);
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	7f5b      	ldrb	r3, [r3, #29]
    10b4:	4618      	mov	r0, r3
    10b6:	f7ff fda5 	bl	c04 <sjsu::lpc40xx::Gpio::InterruptRegister(int)>
    10ba:	4603      	mov	r3, r0
  }
    10bc:	4618      	mov	r0, r3
    10be:	3708      	adds	r7, #8
    10c0:	46bd      	mov	sp, r7
    10c2:	bd80      	pop	{r7, pc}

000010c4 <Bus::Initialize()>:
#include "utility//time.hpp"

class Bus
{
 public:
  void Initialize()
    10c4:	b580      	push	{r7, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
  {
    // Setting each pin as Open Drain
    ad[0].GetPin().SetAsOpenDrain();
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	4618      	mov	r0, r3
    10d0:	f7ff feef 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    10d4:	4603      	mov	r3, r0
    10d6:	681a      	ldr	r2, [r3, #0]
    10d8:	320c      	adds	r2, #12
    10da:	6812      	ldr	r2, [r2, #0]
    10dc:	2101      	movs	r1, #1
    10de:	4618      	mov	r0, r3
    10e0:	4790      	blx	r2
    ad[1].GetPin().SetAsOpenDrain();
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	3320      	adds	r3, #32
    10e6:	4618      	mov	r0, r3
    10e8:	f7ff fee3 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    10ec:	4603      	mov	r3, r0
    10ee:	681a      	ldr	r2, [r3, #0]
    10f0:	320c      	adds	r2, #12
    10f2:	6812      	ldr	r2, [r2, #0]
    10f4:	2101      	movs	r1, #1
    10f6:	4618      	mov	r0, r3
    10f8:	4790      	blx	r2
    ad[2].GetPin().SetAsOpenDrain();
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	3340      	adds	r3, #64	; 0x40
    10fe:	4618      	mov	r0, r3
    1100:	f7ff fed7 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    1104:	4603      	mov	r3, r0
    1106:	681a      	ldr	r2, [r3, #0]
    1108:	320c      	adds	r2, #12
    110a:	6812      	ldr	r2, [r2, #0]
    110c:	2101      	movs	r1, #1
    110e:	4618      	mov	r0, r3
    1110:	4790      	blx	r2
    ad[3].GetPin().SetAsOpenDrain();
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	3360      	adds	r3, #96	; 0x60
    1116:	4618      	mov	r0, r3
    1118:	f7ff fecb 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    111c:	4603      	mov	r3, r0
    111e:	681a      	ldr	r2, [r3, #0]
    1120:	320c      	adds	r2, #12
    1122:	6812      	ldr	r2, [r2, #0]
    1124:	2101      	movs	r1, #1
    1126:	4618      	mov	r0, r3
    1128:	4790      	blx	r2
    ad[4].GetPin().SetAsOpenDrain();
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	3380      	adds	r3, #128	; 0x80
    112e:	4618      	mov	r0, r3
    1130:	f7ff febf 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    1134:	4603      	mov	r3, r0
    1136:	681a      	ldr	r2, [r3, #0]
    1138:	320c      	adds	r2, #12
    113a:	6812      	ldr	r2, [r2, #0]
    113c:	2101      	movs	r1, #1
    113e:	4618      	mov	r0, r3
    1140:	4790      	blx	r2
    ad[5].GetPin().SetAsOpenDrain();
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	33a0      	adds	r3, #160	; 0xa0
    1146:	4618      	mov	r0, r3
    1148:	f7ff feb3 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    114c:	4603      	mov	r3, r0
    114e:	681a      	ldr	r2, [r3, #0]
    1150:	320c      	adds	r2, #12
    1152:	6812      	ldr	r2, [r2, #0]
    1154:	2101      	movs	r1, #1
    1156:	4618      	mov	r0, r3
    1158:	4790      	blx	r2
    ad[6].GetPin().SetAsOpenDrain();
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	33c0      	adds	r3, #192	; 0xc0
    115e:	4618      	mov	r0, r3
    1160:	f7ff fea7 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    1164:	4603      	mov	r3, r0
    1166:	681a      	ldr	r2, [r3, #0]
    1168:	320c      	adds	r2, #12
    116a:	6812      	ldr	r2, [r2, #0]
    116c:	2101      	movs	r1, #1
    116e:	4618      	mov	r0, r3
    1170:	4790      	blx	r2
    ad[7].GetPin().SetAsOpenDrain();
    1172:	687b      	ldr	r3, [r7, #4]
    1174:	33e0      	adds	r3, #224	; 0xe0
    1176:	4618      	mov	r0, r3
    1178:	f7ff fe9b 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    117c:	4603      	mov	r3, r0
    117e:	681a      	ldr	r2, [r3, #0]
    1180:	320c      	adds	r2, #12
    1182:	6812      	ldr	r2, [r2, #0]
    1184:	2101      	movs	r1, #1
    1186:	4618      	mov	r0, r3
    1188:	4790      	blx	r2
    write_enable.SetAsOutput();
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1190:	4618      	mov	r0, r3
    1192:	f7ff fa81 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ale.SetAsOutput();
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	f503 7390 	add.w	r3, r3, #288	; 0x120
    119c:	4618      	mov	r0, r3
    119e:	f7ff fa7b 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    m_io.SetAsOutput();
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    11a8:	4618      	mov	r0, r3
    11aa:	f7ff fa75 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    write.SetAsOutput();
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    11b4:	4618      	mov	r0, r3
    11b6:	f7ff fa6f 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    read.SetAsOutput();
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    11c0:	4618      	mov	r0, r3
    11c2:	f7ff fa69 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    interrupt.SetAsInput();
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    11cc:	4618      	mov	r0, r3
    11ce:	f7ff fa55 	bl	67c <sjsu::Gpio::SetAsInput() const>

    ad[0].SetAsOutput();
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	4618      	mov	r0, r3
    11d6:	f7ff fa5f 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[1].SetAsOutput();
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	3320      	adds	r3, #32
    11de:	4618      	mov	r0, r3
    11e0:	f7ff fa5a 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[2].SetAsOutput();
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	3340      	adds	r3, #64	; 0x40
    11e8:	4618      	mov	r0, r3
    11ea:	f7ff fa55 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[3].SetAsOutput();
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	3360      	adds	r3, #96	; 0x60
    11f2:	4618      	mov	r0, r3
    11f4:	f7ff fa50 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[4].SetAsOutput();
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	3380      	adds	r3, #128	; 0x80
    11fc:	4618      	mov	r0, r3
    11fe:	f7ff fa4b 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[5].SetAsOutput();
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	33a0      	adds	r3, #160	; 0xa0
    1206:	4618      	mov	r0, r3
    1208:	f7ff fa46 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[6].SetAsOutput();
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	33c0      	adds	r3, #192	; 0xc0
    1210:	4618      	mov	r0, r3
    1212:	f7ff fa41 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    ad[7].SetAsOutput();
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	33e0      	adds	r3, #224	; 0xe0
    121a:	4618      	mov	r0, r3
    121c:	f7ff fa3c 	bl	698 <sjsu::Gpio::SetAsOutput() const>

	//Memory Initialization
    write_enable.SetHigh();
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1226:	4618      	mov	r0, r3
    1228:	f7ff fa0a 	bl	640 <sjsu::Gpio::SetHigh() const>
    ale.SetLow();
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1232:	4618      	mov	r0, r3
    1234:	f7ff fa13 	bl	65e <sjsu::Gpio::SetLow() const>
    write.SetHigh();
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    123e:	4618      	mov	r0, r3
    1240:	f7ff f9fe 	bl	640 <sjsu::Gpio::SetHigh() const>
    read.SetLow();
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    124a:	4618      	mov	r0, r3
    124c:	f7ff fa07 	bl	65e <sjsu::Gpio::SetLow() const>
    m_io.SetHigh();
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    1256:	4618      	mov	r0, r3
    1258:	f7ff f9f2 	bl	640 <sjsu::Gpio::SetHigh() const>

	//IO Initialization

  }
    125c:	bf00      	nop
    125e:	3708      	adds	r7, #8
    1260:	46bd      	mov	sp, r7
    1262:	bd80      	pop	{r7, pc}

00001264 <Bus::IOWrite(unsigned char, unsigned char)>:
	}
    //sjsu::Delay(1s);

	return temp;
  }
  void IOWrite(uint8_t address, uint8_t data)
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	6078      	str	r0, [r7, #4]
    126c:	460b      	mov	r3, r1
    126e:	70fb      	strb	r3, [r7, #3]
    1270:	4613      	mov	r3, r2
    1272:	70bb      	strb	r3, [r7, #2]
  {
	ale.SetHigh();
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	f503 7390 	add.w	r3, r3, #288	; 0x120
    127a:	4618      	mov	r0, r3
    127c:	f7ff f9e0 	bl	640 <sjsu::Gpio::SetHigh() const>
    write_enable.SetHigh();
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1286:	4618      	mov	r0, r3
    1288:	f7ff f9da 	bl	640 <sjsu::Gpio::SetHigh() const>
    read.SetHigh();
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    1292:	4618      	mov	r0, r3
    1294:	f7ff f9d4 	bl	640 <sjsu::Gpio::SetHigh() const>
    write.SetHigh();
    1298:	687b      	ldr	r3, [r7, #4]
    129a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    129e:	4618      	mov	r0, r3
    12a0:	f7ff f9ce 	bl	640 <sjsu::Gpio::SetHigh() const>
    m_io.SetLow();
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    12aa:	4618      	mov	r0, r3
    12ac:	f7ff f9d7 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);

	for (int i = 0; i < 8; i++)
    12b0:	2300      	movs	r3, #0
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	2b07      	cmp	r3, #7
    12b8:	dc21      	bgt.n	12fe <Bus::IOWrite(unsigned char, unsigned char)+0x9a>
    {
      ad[i].SetAsOutput();
    12ba:	68fb      	ldr	r3, [r7, #12]
    12bc:	015b      	lsls	r3, r3, #5
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	4413      	add	r3, r2
    12c2:	4618      	mov	r0, r3
    12c4:	f7ff f9e8 	bl	698 <sjsu::Gpio::SetAsOutput() const>
      if (address & (1 << i))
    12c8:	78fa      	ldrb	r2, [r7, #3]
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	fa42 f303 	asr.w	r3, r2, r3
    12d0:	f003 0301 	and.w	r3, r3, #1
    12d4:	2b00      	cmp	r3, #0
    12d6:	d007      	beq.n	12e8 <Bus::IOWrite(unsigned char, unsigned char)+0x84>
      {
        ad[i].SetHigh();
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	015b      	lsls	r3, r3, #5
    12dc:	687a      	ldr	r2, [r7, #4]
    12de:	4413      	add	r3, r2
    12e0:	4618      	mov	r0, r3
    12e2:	f7ff f9ad 	bl	640 <sjsu::Gpio::SetHigh() const>
    12e6:	e006      	b.n	12f6 <Bus::IOWrite(unsigned char, unsigned char)+0x92>
      }
      else
      {
        ad[i].SetLow();
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	015b      	lsls	r3, r3, #5
    12ec:	687a      	ldr	r2, [r7, #4]
    12ee:	4413      	add	r3, r2
    12f0:	4618      	mov	r0, r3
    12f2:	f7ff f9b4 	bl	65e <sjsu::Gpio::SetLow() const>
	for (int i = 0; i < 8; i++)
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	3301      	adds	r3, #1
    12fa:	60fb      	str	r3, [r7, #12]
    12fc:	e7da      	b.n	12b4 <Bus::IOWrite(unsigned char, unsigned char)+0x50>
      }
    }

    //sjsu::Delay(1ms);
    ale.SetLow();
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1304:	4618      	mov	r0, r3
    1306:	f7ff f9aa 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);

	for (int i = 0; i < 8; i++)
    130a:	2300      	movs	r3, #0
    130c:	60bb      	str	r3, [r7, #8]
    130e:	68bb      	ldr	r3, [r7, #8]
    1310:	2b07      	cmp	r3, #7
    1312:	dc1a      	bgt.n	134a <Bus::IOWrite(unsigned char, unsigned char)+0xe6>
    {
      if (data & (1 << i))
    1314:	78ba      	ldrb	r2, [r7, #2]
    1316:	68bb      	ldr	r3, [r7, #8]
    1318:	fa42 f303 	asr.w	r3, r2, r3
    131c:	f003 0301 	and.w	r3, r3, #1
    1320:	2b00      	cmp	r3, #0
    1322:	d007      	beq.n	1334 <Bus::IOWrite(unsigned char, unsigned char)+0xd0>
      {
        ad[i].SetHigh();
    1324:	68bb      	ldr	r3, [r7, #8]
    1326:	015b      	lsls	r3, r3, #5
    1328:	687a      	ldr	r2, [r7, #4]
    132a:	4413      	add	r3, r2
    132c:	4618      	mov	r0, r3
    132e:	f7ff f987 	bl	640 <sjsu::Gpio::SetHigh() const>
    1332:	e006      	b.n	1342 <Bus::IOWrite(unsigned char, unsigned char)+0xde>
      }
      else
      {
        ad[i].SetLow();
    1334:	68bb      	ldr	r3, [r7, #8]
    1336:	015b      	lsls	r3, r3, #5
    1338:	687a      	ldr	r2, [r7, #4]
    133a:	4413      	add	r3, r2
    133c:	4618      	mov	r0, r3
    133e:	f7ff f98e 	bl	65e <sjsu::Gpio::SetLow() const>
	for (int i = 0; i < 8; i++)
    1342:	68bb      	ldr	r3, [r7, #8]
    1344:	3301      	adds	r3, #1
    1346:	60bb      	str	r3, [r7, #8]
    1348:	e7e1      	b.n	130e <Bus::IOWrite(unsigned char, unsigned char)+0xaa>
      }
    }

	write.SetLow();
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    1350:	4618      	mov	r0, r3
    1352:	f7ff f984 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);
    write.SetHigh();
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    135c:	4618      	mov	r0, r3
    135e:	f7ff f96f 	bl	640 <sjsu::Gpio::SetHigh() const>
    //sjsu::Delay(1ms);




  }
    1362:	bf00      	nop
    1364:	3710      	adds	r7, #16
    1366:	46bd      	mov	sp, r7
    1368:	bd80      	pop	{r7, pc}

0000136a <Bus::IORead(unsigned char)>:

  uint8_t IORead(uint8_t address)
    136a:	b580      	push	{r7, lr}
    136c:	b088      	sub	sp, #32
    136e:	af00      	add	r7, sp, #0
    1370:	6078      	str	r0, [r7, #4]
    1372:	460b      	mov	r3, r1
    1374:	70fb      	strb	r3, [r7, #3]
  {
    uint8_t temp = 0;
    1376:	2300      	movs	r3, #0
    1378:	77fb      	strb	r3, [r7, #31]

    ale.SetHigh();
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	f503 7390 	add.w	r3, r3, #288	; 0x120
    1380:	4618      	mov	r0, r3
    1382:	f7ff f95d 	bl	640 <sjsu::Gpio::SetHigh() const>
    write_enable.SetHigh();
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	f503 7380 	add.w	r3, r3, #256	; 0x100
    138c:	4618      	mov	r0, r3
    138e:	f7ff f957 	bl	640 <sjsu::Gpio::SetHigh() const>
    read.SetHigh();
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    1398:	4618      	mov	r0, r3
    139a:	f7ff f951 	bl	640 <sjsu::Gpio::SetHigh() const>
    write.SetHigh();
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    13a4:	4618      	mov	r0, r3
    13a6:	f7ff f94b 	bl	640 <sjsu::Gpio::SetHigh() const>
    m_io.SetLow();
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    13b0:	4618      	mov	r0, r3
    13b2:	f7ff f954 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);

    for (int i = 0; i < 8; i++)
    13b6:	2300      	movs	r3, #0
    13b8:	61bb      	str	r3, [r7, #24]
    13ba:	69bb      	ldr	r3, [r7, #24]
    13bc:	2b07      	cmp	r3, #7
    13be:	dc1a      	bgt.n	13f6 <Bus::IORead(unsigned char)+0x8c>
    {
      if (address & (1 << i))
    13c0:	78fa      	ldrb	r2, [r7, #3]
    13c2:	69bb      	ldr	r3, [r7, #24]
    13c4:	fa42 f303 	asr.w	r3, r2, r3
    13c8:	f003 0301 	and.w	r3, r3, #1
    13cc:	2b00      	cmp	r3, #0
    13ce:	d007      	beq.n	13e0 <Bus::IORead(unsigned char)+0x76>
      {
        ad[i].SetHigh();
    13d0:	69bb      	ldr	r3, [r7, #24]
    13d2:	015b      	lsls	r3, r3, #5
    13d4:	687a      	ldr	r2, [r7, #4]
    13d6:	4413      	add	r3, r2
    13d8:	4618      	mov	r0, r3
    13da:	f7ff f931 	bl	640 <sjsu::Gpio::SetHigh() const>
    13de:	e006      	b.n	13ee <Bus::IORead(unsigned char)+0x84>
      }
      else
      {
        ad[i].SetLow();
    13e0:	69bb      	ldr	r3, [r7, #24]
    13e2:	015b      	lsls	r3, r3, #5
    13e4:	687a      	ldr	r2, [r7, #4]
    13e6:	4413      	add	r3, r2
    13e8:	4618      	mov	r0, r3
    13ea:	f7ff f938 	bl	65e <sjsu::Gpio::SetLow() const>
    for (int i = 0; i < 8; i++)
    13ee:	69bb      	ldr	r3, [r7, #24]
    13f0:	3301      	adds	r3, #1
    13f2:	61bb      	str	r3, [r7, #24]
    13f4:	e7e1      	b.n	13ba <Bus::IORead(unsigned char)+0x50>
      }
    }

    //sjsu::Delay(1ms);
    ale.SetLow();
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
    13fc:	4618      	mov	r0, r3
    13fe:	f7ff f92e 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);

    for (int i = 0; i < 8; i++)
    1402:	2300      	movs	r3, #0
    1404:	617b      	str	r3, [r7, #20]
    1406:	697b      	ldr	r3, [r7, #20]
    1408:	2b07      	cmp	r3, #7
    140a:	dc0a      	bgt.n	1422 <Bus::IORead(unsigned char)+0xb8>
    {
      ad[i].SetAsInput();
    140c:	697b      	ldr	r3, [r7, #20]
    140e:	015b      	lsls	r3, r3, #5
    1410:	687a      	ldr	r2, [r7, #4]
    1412:	4413      	add	r3, r2
    1414:	4618      	mov	r0, r3
    1416:	f7ff f931 	bl	67c <sjsu::Gpio::SetAsInput() const>
    for (int i = 0; i < 8; i++)
    141a:	697b      	ldr	r3, [r7, #20]
    141c:	3301      	adds	r3, #1
    141e:	617b      	str	r3, [r7, #20]
    1420:	e7f1      	b.n	1406 <Bus::IORead(unsigned char)+0x9c>
    }

    write_enable.SetLow();
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1428:	4618      	mov	r0, r3
    142a:	f7ff f918 	bl	65e <sjsu::Gpio::SetLow() const>
    read.SetLow();
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    1434:	4618      	mov	r0, r3
    1436:	f7ff f912 	bl	65e <sjsu::Gpio::SetLow() const>
    //sjsu::Delay(1ms);

    temp = 0;
    143a:	2300      	movs	r3, #0
    143c:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 8; i++)
    143e:	2300      	movs	r3, #0
    1440:	613b      	str	r3, [r7, #16]
    1442:	693b      	ldr	r3, [r7, #16]
    1444:	2b07      	cmp	r3, #7
    1446:	dc15      	bgt.n	1474 <Bus::IORead(unsigned char)+0x10a>
    {
      temp = temp | (ad[i].Read() << i);
    1448:	693b      	ldr	r3, [r7, #16]
    144a:	015b      	lsls	r3, r3, #5
    144c:	687a      	ldr	r2, [r7, #4]
    144e:	4413      	add	r3, r2
    1450:	4618      	mov	r0, r3
    1452:	f7ff fd1c 	bl	e8e <sjsu::lpc40xx::Gpio::Read() const>
    1456:	4603      	mov	r3, r0
    1458:	461a      	mov	r2, r3
    145a:	693b      	ldr	r3, [r7, #16]
    145c:	fa02 f303 	lsl.w	r3, r2, r3
    1460:	b25a      	sxtb	r2, r3
    1462:	f997 301f 	ldrsb.w	r3, [r7, #31]
    1466:	4313      	orrs	r3, r2
    1468:	b25b      	sxtb	r3, r3
    146a:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 8; i++)
    146c:	693b      	ldr	r3, [r7, #16]
    146e:	3301      	adds	r3, #1
    1470:	613b      	str	r3, [r7, #16]
    1472:	e7e6      	b.n	1442 <Bus::IORead(unsigned char)+0xd8>
    }

    //sjsu::Delay(1ms);
    write_enable.SetHigh();
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	f503 7380 	add.w	r3, r3, #256	; 0x100
    147a:	4618      	mov	r0, r3
    147c:	f7ff f8e0 	bl	640 <sjsu::Gpio::SetHigh() const>
    read.SetHigh();
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    1486:	4618      	mov	r0, r3
    1488:	f7ff f8da 	bl	640 <sjsu::Gpio::SetHigh() const>
    //sjsu::Delay(1ms);

    for (int i = 0; i < 8; i++)
    148c:	2300      	movs	r3, #0
    148e:	60fb      	str	r3, [r7, #12]
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	2b07      	cmp	r3, #7
    1494:	dc0a      	bgt.n	14ac <Bus::IORead(unsigned char)+0x142>
    {
      ad[i].SetAsOutput();
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	015b      	lsls	r3, r3, #5
    149a:	687a      	ldr	r2, [r7, #4]
    149c:	4413      	add	r3, r2
    149e:	4618      	mov	r0, r3
    14a0:	f7ff f8fa 	bl	698 <sjsu::Gpio::SetAsOutput() const>
    for (int i = 0; i < 8; i++)
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	3301      	adds	r3, #1
    14a8:	60fb      	str	r3, [r7, #12]
    14aa:	e7f1      	b.n	1490 <Bus::IORead(unsigned char)+0x126>
    }
    //sjsu::Delay(1ms);

    return temp;
    14ac:	7ffb      	ldrb	r3, [r7, #31]
  }
    14ae:	4618      	mov	r0, r3
    14b0:	3720      	adds	r7, #32
    14b2:	46bd      	mov	sp, r7
    14b4:	bd80      	pop	{r7, pc}

000014b6 <Bus::Bus()>:
class Bus
    14b6:	b580      	push	{r7, lr}
    14b8:	b082      	sub	sp, #8
    14ba:	af00      	add	r7, sp, #0
    14bc:	6078      	str	r0, [r7, #4]
    14be:	6878      	ldr	r0, [r7, #4]
    14c0:	2300      	movs	r3, #0
    14c2:	2202      	movs	r2, #2
    14c4:	2102      	movs	r1, #2
    14c6:	f7ff fc1f 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	f103 0020 	add.w	r0, r3, #32
    14d0:	2300      	movs	r3, #0
    14d2:	2205      	movs	r2, #5
    14d4:	2102      	movs	r1, #2
    14d6:	f7ff fc17 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
    14e0:	2300      	movs	r3, #0
    14e2:	2207      	movs	r2, #7
    14e4:	2102      	movs	r1, #2
    14e6:	f7ff fc0f 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	f103 0060 	add.w	r0, r3, #96	; 0x60
    14f0:	2300      	movs	r3, #0
    14f2:	2209      	movs	r2, #9
    14f4:	2102      	movs	r1, #2
    14f6:	f7ff fc07 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	f103 0080 	add.w	r0, r3, #128	; 0x80
    1500:	2300      	movs	r3, #0
    1502:	220f      	movs	r2, #15
    1504:	2100      	movs	r1, #0
    1506:	f7ff fbff 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
    1510:	2300      	movs	r3, #0
    1512:	2212      	movs	r2, #18
    1514:	2100      	movs	r1, #0
    1516:	f7ff fbf7 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
    1520:	2300      	movs	r3, #0
    1522:	2201      	movs	r2, #1
    1524:	2100      	movs	r1, #0
    1526:	f7ff fbef 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
    1530:	2300      	movs	r3, #0
    1532:	220a      	movs	r2, #10
    1534:	2100      	movs	r1, #0
    1536:	f7ff fbe7 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	f503 7080 	add.w	r0, r3, #256	; 0x100
    1540:	2300      	movs	r3, #0
    1542:	2211      	movs	r2, #17
    1544:	2100      	movs	r1, #0
    1546:	f7ff fbdf 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	f503 7090 	add.w	r0, r3, #288	; 0x120
    1550:	2300      	movs	r3, #0
    1552:	2216      	movs	r2, #22
    1554:	2100      	movs	r1, #0
    1556:	f7ff fbd7 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
    1560:	2300      	movs	r3, #0
    1562:	2200      	movs	r2, #0
    1564:	2100      	movs	r1, #0
    1566:	f7ff fbcf 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	f503 70b0 	add.w	r0, r3, #352	; 0x160
    1570:	2300      	movs	r3, #0
    1572:	220b      	movs	r2, #11
    1574:	2100      	movs	r1, #0
    1576:	f7ff fbc7 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	f503 70c0 	add.w	r0, r3, #384	; 0x180
    1580:	2300      	movs	r3, #0
    1582:	2210      	movs	r2, #16
    1584:	2100      	movs	r1, #0
    1586:	f7ff fbbf 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
    1590:	2300      	movs	r3, #0
    1592:	2208      	movs	r2, #8
    1594:	2102      	movs	r1, #2
    1596:	f7ff fbb7 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	4618      	mov	r0, r3
    159e:	3708      	adds	r7, #8
    15a0:	46bd      	mov	sp, r7
    15a2:	bd80      	pop	{r7, pc}

000015a4 <main>:
uint8_t addr_port_A      = 0xf0;
uint8_t data_port_A      = 0x0f;  // initialize to 0000 1111
uint8_t addr_port_B      = 0xf1;

int main()
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b090      	sub	sp, #64	; 0x40
    15a8:	af00      	add	r7, sp, #0
	

  //Bus Initialize
  bus.Initialize();
    15aa:	4827      	ldr	r0, [pc, #156]	; (1648 <main+0xa4>)
    15ac:	f7ff fd8a 	bl	10c4 <Bus::Initialize()>
  sjsu::lpc40xx::Gpio interrupt = sjsu::lpc40xx::Gpio(0, 11);
    15b0:	4638      	mov	r0, r7
    15b2:	2300      	movs	r3, #0
    15b4:	220b      	movs	r2, #11
    15b6:	2100      	movs	r1, #0
    15b8:	f7ff fba6 	bl	d08 <sjsu::lpc40xx::Gpio::Gpio(unsigned char, unsigned char, sjsu::Pin*)>

  //82C55 Initialize
  bus.IOWrite(command_register, data_setmode_0);
    15bc:	4b23      	ldr	r3, [pc, #140]	; (164c <main+0xa8>)
    15be:	781b      	ldrb	r3, [r3, #0]
    15c0:	4a23      	ldr	r2, [pc, #140]	; (1650 <main+0xac>)
    15c2:	7812      	ldrb	r2, [r2, #0]
    15c4:	4619      	mov	r1, r3
    15c6:	4820      	ldr	r0, [pc, #128]	; (1648 <main+0xa4>)
    15c8:	f7ff fe4c 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
  bus.IOWrite(addr_port_A, data_port_A);
    15cc:	4b21      	ldr	r3, [pc, #132]	; (1654 <main+0xb0>)
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	4a21      	ldr	r2, [pc, #132]	; (1658 <main+0xb4>)
    15d2:	7812      	ldrb	r2, [r2, #0]
    15d4:	4619      	mov	r1, r3
    15d6:	481c      	ldr	r0, [pc, #112]	; (1648 <main+0xa4>)
    15d8:	f7ff fe44 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>


  //Interrupt
  interrupt.GetPin().SetPull(sjsu::Pin::Resistor::kPullUp);
    15dc:	463b      	mov	r3, r7
    15de:	4618      	mov	r0, r3
    15e0:	f7ff fc67 	bl	eb2 <sjsu::lpc40xx::Gpio::GetPin() const>
    15e4:	4603      	mov	r3, r0
    15e6:	681a      	ldr	r2, [r3, #0]
    15e8:	3208      	adds	r2, #8
    15ea:	6812      	ldr	r2, [r2, #0]
    15ec:	2102      	movs	r1, #2
    15ee:	4618      	mov	r0, r3
    15f0:	4790      	blx	r2
  interrupt.AttachInterrupt(keyboard_interrupt, sjsu::Gpio::Edge::kEdgeRising);
    15f2:	f107 0320 	add.w	r3, r7, #32
    15f6:	4919      	ldr	r1, [pc, #100]	; (165c <main+0xb8>)
    15f8:	4618      	mov	r0, r3
    15fa:	f000 fbf5 	bl	1de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    15fe:	f107 0120 	add.w	r1, r7, #32
    1602:	463b      	mov	r3, r7
    1604:	2200      	movs	r2, #0
    1606:	4618      	mov	r0, r3
    1608:	f7ff fc7a 	bl	f00 <sjsu::lpc40xx::Gpio::AttachInterrupt(std::function<void ()>, sjsu::Gpio::Edge)>
    160c:	f107 0320 	add.w	r3, r7, #32
    1610:	4618      	mov	r0, r3
    1612:	f7ff fc5a 	bl	eca <std::function<void ()>::~function()>

  while (1)
  {
    // empty
    LOG_INFO("Waiting for Interrupt\n");
    1616:	2320      	movs	r3, #32
    1618:	4a11      	ldr	r2, [pc, #68]	; (1660 <main+0xbc>)
    161a:	4912      	ldr	r1, [pc, #72]	; (1664 <main+0xc0>)
    161c:	4812      	ldr	r0, [pc, #72]	; (1668 <main+0xc4>)
    161e:	f002 fe05 	bl	422c <printf>
    sjsu::Delay(500ms);
    1622:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1626:	4618      	mov	r0, r3
    1628:	f000 fc3d 	bl	1ea6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>
    162c:	f107 0238 	add.w	r2, r7, #56	; 0x38
    1630:	f107 0330 	add.w	r3, r7, #48	; 0x30
    1634:	4611      	mov	r1, r2
    1636:	4618      	mov	r0, r3
    1638:	f000 fc42 	bl	1ec0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    163c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
    1640:	f7ff f993 	bl	96a <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
  }
    1644:	e7e7      	b.n	1616 <main+0x72>
    1646:	bf00      	nop
    1648:	1000058c 	.word	0x1000058c
    164c:	10000004 	.word	0x10000004
    1650:	10000005 	.word	0x10000005
    1654:	10000006 	.word	0x10000006
    1658:	10000007 	.word	0x10000007
    165c:	0000166d 	.word	0x0000166d
    1660:	00007ca8 	.word	0x00007ca8
    1664:	00008238 	.word	0x00008238
    1668:	00007cb4 	.word	0x00007cb4

0000166c <keyboard_interrupt()>:

  return 0;
}

void keyboard_interrupt()
{
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
  LOG_INFO("\nKey detected\n\n");
    1672:	2329      	movs	r3, #41	; 0x29
    1674:	4a9d      	ldr	r2, [pc, #628]	; (18ec <keyboard_interrupt()+0x280>)
    1676:	499e      	ldr	r1, [pc, #632]	; (18f0 <keyboard_interrupt()+0x284>)
    1678:	489e      	ldr	r0, [pc, #632]	; (18f4 <keyboard_interrupt()+0x288>)
    167a:	f002 fdd7 	bl	422c <printf>

  for (int i = 1; i <= 4; i++)
    167e:	2301      	movs	r3, #1
    1680:	607b      	str	r3, [r7, #4]
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	2b04      	cmp	r3, #4
    1686:	f300 81d9 	bgt.w	1a3c <keyboard_interrupt()+0x3d0>
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	3b01      	subs	r3, #1
    168e:	2b03      	cmp	r3, #3
    1690:	f200 81d0 	bhi.w	1a34 <keyboard_interrupt()+0x3c8>
    1694:	a201      	add	r2, pc, #4	; (adr r2, 169c <keyboard_interrupt()+0x30>)
    1696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    169a:	bf00      	nop
    169c:	000016ad 	.word	0x000016ad
    16a0:	0000176d 	.word	0x0000176d
    16a4:	0000182d 	.word	0x0000182d
    16a8:	00001969 	.word	0x00001969
  {
    switch (i)
    {
      case 1:
        data_port_A = 0x01;
    16ac:	4b92      	ldr	r3, [pc, #584]	; (18f8 <keyboard_interrupt()+0x28c>)
    16ae:	2201      	movs	r2, #1
    16b0:	701a      	strb	r2, [r3, #0]
        bus.IOWrite(addr_port_A, data_port_A);
    16b2:	4b92      	ldr	r3, [pc, #584]	; (18fc <keyboard_interrupt()+0x290>)
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	4a90      	ldr	r2, [pc, #576]	; (18f8 <keyboard_interrupt()+0x28c>)
    16b8:	7812      	ldrb	r2, [r2, #0]
    16ba:	4619      	mov	r1, r3
    16bc:	4890      	ldr	r0, [pc, #576]	; (1900 <keyboard_interrupt()+0x294>)
    16be:	f7ff fdd1 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
        if (bus.IORead(addr_port_B) == 0xf1)
    16c2:	4b90      	ldr	r3, [pc, #576]	; (1904 <keyboard_interrupt()+0x298>)
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	4619      	mov	r1, r3
    16c8:	488d      	ldr	r0, [pc, #564]	; (1900 <keyboard_interrupt()+0x294>)
    16ca:	f7ff fe4e 	bl	136a <Bus::IORead(unsigned char)>
    16ce:	4603      	mov	r3, r0
    16d0:	2bf1      	cmp	r3, #241	; 0xf1
    16d2:	bf0c      	ite	eq
    16d4:	2301      	moveq	r3, #1
    16d6:	2300      	movne	r3, #0
    16d8:	b2db      	uxtb	r3, r3
    16da:	2b00      	cmp	r3, #0
    16dc:	d006      	beq.n	16ec <keyboard_interrupt()+0x80>
        {
          LOG_INFO("Key pressed: 1\n");
    16de:	2334      	movs	r3, #52	; 0x34
    16e0:	4a82      	ldr	r2, [pc, #520]	; (18ec <keyboard_interrupt()+0x280>)
    16e2:	4989      	ldr	r1, [pc, #548]	; (1908 <keyboard_interrupt()+0x29c>)
    16e4:	4889      	ldr	r0, [pc, #548]	; (190c <keyboard_interrupt()+0x2a0>)
    16e6:	f002 fda1 	bl	422c <printf>
        }
        else if (bus.IORead(addr_port_B) == 0xf8)
        {
          LOG_INFO("Key pressed: A\n");
        }
        break;
    16ea:	e19c      	b.n	1a26 <keyboard_interrupt()+0x3ba>
        else if (bus.IORead(addr_port_B) == 0xf2)
    16ec:	4b85      	ldr	r3, [pc, #532]	; (1904 <keyboard_interrupt()+0x298>)
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	4619      	mov	r1, r3
    16f2:	4883      	ldr	r0, [pc, #524]	; (1900 <keyboard_interrupt()+0x294>)
    16f4:	f7ff fe39 	bl	136a <Bus::IORead(unsigned char)>
    16f8:	4603      	mov	r3, r0
    16fa:	2bf2      	cmp	r3, #242	; 0xf2
    16fc:	bf0c      	ite	eq
    16fe:	2301      	moveq	r3, #1
    1700:	2300      	movne	r3, #0
    1702:	b2db      	uxtb	r3, r3
    1704:	2b00      	cmp	r3, #0
    1706:	d006      	beq.n	1716 <keyboard_interrupt()+0xaa>
          LOG_INFO("Key pressed: 2\n");
    1708:	2338      	movs	r3, #56	; 0x38
    170a:	4a78      	ldr	r2, [pc, #480]	; (18ec <keyboard_interrupt()+0x280>)
    170c:	4980      	ldr	r1, [pc, #512]	; (1910 <keyboard_interrupt()+0x2a4>)
    170e:	4881      	ldr	r0, [pc, #516]	; (1914 <keyboard_interrupt()+0x2a8>)
    1710:	f002 fd8c 	bl	422c <printf>
        break;
    1714:	e187      	b.n	1a26 <keyboard_interrupt()+0x3ba>
        else if (bus.IORead(addr_port_B) == 0xf4)
    1716:	4b7b      	ldr	r3, [pc, #492]	; (1904 <keyboard_interrupt()+0x298>)
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	4619      	mov	r1, r3
    171c:	4878      	ldr	r0, [pc, #480]	; (1900 <keyboard_interrupt()+0x294>)
    171e:	f7ff fe24 	bl	136a <Bus::IORead(unsigned char)>
    1722:	4603      	mov	r3, r0
    1724:	2bf4      	cmp	r3, #244	; 0xf4
    1726:	bf0c      	ite	eq
    1728:	2301      	moveq	r3, #1
    172a:	2300      	movne	r3, #0
    172c:	b2db      	uxtb	r3, r3
    172e:	2b00      	cmp	r3, #0
    1730:	d006      	beq.n	1740 <keyboard_interrupt()+0xd4>
          LOG_INFO("Key pressed: 3\n");
    1732:	233c      	movs	r3, #60	; 0x3c
    1734:	4a6d      	ldr	r2, [pc, #436]	; (18ec <keyboard_interrupt()+0x280>)
    1736:	4978      	ldr	r1, [pc, #480]	; (1918 <keyboard_interrupt()+0x2ac>)
    1738:	4878      	ldr	r0, [pc, #480]	; (191c <keyboard_interrupt()+0x2b0>)
    173a:	f002 fd77 	bl	422c <printf>
        break;
    173e:	e172      	b.n	1a26 <keyboard_interrupt()+0x3ba>
        else if (bus.IORead(addr_port_B) == 0xf8)
    1740:	4b70      	ldr	r3, [pc, #448]	; (1904 <keyboard_interrupt()+0x298>)
    1742:	781b      	ldrb	r3, [r3, #0]
    1744:	4619      	mov	r1, r3
    1746:	486e      	ldr	r0, [pc, #440]	; (1900 <keyboard_interrupt()+0x294>)
    1748:	f7ff fe0f 	bl	136a <Bus::IORead(unsigned char)>
    174c:	4603      	mov	r3, r0
    174e:	2bf8      	cmp	r3, #248	; 0xf8
    1750:	bf0c      	ite	eq
    1752:	2301      	moveq	r3, #1
    1754:	2300      	movne	r3, #0
    1756:	b2db      	uxtb	r3, r3
    1758:	2b00      	cmp	r3, #0
    175a:	f000 8164 	beq.w	1a26 <keyboard_interrupt()+0x3ba>
          LOG_INFO("Key pressed: A\n");
    175e:	2340      	movs	r3, #64	; 0x40
    1760:	4a62      	ldr	r2, [pc, #392]	; (18ec <keyboard_interrupt()+0x280>)
    1762:	496f      	ldr	r1, [pc, #444]	; (1920 <keyboard_interrupt()+0x2b4>)
    1764:	486f      	ldr	r0, [pc, #444]	; (1924 <keyboard_interrupt()+0x2b8>)
    1766:	f002 fd61 	bl	422c <printf>
        break;
    176a:	e15c      	b.n	1a26 <keyboard_interrupt()+0x3ba>

      case 2:
        data_port_A = 0x02;
    176c:	4b62      	ldr	r3, [pc, #392]	; (18f8 <keyboard_interrupt()+0x28c>)
    176e:	2202      	movs	r2, #2
    1770:	701a      	strb	r2, [r3, #0]
        bus.IOWrite(addr_port_A, data_port_A);
    1772:	4b62      	ldr	r3, [pc, #392]	; (18fc <keyboard_interrupt()+0x290>)
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	4a60      	ldr	r2, [pc, #384]	; (18f8 <keyboard_interrupt()+0x28c>)
    1778:	7812      	ldrb	r2, [r2, #0]
    177a:	4619      	mov	r1, r3
    177c:	4860      	ldr	r0, [pc, #384]	; (1900 <keyboard_interrupt()+0x294>)
    177e:	f7ff fd71 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
        if (bus.IORead(addr_port_B) == 0xf1)
    1782:	4b60      	ldr	r3, [pc, #384]	; (1904 <keyboard_interrupt()+0x298>)
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	4619      	mov	r1, r3
    1788:	485d      	ldr	r0, [pc, #372]	; (1900 <keyboard_interrupt()+0x294>)
    178a:	f7ff fdee 	bl	136a <Bus::IORead(unsigned char)>
    178e:	4603      	mov	r3, r0
    1790:	2bf1      	cmp	r3, #241	; 0xf1
    1792:	bf0c      	ite	eq
    1794:	2301      	moveq	r3, #1
    1796:	2300      	movne	r3, #0
    1798:	b2db      	uxtb	r3, r3
    179a:	2b00      	cmp	r3, #0
    179c:	d006      	beq.n	17ac <keyboard_interrupt()+0x140>
        {
          LOG_INFO("Key pressed: 4\n");
    179e:	2349      	movs	r3, #73	; 0x49
    17a0:	4a52      	ldr	r2, [pc, #328]	; (18ec <keyboard_interrupt()+0x280>)
    17a2:	4961      	ldr	r1, [pc, #388]	; (1928 <keyboard_interrupt()+0x2bc>)
    17a4:	4861      	ldr	r0, [pc, #388]	; (192c <keyboard_interrupt()+0x2c0>)
    17a6:	f002 fd41 	bl	422c <printf>
        }
        else if (bus.IORead(addr_port_B) == 0xf8)
        {
          LOG_INFO("Key pressed: B\n");
        }
        break;
    17aa:	e13e      	b.n	1a2a <keyboard_interrupt()+0x3be>
        else if (bus.IORead(addr_port_B) == 0xf2)
    17ac:	4b55      	ldr	r3, [pc, #340]	; (1904 <keyboard_interrupt()+0x298>)
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	4619      	mov	r1, r3
    17b2:	4853      	ldr	r0, [pc, #332]	; (1900 <keyboard_interrupt()+0x294>)
    17b4:	f7ff fdd9 	bl	136a <Bus::IORead(unsigned char)>
    17b8:	4603      	mov	r3, r0
    17ba:	2bf2      	cmp	r3, #242	; 0xf2
    17bc:	bf0c      	ite	eq
    17be:	2301      	moveq	r3, #1
    17c0:	2300      	movne	r3, #0
    17c2:	b2db      	uxtb	r3, r3
    17c4:	2b00      	cmp	r3, #0
    17c6:	d006      	beq.n	17d6 <keyboard_interrupt()+0x16a>
          LOG_INFO("Key pressed: 5\n");
    17c8:	234d      	movs	r3, #77	; 0x4d
    17ca:	4a48      	ldr	r2, [pc, #288]	; (18ec <keyboard_interrupt()+0x280>)
    17cc:	4958      	ldr	r1, [pc, #352]	; (1930 <keyboard_interrupt()+0x2c4>)
    17ce:	4859      	ldr	r0, [pc, #356]	; (1934 <keyboard_interrupt()+0x2c8>)
    17d0:	f002 fd2c 	bl	422c <printf>
        break;
    17d4:	e129      	b.n	1a2a <keyboard_interrupt()+0x3be>
        else if (bus.IORead(addr_port_B) == 0xf4)
    17d6:	4b4b      	ldr	r3, [pc, #300]	; (1904 <keyboard_interrupt()+0x298>)
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	4619      	mov	r1, r3
    17dc:	4848      	ldr	r0, [pc, #288]	; (1900 <keyboard_interrupt()+0x294>)
    17de:	f7ff fdc4 	bl	136a <Bus::IORead(unsigned char)>
    17e2:	4603      	mov	r3, r0
    17e4:	2bf4      	cmp	r3, #244	; 0xf4
    17e6:	bf0c      	ite	eq
    17e8:	2301      	moveq	r3, #1
    17ea:	2300      	movne	r3, #0
    17ec:	b2db      	uxtb	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d006      	beq.n	1800 <keyboard_interrupt()+0x194>
          LOG_INFO("Key pressed: 6\n");
    17f2:	2351      	movs	r3, #81	; 0x51
    17f4:	4a3d      	ldr	r2, [pc, #244]	; (18ec <keyboard_interrupt()+0x280>)
    17f6:	4950      	ldr	r1, [pc, #320]	; (1938 <keyboard_interrupt()+0x2cc>)
    17f8:	4850      	ldr	r0, [pc, #320]	; (193c <keyboard_interrupt()+0x2d0>)
    17fa:	f002 fd17 	bl	422c <printf>
        break;
    17fe:	e114      	b.n	1a2a <keyboard_interrupt()+0x3be>
        else if (bus.IORead(addr_port_B) == 0xf8)
    1800:	4b40      	ldr	r3, [pc, #256]	; (1904 <keyboard_interrupt()+0x298>)
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	4619      	mov	r1, r3
    1806:	483e      	ldr	r0, [pc, #248]	; (1900 <keyboard_interrupt()+0x294>)
    1808:	f7ff fdaf 	bl	136a <Bus::IORead(unsigned char)>
    180c:	4603      	mov	r3, r0
    180e:	2bf8      	cmp	r3, #248	; 0xf8
    1810:	bf0c      	ite	eq
    1812:	2301      	moveq	r3, #1
    1814:	2300      	movne	r3, #0
    1816:	b2db      	uxtb	r3, r3
    1818:	2b00      	cmp	r3, #0
    181a:	f000 8106 	beq.w	1a2a <keyboard_interrupt()+0x3be>
          LOG_INFO("Key pressed: B\n");
    181e:	2355      	movs	r3, #85	; 0x55
    1820:	4a32      	ldr	r2, [pc, #200]	; (18ec <keyboard_interrupt()+0x280>)
    1822:	4947      	ldr	r1, [pc, #284]	; (1940 <keyboard_interrupt()+0x2d4>)
    1824:	4847      	ldr	r0, [pc, #284]	; (1944 <keyboard_interrupt()+0x2d8>)
    1826:	f002 fd01 	bl	422c <printf>
        break;
    182a:	e0fe      	b.n	1a2a <keyboard_interrupt()+0x3be>

      case 3:
        data_port_A = 0x04;
    182c:	4b32      	ldr	r3, [pc, #200]	; (18f8 <keyboard_interrupt()+0x28c>)
    182e:	2204      	movs	r2, #4
    1830:	701a      	strb	r2, [r3, #0]
        bus.IOWrite(addr_port_A, data_port_A);
    1832:	4b32      	ldr	r3, [pc, #200]	; (18fc <keyboard_interrupt()+0x290>)
    1834:	781b      	ldrb	r3, [r3, #0]
    1836:	4a30      	ldr	r2, [pc, #192]	; (18f8 <keyboard_interrupt()+0x28c>)
    1838:	7812      	ldrb	r2, [r2, #0]
    183a:	4619      	mov	r1, r3
    183c:	4830      	ldr	r0, [pc, #192]	; (1900 <keyboard_interrupt()+0x294>)
    183e:	f7ff fd11 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
        if (bus.IORead(addr_port_B) == 0xf1)
    1842:	4b30      	ldr	r3, [pc, #192]	; (1904 <keyboard_interrupt()+0x298>)
    1844:	781b      	ldrb	r3, [r3, #0]
    1846:	4619      	mov	r1, r3
    1848:	482d      	ldr	r0, [pc, #180]	; (1900 <keyboard_interrupt()+0x294>)
    184a:	f7ff fd8e 	bl	136a <Bus::IORead(unsigned char)>
    184e:	4603      	mov	r3, r0
    1850:	2bf1      	cmp	r3, #241	; 0xf1
    1852:	bf0c      	ite	eq
    1854:	2301      	moveq	r3, #1
    1856:	2300      	movne	r3, #0
    1858:	b2db      	uxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	d006      	beq.n	186c <keyboard_interrupt()+0x200>
        {
          LOG_INFO("Key pressed: 7\n");
    185e:	235e      	movs	r3, #94	; 0x5e
    1860:	4a22      	ldr	r2, [pc, #136]	; (18ec <keyboard_interrupt()+0x280>)
    1862:	4939      	ldr	r1, [pc, #228]	; (1948 <keyboard_interrupt()+0x2dc>)
    1864:	4839      	ldr	r0, [pc, #228]	; (194c <keyboard_interrupt()+0x2e0>)
    1866:	f002 fce1 	bl	422c <printf>
        }
        else if (bus.IORead(addr_port_B) == 0xf8)
        {
          LOG_INFO("Key pressed: C\n");
        }
        break;
    186a:	e0e0      	b.n	1a2e <keyboard_interrupt()+0x3c2>
        else if (bus.IORead(addr_port_B) == 0xf2)
    186c:	4b25      	ldr	r3, [pc, #148]	; (1904 <keyboard_interrupt()+0x298>)
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	4619      	mov	r1, r3
    1872:	4823      	ldr	r0, [pc, #140]	; (1900 <keyboard_interrupt()+0x294>)
    1874:	f7ff fd79 	bl	136a <Bus::IORead(unsigned char)>
    1878:	4603      	mov	r3, r0
    187a:	2bf2      	cmp	r3, #242	; 0xf2
    187c:	bf0c      	ite	eq
    187e:	2301      	moveq	r3, #1
    1880:	2300      	movne	r3, #0
    1882:	b2db      	uxtb	r3, r3
    1884:	2b00      	cmp	r3, #0
    1886:	d006      	beq.n	1896 <keyboard_interrupt()+0x22a>
          LOG_INFO("Key pressed: 8\n");
    1888:	2362      	movs	r3, #98	; 0x62
    188a:	4a18      	ldr	r2, [pc, #96]	; (18ec <keyboard_interrupt()+0x280>)
    188c:	4930      	ldr	r1, [pc, #192]	; (1950 <keyboard_interrupt()+0x2e4>)
    188e:	4831      	ldr	r0, [pc, #196]	; (1954 <keyboard_interrupt()+0x2e8>)
    1890:	f002 fccc 	bl	422c <printf>
        break;
    1894:	e0cb      	b.n	1a2e <keyboard_interrupt()+0x3c2>
        else if (bus.IORead(addr_port_B) == 0xf4)
    1896:	4b1b      	ldr	r3, [pc, #108]	; (1904 <keyboard_interrupt()+0x298>)
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	4619      	mov	r1, r3
    189c:	4818      	ldr	r0, [pc, #96]	; (1900 <keyboard_interrupt()+0x294>)
    189e:	f7ff fd64 	bl	136a <Bus::IORead(unsigned char)>
    18a2:	4603      	mov	r3, r0
    18a4:	2bf4      	cmp	r3, #244	; 0xf4
    18a6:	bf0c      	ite	eq
    18a8:	2301      	moveq	r3, #1
    18aa:	2300      	movne	r3, #0
    18ac:	b2db      	uxtb	r3, r3
    18ae:	2b00      	cmp	r3, #0
    18b0:	d006      	beq.n	18c0 <keyboard_interrupt()+0x254>
          LOG_INFO("Key pressed: 9\n");
    18b2:	2366      	movs	r3, #102	; 0x66
    18b4:	4a0d      	ldr	r2, [pc, #52]	; (18ec <keyboard_interrupt()+0x280>)
    18b6:	4928      	ldr	r1, [pc, #160]	; (1958 <keyboard_interrupt()+0x2ec>)
    18b8:	4828      	ldr	r0, [pc, #160]	; (195c <keyboard_interrupt()+0x2f0>)
    18ba:	f002 fcb7 	bl	422c <printf>
        break;
    18be:	e0b6      	b.n	1a2e <keyboard_interrupt()+0x3c2>
        else if (bus.IORead(addr_port_B) == 0xf8)
    18c0:	4b10      	ldr	r3, [pc, #64]	; (1904 <keyboard_interrupt()+0x298>)
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	4619      	mov	r1, r3
    18c6:	480e      	ldr	r0, [pc, #56]	; (1900 <keyboard_interrupt()+0x294>)
    18c8:	f7ff fd4f 	bl	136a <Bus::IORead(unsigned char)>
    18cc:	4603      	mov	r3, r0
    18ce:	2bf8      	cmp	r3, #248	; 0xf8
    18d0:	bf0c      	ite	eq
    18d2:	2301      	moveq	r3, #1
    18d4:	2300      	movne	r3, #0
    18d6:	b2db      	uxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	f000 80a8 	beq.w	1a2e <keyboard_interrupt()+0x3c2>
          LOG_INFO("Key pressed: C\n");
    18de:	236a      	movs	r3, #106	; 0x6a
    18e0:	4a02      	ldr	r2, [pc, #8]	; (18ec <keyboard_interrupt()+0x280>)
    18e2:	491f      	ldr	r1, [pc, #124]	; (1960 <keyboard_interrupt()+0x2f4>)
    18e4:	481f      	ldr	r0, [pc, #124]	; (1964 <keyboard_interrupt()+0x2f8>)
    18e6:	f002 fca1 	bl	422c <printf>
        break;
    18ea:	e0a0      	b.n	1a2e <keyboard_interrupt()+0x3c2>
    18ec:	00007d04 	.word	0x00007d04
    18f0:	00008244 	.word	0x00008244
    18f4:	00007d20 	.word	0x00007d20
    18f8:	10000007 	.word	0x10000007
    18fc:	10000006 	.word	0x10000006
    1900:	1000058c 	.word	0x1000058c
    1904:	10000008 	.word	0x10000008
    1908:	00008250 	.word	0x00008250
    190c:	00007d6c 	.word	0x00007d6c
    1910:	0000825c 	.word	0x0000825c
    1914:	00007db8 	.word	0x00007db8
    1918:	00008268 	.word	0x00008268
    191c:	00007e04 	.word	0x00007e04
    1920:	00008274 	.word	0x00008274
    1924:	00007e50 	.word	0x00007e50
    1928:	00008280 	.word	0x00008280
    192c:	00007e9c 	.word	0x00007e9c
    1930:	0000828c 	.word	0x0000828c
    1934:	00007ee8 	.word	0x00007ee8
    1938:	00008298 	.word	0x00008298
    193c:	00007f34 	.word	0x00007f34
    1940:	000082a4 	.word	0x000082a4
    1944:	00007f80 	.word	0x00007f80
    1948:	000082b0 	.word	0x000082b0
    194c:	00007fcc 	.word	0x00007fcc
    1950:	000082bc 	.word	0x000082bc
    1954:	00008018 	.word	0x00008018
    1958:	000082c8 	.word	0x000082c8
    195c:	00008064 	.word	0x00008064
    1960:	000082d4 	.word	0x000082d4
    1964:	000080b0 	.word	0x000080b0

      case 4:
        data_port_A = 0x08;
    1968:	4b3c      	ldr	r3, [pc, #240]	; (1a5c <keyboard_interrupt()+0x3f0>)
    196a:	2208      	movs	r2, #8
    196c:	701a      	strb	r2, [r3, #0]
        bus.IOWrite(addr_port_A, data_port_A);
    196e:	4b3c      	ldr	r3, [pc, #240]	; (1a60 <keyboard_interrupt()+0x3f4>)
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	4a3a      	ldr	r2, [pc, #232]	; (1a5c <keyboard_interrupt()+0x3f0>)
    1974:	7812      	ldrb	r2, [r2, #0]
    1976:	4619      	mov	r1, r3
    1978:	483a      	ldr	r0, [pc, #232]	; (1a64 <keyboard_interrupt()+0x3f8>)
    197a:	f7ff fc73 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
        if (bus.IORead(addr_port_B) == 0xf1)
    197e:	4b3a      	ldr	r3, [pc, #232]	; (1a68 <keyboard_interrupt()+0x3fc>)
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	4619      	mov	r1, r3
    1984:	4837      	ldr	r0, [pc, #220]	; (1a64 <keyboard_interrupt()+0x3f8>)
    1986:	f7ff fcf0 	bl	136a <Bus::IORead(unsigned char)>
    198a:	4603      	mov	r3, r0
    198c:	2bf1      	cmp	r3, #241	; 0xf1
    198e:	bf0c      	ite	eq
    1990:	2301      	moveq	r3, #1
    1992:	2300      	movne	r3, #0
    1994:	b2db      	uxtb	r3, r3
    1996:	2b00      	cmp	r3, #0
    1998:	d006      	beq.n	19a8 <keyboard_interrupt()+0x33c>
        {
          LOG_INFO("Key pressed: *\n");
    199a:	2373      	movs	r3, #115	; 0x73
    199c:	4a33      	ldr	r2, [pc, #204]	; (1a6c <keyboard_interrupt()+0x400>)
    199e:	4934      	ldr	r1, [pc, #208]	; (1a70 <keyboard_interrupt()+0x404>)
    19a0:	4834      	ldr	r0, [pc, #208]	; (1a74 <keyboard_interrupt()+0x408>)
    19a2:	f002 fc43 	bl	422c <printf>
        }
        else if (bus.IORead(addr_port_B) == 0xf8)
        {
          LOG_INFO("Key pressed: D\n");
        }
        break;
    19a6:	e044      	b.n	1a32 <keyboard_interrupt()+0x3c6>
        else if (bus.IORead(addr_port_B) == 0xf2)
    19a8:	4b2f      	ldr	r3, [pc, #188]	; (1a68 <keyboard_interrupt()+0x3fc>)
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	4619      	mov	r1, r3
    19ae:	482d      	ldr	r0, [pc, #180]	; (1a64 <keyboard_interrupt()+0x3f8>)
    19b0:	f7ff fcdb 	bl	136a <Bus::IORead(unsigned char)>
    19b4:	4603      	mov	r3, r0
    19b6:	2bf2      	cmp	r3, #242	; 0xf2
    19b8:	bf0c      	ite	eq
    19ba:	2301      	moveq	r3, #1
    19bc:	2300      	movne	r3, #0
    19be:	b2db      	uxtb	r3, r3
    19c0:	2b00      	cmp	r3, #0
    19c2:	d006      	beq.n	19d2 <keyboard_interrupt()+0x366>
          LOG_INFO("Key pressed: 0\n");
    19c4:	2377      	movs	r3, #119	; 0x77
    19c6:	4a29      	ldr	r2, [pc, #164]	; (1a6c <keyboard_interrupt()+0x400>)
    19c8:	492b      	ldr	r1, [pc, #172]	; (1a78 <keyboard_interrupt()+0x40c>)
    19ca:	482c      	ldr	r0, [pc, #176]	; (1a7c <keyboard_interrupt()+0x410>)
    19cc:	f002 fc2e 	bl	422c <printf>
        break;
    19d0:	e02f      	b.n	1a32 <keyboard_interrupt()+0x3c6>
        else if (bus.IORead(addr_port_B) == 0xf4)
    19d2:	4b25      	ldr	r3, [pc, #148]	; (1a68 <keyboard_interrupt()+0x3fc>)
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	4619      	mov	r1, r3
    19d8:	4822      	ldr	r0, [pc, #136]	; (1a64 <keyboard_interrupt()+0x3f8>)
    19da:	f7ff fcc6 	bl	136a <Bus::IORead(unsigned char)>
    19de:	4603      	mov	r3, r0
    19e0:	2bf4      	cmp	r3, #244	; 0xf4
    19e2:	bf0c      	ite	eq
    19e4:	2301      	moveq	r3, #1
    19e6:	2300      	movne	r3, #0
    19e8:	b2db      	uxtb	r3, r3
    19ea:	2b00      	cmp	r3, #0
    19ec:	d006      	beq.n	19fc <keyboard_interrupt()+0x390>
          LOG_INFO("Key pressed: #\n");
    19ee:	237b      	movs	r3, #123	; 0x7b
    19f0:	4a1e      	ldr	r2, [pc, #120]	; (1a6c <keyboard_interrupt()+0x400>)
    19f2:	4923      	ldr	r1, [pc, #140]	; (1a80 <keyboard_interrupt()+0x414>)
    19f4:	4823      	ldr	r0, [pc, #140]	; (1a84 <keyboard_interrupt()+0x418>)
    19f6:	f002 fc19 	bl	422c <printf>
        break;
    19fa:	e01a      	b.n	1a32 <keyboard_interrupt()+0x3c6>
        else if (bus.IORead(addr_port_B) == 0xf8)
    19fc:	4b1a      	ldr	r3, [pc, #104]	; (1a68 <keyboard_interrupt()+0x3fc>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	4619      	mov	r1, r3
    1a02:	4818      	ldr	r0, [pc, #96]	; (1a64 <keyboard_interrupt()+0x3f8>)
    1a04:	f7ff fcb1 	bl	136a <Bus::IORead(unsigned char)>
    1a08:	4603      	mov	r3, r0
    1a0a:	2bf8      	cmp	r3, #248	; 0xf8
    1a0c:	bf0c      	ite	eq
    1a0e:	2301      	moveq	r3, #1
    1a10:	2300      	movne	r3, #0
    1a12:	b2db      	uxtb	r3, r3
    1a14:	2b00      	cmp	r3, #0
    1a16:	d00c      	beq.n	1a32 <keyboard_interrupt()+0x3c6>
          LOG_INFO("Key pressed: D\n");
    1a18:	237f      	movs	r3, #127	; 0x7f
    1a1a:	4a14      	ldr	r2, [pc, #80]	; (1a6c <keyboard_interrupt()+0x400>)
    1a1c:	491a      	ldr	r1, [pc, #104]	; (1a88 <keyboard_interrupt()+0x41c>)
    1a1e:	481b      	ldr	r0, [pc, #108]	; (1a8c <keyboard_interrupt()+0x420>)
    1a20:	f002 fc04 	bl	422c <printf>
        break;
    1a24:	e005      	b.n	1a32 <keyboard_interrupt()+0x3c6>
        break;
    1a26:	bf00      	nop
    1a28:	e004      	b.n	1a34 <keyboard_interrupt()+0x3c8>
        break;
    1a2a:	bf00      	nop
    1a2c:	e002      	b.n	1a34 <keyboard_interrupt()+0x3c8>
        break;
    1a2e:	bf00      	nop
    1a30:	e000      	b.n	1a34 <keyboard_interrupt()+0x3c8>
        break;
    1a32:	bf00      	nop
  for (int i = 1; i <= 4; i++)
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	3301      	adds	r3, #1
    1a38:	607b      	str	r3, [r7, #4]
    1a3a:	e622      	b.n	1682 <keyboard_interrupt()+0x16>
    }
  }
  data_port_A = 0x0f;
    1a3c:	4b07      	ldr	r3, [pc, #28]	; (1a5c <keyboard_interrupt()+0x3f0>)
    1a3e:	220f      	movs	r2, #15
    1a40:	701a      	strb	r2, [r3, #0]
  bus.IOWrite(addr_port_A, data_port_A);
    1a42:	4b07      	ldr	r3, [pc, #28]	; (1a60 <keyboard_interrupt()+0x3f4>)
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	4a05      	ldr	r2, [pc, #20]	; (1a5c <keyboard_interrupt()+0x3f0>)
    1a48:	7812      	ldrb	r2, [r2, #0]
    1a4a:	4619      	mov	r1, r3
    1a4c:	4805      	ldr	r0, [pc, #20]	; (1a64 <keyboard_interrupt()+0x3f8>)
    1a4e:	f7ff fc09 	bl	1264 <Bus::IOWrite(unsigned char, unsigned char)>
    
  
}
    1a52:	bf00      	nop
    1a54:	3708      	adds	r7, #8
    1a56:	46bd      	mov	sp, r7
    1a58:	bd80      	pop	{r7, pc}
    1a5a:	bf00      	nop
    1a5c:	10000007 	.word	0x10000007
    1a60:	10000006 	.word	0x10000006
    1a64:	1000058c 	.word	0x1000058c
    1a68:	10000008 	.word	0x10000008
    1a6c:	00007d04 	.word	0x00007d04
    1a70:	000082e0 	.word	0x000082e0
    1a74:	000080fc 	.word	0x000080fc
    1a78:	000082ec 	.word	0x000082ec
    1a7c:	00008148 	.word	0x00008148
    1a80:	000082f8 	.word	0x000082f8
    1a84:	00008194 	.word	0x00008194
    1a88:	00008304 	.word	0x00008304
    1a8c:	000081e0 	.word	0x000081e0

00001a90 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1a90:	b580      	push	{r7, lr}
    1a92:	b084      	sub	sp, #16
    1a94:	af00      	add	r7, sp, #0
    1a96:	60f8      	str	r0, [r7, #12]
    1a98:	460b      	mov	r3, r1
    1a9a:	80ba      	strh	r2, [r7, #4]
    1a9c:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    1a9e:	793b      	ldrb	r3, [r7, #4]
    1aa0:	461a      	mov	r2, r3
    1aa2:	797b      	ldrb	r3, [r7, #5]
    1aa4:	7af9      	ldrb	r1, [r7, #11]
    1aa6:	68f8      	ldr	r0, [r7, #12]
    1aa8:	f000 fa24 	bl	1ef4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    1aac:	4603      	mov	r3, r0
}
    1aae:	4618      	mov	r0, r3
    1ab0:	3710      	adds	r7, #16
    1ab2:	46bd      	mov	sp, r7
    1ab4:	bd80      	pop	{r7, pc}

00001ab6 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
      operator""us()
    1ab6:	b580      	push	{r7, lr}
    1ab8:	b082      	sub	sp, #8
    1aba:	af00      	add	r7, sp, #0
    1abc:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	4618      	mov	r0, r3
    1ac2:	f000 fa44 	bl	1f4e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
    1ac6:	bf00      	nop
    1ac8:	6878      	ldr	r0, [r7, #4]
    1aca:	3708      	adds	r7, #8
    1acc:	46bd      	mov	sp, r7
    1ace:	bd80      	pop	{r7, pc}

00001ad0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b084      	sub	sp, #16
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	6078      	str	r0, [r7, #4]
    1ad8:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    1ada:	f107 0308 	add.w	r3, r7, #8
    1ade:	6839      	ldr	r1, [r7, #0]
    1ae0:	4618      	mov	r0, r3
    1ae2:	f000 fa48 	bl	1f76 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1ae6:	f107 0308 	add.w	r3, r7, #8
    1aea:	4618      	mov	r0, r3
    1aec:	f7fe fde2 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1af0:	4602      	mov	r2, r0
    1af2:	460b      	mov	r3, r1
    1af4:	6879      	ldr	r1, [r7, #4]
    1af6:	e9c1 2300 	strd	r2, r3, [r1]
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	4618      	mov	r0, r3
    1afe:	3710      	adds	r7, #16
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}

00001b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
    1b04:	b590      	push	{r4, r7, lr}
    1b06:	b083      	sub	sp, #12
    1b08:	af00      	add	r7, sp, #0
    1b0a:	6078      	str	r0, [r7, #4]
    1b0c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	4618      	mov	r0, r3
    1b12:	f7fe fc59 	bl	3c8 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    1b16:	683b      	ldr	r3, [r7, #0]
    1b18:	4618      	mov	r0, r3
    1b1a:	f000 fa3b 	bl	1f94 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    1b1e:	4603      	mov	r3, r0
    1b20:	2b00      	cmp	r3, #0
    1b22:	d00f      	beq.n	1b44 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1b24:	687c      	ldr	r4, [r7, #4]
    1b26:	463b      	mov	r3, r7
    1b28:	4618      	mov	r0, r3
    1b2a:	f000 fa43 	bl	1fb4 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    1b2e:	4603      	mov	r3, r0
    1b30:	4619      	mov	r1, r3
    1b32:	4620      	mov	r0, r4
    1b34:	f000 fa49 	bl	1fca <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	4a05      	ldr	r2, [pc, #20]	; (1b50 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
    1b3c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	4a04      	ldr	r2, [pc, #16]	; (1b54 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
    1b42:	609a      	str	r2, [r3, #8]
	  }
      }
    1b44:	687b      	ldr	r3, [r7, #4]
    1b46:	4618      	mov	r0, r3
    1b48:	370c      	adds	r7, #12
    1b4a:	46bd      	mov	sp, r7
    1b4c:	bd90      	pop	{r4, r7, pc}
    1b4e:	bf00      	nop
    1b50:	00001fef 	.word	0x00001fef
    1b54:	00002013 	.word	0x00002013

00001b58 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>:
	max() noexcept
    1b58:	b580      	push	{r7, lr}
    1b5a:	b084      	sub	sp, #16
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    1b60:	f000 fa82 	bl	2068 <std::chrono::duration_values<long long>::max()>
    1b64:	4602      	mov	r2, r0
    1b66:	460b      	mov	r3, r1
    1b68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    1b6c:	f107 0308 	add.w	r3, r7, #8
    1b70:	4619      	mov	r1, r3
    1b72:	6878      	ldr	r0, [r7, #4]
    1b74:	f7fe fdd4 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
    1b78:	6878      	ldr	r0, [r7, #4]
    1b7a:	3710      	adds	r7, #16
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}

00001b80 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    1b80:	b5b0      	push	{r4, r5, r7, lr}
    1b82:	b086      	sub	sp, #24
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
    1b88:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b90:	e9c7 2302 	strd	r2, r3, [r7, #8]
    1b94:	f107 0308 	add.w	r3, r7, #8
    1b98:	4618      	mov	r0, r3
    1b9a:	f7fe fd8b 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1b9e:	4604      	mov	r4, r0
    1ba0:	460d      	mov	r5, r1
    1ba2:	683b      	ldr	r3, [r7, #0]
    1ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    1bac:	f107 0310 	add.w	r3, r7, #16
    1bb0:	4618      	mov	r0, r3
    1bb2:	f7fe fd7f 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1bb6:	4602      	mov	r2, r0
    1bb8:	460b      	mov	r3, r1
    1bba:	429d      	cmp	r5, r3
    1bbc:	bf06      	itte	eq
    1bbe:	4294      	cmpeq	r4, r2
    1bc0:	2301      	moveq	r3, #1
    1bc2:	2300      	movne	r3, #0
    1bc4:	b2db      	uxtb	r3, r3
      }
    1bc6:	4618      	mov	r0, r3
    1bc8:	3718      	adds	r7, #24
    1bca:	46bd      	mov	sp, r7
    1bcc:	bdb0      	pop	{r4, r5, r7, pc}

00001bce <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    1bce:	b580      	push	{r7, lr}
    1bd0:	b082      	sub	sp, #8
    1bd2:	af00      	add	r7, sp, #0
    1bd4:	6078      	str	r0, [r7, #4]
    1bd6:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
    1bd8:	683b      	ldr	r3, [r7, #0]
    1bda:	4618      	mov	r0, r3
    1bdc:	f7fe fc15 	bl	40a <std::_Function_base::_M_empty() const>
    1be0:	4603      	mov	r3, r0
    1be2:	2b00      	cmp	r3, #0
    1be4:	d001      	beq.n	1bea <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const+0x1c>
	__throw_bad_function_call();
    1be6:	f004 fc7f 	bl	64e8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1bea:	683b      	ldr	r3, [r7, #0]
    1bec:	68db      	ldr	r3, [r3, #12]
    1bee:	6839      	ldr	r1, [r7, #0]
    1bf0:	687a      	ldr	r2, [r7, #4]
    1bf2:	4610      	mov	r0, r2
    1bf4:	4798      	blx	r3
    1bf6:	bf00      	nop
    }
    1bf8:	6878      	ldr	r0, [r7, #4]
    1bfa:	3708      	adds	r7, #8
    1bfc:	46bd      	mov	sp, r7
    1bfe:	bd80      	pop	{r7, pc}

00001c00 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    1c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    1c04:	b08a      	sub	sp, #40	; 0x28
    1c06:	af00      	add	r7, sp, #0
    1c08:	60f8      	str	r0, [r7, #12]
    1c0a:	60b9      	str	r1, [r7, #8]
    1c0c:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    1c0e:	68bb      	ldr	r3, [r7, #8]
    1c10:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    1c18:	f107 0318 	add.w	r3, r7, #24
    1c1c:	4618      	mov	r0, r3
    1c1e:	f7fe fd49 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1c22:	4604      	mov	r4, r0
    1c24:	460d      	mov	r5, r1
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    1c30:	f107 0320 	add.w	r3, r7, #32
    1c34:	4618      	mov	r0, r3
    1c36:	f7fe fd3d 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1c3a:	4602      	mov	r2, r0
    1c3c:	460b      	mov	r3, r1
    1c3e:	eb14 0802 	adds.w	r8, r4, r2
    1c42:	eb45 0903 	adc.w	r9, r5, r3
    1c46:	e9c7 8904 	strd	r8, r9, [r7, #16]
    1c4a:	f107 0310 	add.w	r3, r7, #16
    1c4e:	4619      	mov	r1, r3
    1c50:	68f8      	ldr	r0, [r7, #12]
    1c52:	f7fe fd65 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    1c56:	68f8      	ldr	r0, [r7, #12]
    1c58:	3728      	adds	r7, #40	; 0x28
    1c5a:	46bd      	mov	sp, r7
    1c5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00001c60 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator<=(const duration<_Rep1, _Period1>& __lhs,
    1c60:	b580      	push	{r7, lr}
    1c62:	b082      	sub	sp, #8
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
    1c68:	6039      	str	r1, [r7, #0]
      { return !(__rhs < __lhs); }
    1c6a:	6879      	ldr	r1, [r7, #4]
    1c6c:	6838      	ldr	r0, [r7, #0]
    1c6e:	f7fe fd2f 	bl	6d0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    1c72:	4603      	mov	r3, r0
    1c74:	f083 0301 	eor.w	r3, r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	4618      	mov	r0, r3
    1c7c:	3708      	adds	r7, #8
    1c7e:	46bd      	mov	sp, r7
    1c80:	bd80      	pop	{r7, pc}

00001c82 <std::function<bool ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    1c82:	b580      	push	{r7, lr}
    1c84:	b082      	sub	sp, #8
    1c86:	af00      	add	r7, sp, #0
    1c88:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	4618      	mov	r0, r3
    1c8e:	f7fe fbbc 	bl	40a <std::_Function_base::_M_empty() const>
    1c92:	4603      	mov	r3, r0
    1c94:	2b00      	cmp	r3, #0
    1c96:	d001      	beq.n	1c9c <std::function<bool ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    1c98:	f004 fc26 	bl	64e8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	68db      	ldr	r3, [r3, #12]
    1ca0:	687a      	ldr	r2, [r7, #4]
    1ca2:	4610      	mov	r0, r2
    1ca4:	4798      	blx	r3
    1ca6:	4603      	mov	r3, r0
    }
    1ca8:	4618      	mov	r0, r3
    1caa:	3708      	adds	r7, #8
    1cac:	46bd      	mov	sp, r7
    1cae:	bd80      	pop	{r7, pc}

00001cb0 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>:
      function<_Res(_ArgTypes...)>::
    1cb0:	b590      	push	{r4, r7, lr}
    1cb2:	b083      	sub	sp, #12
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
    1cb8:	7039      	strb	r1, [r7, #0]
      : _Function_base()
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	4618      	mov	r0, r3
    1cbe:	f7fe fb83 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    1cc2:	463b      	mov	r3, r7
    1cc4:	4618      	mov	r0, r3
    1cc6:	f000 f9d8 	bl	207a <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>
    1cca:	4603      	mov	r3, r0
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d00f      	beq.n	1cf0 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1cd0:	687c      	ldr	r4, [r7, #4]
    1cd2:	463b      	mov	r3, r7
    1cd4:	4618      	mov	r0, r3
    1cd6:	f000 f9db 	bl	2090 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    1cda:	4603      	mov	r3, r0
    1cdc:	4619      	mov	r1, r3
    1cde:	4620      	mov	r0, r4
    1ce0:	f000 f9e1 	bl	20a6 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>
	    _M_invoker = &_My_handler::_M_invoke;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	4a05      	ldr	r2, [pc, #20]	; (1cfc <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x4c>)
    1ce8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	4a04      	ldr	r2, [pc, #16]	; (1d00 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x50>)
    1cee:	609a      	str	r2, [r3, #8]
      }
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	4618      	mov	r0, r3
    1cf4:	370c      	adds	r7, #12
    1cf6:	46bd      	mov	sp, r7
    1cf8:	bd90      	pop	{r4, r7, pc}
    1cfa:	bf00      	nop
    1cfc:	000020cb 	.word	0x000020cb
    1d00:	000020eb 	.word	0x000020eb

00001d04 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1d04:	b580      	push	{r7, lr}
    1d06:	b084      	sub	sp, #16
    1d08:	af00      	add	r7, sp, #0
    1d0a:	60f8      	str	r0, [r7, #12]
    1d0c:	460b      	mov	r3, r1
    1d0e:	80ba      	strh	r2, [r7, #4]
    1d10:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    1d12:	793b      	ldrb	r3, [r7, #4]
    1d14:	461a      	mov	r2, r3
    1d16:	797b      	ldrb	r3, [r7, #5]
    1d18:	7af9      	ldrb	r1, [r7, #11]
    1d1a:	68f8      	ldr	r0, [r7, #12]
    1d1c:	f000 fa10 	bl	2140 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>
    1d20:	4603      	mov	r3, r0
}
    1d22:	4618      	mov	r0, r3
    1d24:	3710      	adds	r7, #16
    1d26:	46bd      	mov	sp, r7
    1d28:	bd80      	pop	{r7, pc}

00001d2a <std::function<void ()>::function()>:
      function() noexcept
    1d2a:	b580      	push	{r7, lr}
    1d2c:	b082      	sub	sp, #8
    1d2e:	af00      	add	r7, sp, #0
    1d30:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	4618      	mov	r0, r3
    1d36:	f7fe fb47 	bl	3c8 <std::_Function_base::_Function_base()>
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	4618      	mov	r0, r3
    1d3e:	3708      	adds	r7, #8
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}

00001d44 <std::function<void ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	4618      	mov	r0, r3
    1d50:	f7fe fb5b 	bl	40a <std::_Function_base::_M_empty() const>
    1d54:	4603      	mov	r3, r0
    1d56:	2b00      	cmp	r3, #0
    1d58:	d001      	beq.n	1d5e <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    1d5a:	f004 fbc5 	bl	64e8 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1d5e:	687b      	ldr	r3, [r7, #4]
    1d60:	68db      	ldr	r3, [r3, #12]
    1d62:	687a      	ldr	r2, [r7, #4]
    1d64:	4610      	mov	r0, r2
    1d66:	4798      	blx	r3
    1d68:	bf00      	nop
    }
    1d6a:	3708      	adds	r7, #8
    1d6c:	46bd      	mov	sp, r7
    1d6e:	bd80      	pop	{r7, pc}

00001d70 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    1d70:	b480      	push	{r7}
    1d72:	b083      	sub	sp, #12
    1d74:	af00      	add	r7, sp, #0
    1d76:	6078      	str	r0, [r7, #4]
    1d78:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    1d7a:	2201      	movs	r2, #1
    1d7c:	683b      	ldr	r3, [r7, #0]
    1d7e:	fa02 f303 	lsl.w	r3, r2, r3
    1d82:	43db      	mvns	r3, r3
    1d84:	461a      	mov	r2, r3
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	4013      	ands	r3, r2
}
    1d8a:	4618      	mov	r0, r3
    1d8c:	370c      	adds	r7, #12
    1d8e:	46bd      	mov	sp, r7
    1d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d94:	4770      	bx	lr

00001d96 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    1d96:	b480      	push	{r7}
    1d98:	b083      	sub	sp, #12
    1d9a:	af00      	add	r7, sp, #0
    1d9c:	6078      	str	r0, [r7, #4]
    1d9e:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    1da0:	2201      	movs	r2, #1
    1da2:	683b      	ldr	r3, [r7, #0]
    1da4:	fa02 f303 	lsl.w	r3, r2, r3
    1da8:	461a      	mov	r2, r3
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	4313      	orrs	r3, r2
}
    1dae:	4618      	mov	r0, r3
    1db0:	370c      	adds	r7, #12
    1db2:	46bd      	mov	sp, r7
    1db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1db8:	4770      	bx	lr

00001dba <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    1dba:	b480      	push	{r7}
    1dbc:	b083      	sub	sp, #12
    1dbe:	af00      	add	r7, sp, #0
    1dc0:	6078      	str	r0, [r7, #4]
    1dc2:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    1dc4:	2201      	movs	r2, #1
    1dc6:	683b      	ldr	r3, [r7, #0]
    1dc8:	fa02 f303 	lsl.w	r3, r2, r3
    1dcc:	461a      	mov	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	4013      	ands	r3, r2
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	bf14      	ite	ne
    1dd6:	2301      	movne	r3, #1
    1dd8:	2300      	moveq	r3, #0
    1dda:	b2db      	uxtb	r3, r3
}
    1ddc:	4618      	mov	r0, r3
    1dde:	370c      	adds	r7, #12
    1de0:	46bd      	mov	sp, r7
    1de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1de6:	4770      	bx	lr

00001de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    1de8:	b590      	push	{r4, r7, lr}
    1dea:	b083      	sub	sp, #12
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]
    1df0:	6039      	str	r1, [r7, #0]
      : _Function_base()
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	4618      	mov	r0, r3
    1df6:	f7fe fae7 	bl	3c8 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    1dfa:	683b      	ldr	r3, [r7, #0]
    1dfc:	4618      	mov	r0, r3
    1dfe:	f000 f9cc 	bl	219a <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    1e02:	4603      	mov	r3, r0
    1e04:	2b00      	cmp	r3, #0
    1e06:	d00f      	beq.n	1e28 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    1e08:	687c      	ldr	r4, [r7, #4]
    1e0a:	463b      	mov	r3, r7
    1e0c:	4618      	mov	r0, r3
    1e0e:	f000 f9d4 	bl	21ba <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    1e12:	4603      	mov	r3, r0
    1e14:	4619      	mov	r1, r3
    1e16:	4620      	mov	r0, r4
    1e18:	f000 f9da 	bl	21d0 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	4a05      	ldr	r2, [pc, #20]	; (1e34 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    1e20:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	4a04      	ldr	r2, [pc, #16]	; (1e38 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    1e26:	609a      	str	r2, [r3, #8]
      }
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	4618      	mov	r0, r3
    1e2c:	370c      	adds	r7, #12
    1e2e:	46bd      	mov	sp, r7
    1e30:	bd90      	pop	{r4, r7, pc}
    1e32:	bf00      	nop
    1e34:	000021f5 	.word	0x000021f5
    1e38:	00002211 	.word	0x00002211

00001e3c <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b086      	sub	sp, #24
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
    1e44:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    1e46:	f107 0308 	add.w	r3, r7, #8
    1e4a:	6839      	ldr	r1, [r7, #0]
    1e4c:	4618      	mov	r0, r3
    1e4e:	f000 fa0a 	bl	2266 <std::function<void ()>::function(std::function<void ()> const&)>
    1e52:	f107 0308 	add.w	r3, r7, #8
    1e56:	6879      	ldr	r1, [r7, #4]
    1e58:	4618      	mov	r0, r3
    1e5a:	f000 fa26 	bl	22aa <std::function<void ()>::swap(std::function<void ()>&)>
    1e5e:	f107 0308 	add.w	r3, r7, #8
    1e62:	4618      	mov	r0, r3
    1e64:	f7ff f831 	bl	eca <std::function<void ()>::~function()>
	return *this;
    1e68:	687b      	ldr	r3, [r7, #4]
      }
    1e6a:	4618      	mov	r0, r3
    1e6c:	3718      	adds	r7, #24
    1e6e:	46bd      	mov	sp, r7
    1e70:	bd80      	pop	{r7, pc}

00001e72 <std::function<void ()>::operator=(decltype(nullptr))>:
      operator=(nullptr_t) noexcept
    1e72:	b580      	push	{r7, lr}
    1e74:	b082      	sub	sp, #8
    1e76:	af00      	add	r7, sp, #0
    1e78:	6078      	str	r0, [r7, #4]
    1e7a:	6039      	str	r1, [r7, #0]
	if (_M_manager)
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	689b      	ldr	r3, [r3, #8]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d00b      	beq.n	1e9c <std::function<void ()>::operator=(decltype(nullptr))+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	689b      	ldr	r3, [r3, #8]
    1e88:	6878      	ldr	r0, [r7, #4]
    1e8a:	6879      	ldr	r1, [r7, #4]
    1e8c:	2203      	movs	r2, #3
    1e8e:	4798      	blx	r3
	    _M_manager = nullptr;
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	2200      	movs	r2, #0
    1e94:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	2200      	movs	r2, #0
    1e9a:	60da      	str	r2, [r3, #12]
	return *this;
    1e9c:	687b      	ldr	r3, [r7, #4]
      }
    1e9e:	4618      	mov	r0, r3
    1ea0:	3708      	adds	r7, #8
    1ea2:	46bd      	mov	sp, r7
    1ea4:	bd80      	pop	{r7, pc}

00001ea6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>:
      operator""ms()
    1ea6:	b580      	push	{r7, lr}
    1ea8:	b082      	sub	sp, #8
    1eaa:	af00      	add	r7, sp, #0
    1eac:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	4618      	mov	r0, r3
    1eb2:	f000 fa1b 	bl	22ec <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>
    1eb6:	bf00      	nop
    1eb8:	6878      	ldr	r0, [r7, #4]
    1eba:	3708      	adds	r7, #8
    1ebc:	46bd      	mov	sp, r7
    1ebe:	bd80      	pop	{r7, pc}

00001ec0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b084      	sub	sp, #16
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
    1ec8:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    1eca:	f107 0308 	add.w	r3, r7, #8
    1ece:	6839      	ldr	r1, [r7, #0]
    1ed0:	4618      	mov	r0, r3
    1ed2:	f000 fa1f 	bl	2314 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1ed6:	f107 0308 	add.w	r3, r7, #8
    1eda:	4618      	mov	r0, r3
    1edc:	f7fe fbea 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    1ee0:	4602      	mov	r2, r0
    1ee2:	460b      	mov	r3, r1
    1ee4:	6879      	ldr	r1, [r7, #4]
    1ee6:	e9c1 2300 	strd	r2, r3, [r1]
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	4618      	mov	r0, r3
    1eee:	3710      	adds	r7, #16
    1ef0:	46bd      	mov	sp, r7
    1ef2:	bd80      	pop	{r7, pc}

00001ef4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    1ef4:	b480      	push	{r7}
    1ef6:	b089      	sub	sp, #36	; 0x24
    1ef8:	af00      	add	r7, sp, #0
    1efa:	60f8      	str	r0, [r7, #12]
    1efc:	607a      	str	r2, [r7, #4]
    1efe:	603b      	str	r3, [r7, #0]
    1f00:	460b      	mov	r3, r1
    1f02:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    1f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f08:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    1f0a:	2320      	movs	r3, #32
    1f0c:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    1f0e:	683b      	ldr	r3, [r7, #0]
    1f10:	f1c3 0320 	rsb	r3, r3, #32
    1f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f18:	fa22 f303 	lsr.w	r3, r2, r3
    1f1c:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    1f1e:	697a      	ldr	r2, [r7, #20]
    1f20:	687b      	ldr	r3, [r7, #4]
    1f22:	fa02 f303 	lsl.w	r3, r2, r3
    1f26:	43db      	mvns	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    1f2e:	7afa      	ldrb	r2, [r7, #11]
    1f30:	697b      	ldr	r3, [r7, #20]
    1f32:	401a      	ands	r2, r3
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	fa02 f303 	lsl.w	r3, r2, r3
    1f3a:	68fa      	ldr	r2, [r7, #12]
    1f3c:	4313      	orrs	r3, r2
    1f3e:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    1f40:	68fb      	ldr	r3, [r7, #12]
}
    1f42:	4618      	mov	r0, r3
    1f44:	3724      	adds	r7, #36	; 0x24
    1f46:	46bd      	mov	sp, r7
    1f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f4c:	4770      	bx	lr

00001f4e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    1f4e:	b580      	push	{r7, lr}
    1f50:	b084      	sub	sp, #16
    1f52:	af00      	add	r7, sp, #0
    1f54:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    1f56:	f04f 0201 	mov.w	r2, #1
    1f5a:	f04f 0300 	mov.w	r3, #0
    1f5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    1f62:	f107 0308 	add.w	r3, r7, #8
    1f66:	4619      	mov	r1, r3
    1f68:	6878      	ldr	r0, [r7, #4]
    1f6a:	f000 f9e2 	bl	2332 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    1f6e:	6878      	ldr	r0, [r7, #4]
    1f70:	3710      	adds	r7, #16
    1f72:	46bd      	mov	sp, r7
    1f74:	bd80      	pop	{r7, pc}

00001f76 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    1f76:	b580      	push	{r7, lr}
    1f78:	b082      	sub	sp, #8
    1f7a:	af00      	add	r7, sp, #0
    1f7c:	6078      	str	r0, [r7, #4]
    1f7e:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	6839      	ldr	r1, [r7, #0]
    1f84:	4618      	mov	r0, r3
    1f86:	f000 f9f4 	bl	2372 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    1f8a:	bf00      	nop
      }
    1f8c:	6878      	ldr	r0, [r7, #4]
    1f8e:	3708      	adds	r7, #8
    1f90:	46bd      	mov	sp, r7
    1f92:	bd80      	pop	{r7, pc}

00001f94 <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	bf14      	ite	ne
    1fa2:	2301      	movne	r3, #1
    1fa4:	2300      	moveq	r3, #0
    1fa6:	b2db      	uxtb	r3, r3
    1fa8:	4618      	mov	r0, r3
    1faa:	370c      	adds	r7, #12
    1fac:	46bd      	mov	sp, r7
    1fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fb2:	4770      	bx	lr

00001fb4 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1fb4:	b480      	push	{r7}
    1fb6:	b083      	sub	sp, #12
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	4618      	mov	r0, r3
    1fc0:	370c      	adds	r7, #12
    1fc2:	46bd      	mov	sp, r7
    1fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fc8:	4770      	bx	lr

00001fca <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    1fca:	b590      	push	{r4, r7, lr}
    1fcc:	b085      	sub	sp, #20
    1fce:	af00      	add	r7, sp, #0
    1fd0:	6078      	str	r0, [r7, #4]
    1fd2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    1fd4:	6838      	ldr	r0, [r7, #0]
    1fd6:	f7ff ffed 	bl	1fb4 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    1fda:	4603      	mov	r3, r0
    1fdc:	4622      	mov	r2, r4
    1fde:	4619      	mov	r1, r3
    1fe0:	6878      	ldr	r0, [r7, #4]
    1fe2:	f000 fa00 	bl	23e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
    1fe6:	bf00      	nop
    1fe8:	3714      	adds	r7, #20
    1fea:	46bd      	mov	sp, r7
    1fec:	bd90      	pop	{r4, r7, pc}

00001fee <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    1fee:	b580      	push	{r7, lr}
    1ff0:	b082      	sub	sp, #8
    1ff2:	af00      	add	r7, sp, #0
    1ff4:	6078      	str	r0, [r7, #4]
    1ff6:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
    1ff8:	6838      	ldr	r0, [r7, #0]
    1ffa:	f000 fa0d 	bl	2418 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    1ffe:	4603      	mov	r3, r0
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	687a      	ldr	r2, [r7, #4]
    2004:	4610      	mov	r0, r2
    2006:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
    2008:	bf00      	nop
      }
    200a:	6878      	ldr	r0, [r7, #4]
    200c:	3708      	adds	r7, #8
    200e:	46bd      	mov	sp, r7
    2010:	bd80      	pop	{r7, pc}

00002012 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2012:	b5b0      	push	{r4, r5, r7, lr}
    2014:	b086      	sub	sp, #24
    2016:	af00      	add	r7, sp, #0
    2018:	60f8      	str	r0, [r7, #12]
    201a:	60b9      	str	r1, [r7, #8]
    201c:	4613      	mov	r3, r2
    201e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    2020:	79fb      	ldrb	r3, [r7, #7]
    2022:	2b03      	cmp	r3, #3
    2024:	d016      	beq.n	2054 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2026:	2b03      	cmp	r3, #3
    2028:	dc19      	bgt.n	205e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    202a:	2b01      	cmp	r3, #1
    202c:	d002      	beq.n	2034 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    202e:	2b02      	cmp	r3, #2
    2030:	d00a      	beq.n	2048 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    2032:	e014      	b.n	205e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2034:	68b8      	ldr	r0, [r7, #8]
    2036:	f000 f9ef 	bl	2418 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
    203a:	4604      	mov	r4, r0
    203c:	68f8      	ldr	r0, [r7, #12]
    203e:	f000 f9fb 	bl	2438 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
    2042:	4603      	mov	r3, r0
    2044:	601c      	str	r4, [r3, #0]
	      break;
    2046:	e00a      	b.n	205e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2048:	462a      	mov	r2, r5
    204a:	68b9      	ldr	r1, [r7, #8]
    204c:	68f8      	ldr	r0, [r7, #12]
    204e:	f000 f9ff 	bl	2450 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    2052:	e004      	b.n	205e <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2054:	4621      	mov	r1, r4
    2056:	68f8      	ldr	r0, [r7, #12]
    2058:	f000 fa13 	bl	2482 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    205c:	bf00      	nop
	  return false;
    205e:	2300      	movs	r3, #0
	}
    2060:	4618      	mov	r0, r3
    2062:	3718      	adds	r7, #24
    2064:	46bd      	mov	sp, r7
    2066:	bdb0      	pop	{r4, r5, r7, pc}

00002068 <std::chrono::duration_values<long long>::max()>:
	max() noexcept
    2068:	b580      	push	{r7, lr}
    206a:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    206c:	f7fe f98a 	bl	384 <std::numeric_limits<long long>::max()>
    2070:	4602      	mov	r2, r0
    2072:	460b      	mov	r3, r1
    2074:	4610      	mov	r0, r2
    2076:	4619      	mov	r1, r3
    2078:	bd80      	pop	{r7, pc}

0000207a <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>:
	  _M_not_empty_function(const _Tp&)
    207a:	b480      	push	{r7}
    207c:	b083      	sub	sp, #12
    207e:	af00      	add	r7, sp, #0
    2080:	6078      	str	r0, [r7, #4]
	  { return true; }
    2082:	2301      	movs	r3, #1
    2084:	4618      	mov	r0, r3
    2086:	370c      	adds	r7, #12
    2088:	46bd      	mov	sp, r7
    208a:	f85d 7b04 	ldr.w	r7, [sp], #4
    208e:	4770      	bx	lr

00002090 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>:
    move(_Tp&& __t) noexcept
    2090:	b480      	push	{r7}
    2092:	b083      	sub	sp, #12
    2094:	af00      	add	r7, sp, #0
    2096:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	4618      	mov	r0, r3
    209c:	370c      	adds	r7, #12
    209e:	46bd      	mov	sp, r7
    20a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    20a4:	4770      	bx	lr

000020a6 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    20a6:	b590      	push	{r4, r7, lr}
    20a8:	b085      	sub	sp, #20
    20aa:	af00      	add	r7, sp, #0
    20ac:	6078      	str	r0, [r7, #4]
    20ae:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    20b0:	6838      	ldr	r0, [r7, #0]
    20b2:	f7ff ffed 	bl	2090 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    20b6:	4603      	mov	r3, r0
    20b8:	4622      	mov	r2, r4
    20ba:	4619      	mov	r1, r3
    20bc:	6878      	ldr	r0, [r7, #4]
    20be:	f000 fa48 	bl	2552 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>
    20c2:	bf00      	nop
    20c4:	3714      	adds	r7, #20
    20c6:	46bd      	mov	sp, r7
    20c8:	bd90      	pop	{r4, r7, pc}

000020ca <std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    20ca:	b580      	push	{r7, lr}
    20cc:	b082      	sub	sp, #8
    20ce:	af00      	add	r7, sp, #0
    20d0:	6078      	str	r0, [r7, #4]
	return (*_Base::_M_get_pointer(__functor))(
    20d2:	6878      	ldr	r0, [r7, #4]
    20d4:	f000 fa52 	bl	257c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    20d8:	4603      	mov	r3, r0
    20da:	4618      	mov	r0, r3
    20dc:	f7fe fc10 	bl	900 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>
    20e0:	4603      	mov	r3, r0
      }
    20e2:	4618      	mov	r0, r3
    20e4:	3708      	adds	r7, #8
    20e6:	46bd      	mov	sp, r7
    20e8:	bd80      	pop	{r7, pc}

000020ea <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    20ea:	b5b0      	push	{r4, r5, r7, lr}
    20ec:	b086      	sub	sp, #24
    20ee:	af00      	add	r7, sp, #0
    20f0:	60f8      	str	r0, [r7, #12]
    20f2:	60b9      	str	r1, [r7, #8]
    20f4:	4613      	mov	r3, r2
    20f6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    20f8:	79fb      	ldrb	r3, [r7, #7]
    20fa:	2b03      	cmp	r3, #3
    20fc:	d016      	beq.n	212c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x42>
    20fe:	2b03      	cmp	r3, #3
    2100:	dc19      	bgt.n	2136 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
    2102:	2b01      	cmp	r3, #1
    2104:	d002      	beq.n	210c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x22>
    2106:	2b02      	cmp	r3, #2
    2108:	d00a      	beq.n	2120 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x36>
    210a:	e014      	b.n	2136 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    210c:	68b8      	ldr	r0, [r7, #8]
    210e:	f000 fa35 	bl	257c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
    2112:	4604      	mov	r4, r0
    2114:	68f8      	ldr	r0, [r7, #12]
    2116:	f000 fa41 	bl	259c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>
    211a:	4603      	mov	r3, r0
    211c:	601c      	str	r4, [r3, #0]
	      break;
    211e:	e00a      	b.n	2136 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2120:	462a      	mov	r2, r5
    2122:	68b9      	ldr	r1, [r7, #8]
    2124:	68f8      	ldr	r0, [r7, #12]
    2126:	f000 fa45 	bl	25b4 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>
	      break;
    212a:	e004      	b.n	2136 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    212c:	4621      	mov	r1, r4
    212e:	68f8      	ldr	r0, [r7, #12]
    2130:	f000 fa55 	bl	25de <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    2134:	bf00      	nop
	  return false;
    2136:	2300      	movs	r3, #0
	}
    2138:	4618      	mov	r0, r3
    213a:	3718      	adds	r7, #24
    213c:	46bd      	mov	sp, r7
    213e:	bdb0      	pop	{r4, r5, r7, pc}

00002140 <unsigned long sjsu::bit::Insert<unsigned long, bool>(unsigned long, bool, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    2140:	b480      	push	{r7}
    2142:	b089      	sub	sp, #36	; 0x24
    2144:	af00      	add	r7, sp, #0
    2146:	60f8      	str	r0, [r7, #12]
    2148:	607a      	str	r2, [r7, #4]
    214a:	603b      	str	r3, [r7, #0]
    214c:	460b      	mov	r3, r1
    214e:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    2150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2154:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    2156:	2320      	movs	r3, #32
    2158:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    215a:	683b      	ldr	r3, [r7, #0]
    215c:	f1c3 0320 	rsb	r3, r3, #32
    2160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2164:	fa22 f303 	lsr.w	r3, r2, r3
    2168:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    216a:	697a      	ldr	r2, [r7, #20]
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	fa02 f303 	lsl.w	r3, r2, r3
    2172:	43db      	mvns	r3, r3
    2174:	68fa      	ldr	r2, [r7, #12]
    2176:	4013      	ands	r3, r2
    2178:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    217a:	7afa      	ldrb	r2, [r7, #11]
    217c:	697b      	ldr	r3, [r7, #20]
    217e:	401a      	ands	r2, r3
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	fa02 f303 	lsl.w	r3, r2, r3
    2186:	68fa      	ldr	r2, [r7, #12]
    2188:	4313      	orrs	r3, r2
    218a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    218c:	68fb      	ldr	r3, [r7, #12]
}
    218e:	4618      	mov	r0, r3
    2190:	3724      	adds	r7, #36	; 0x24
    2192:	46bd      	mov	sp, r7
    2194:	f85d 7b04 	ldr.w	r7, [sp], #4
    2198:	4770      	bx	lr

0000219a <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    219a:	b480      	push	{r7}
    219c:	b083      	sub	sp, #12
    219e:	af00      	add	r7, sp, #0
    21a0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2b00      	cmp	r3, #0
    21a6:	bf14      	ite	ne
    21a8:	2301      	movne	r3, #1
    21aa:	2300      	moveq	r3, #0
    21ac:	b2db      	uxtb	r3, r3
    21ae:	4618      	mov	r0, r3
    21b0:	370c      	adds	r7, #12
    21b2:	46bd      	mov	sp, r7
    21b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b8:	4770      	bx	lr

000021ba <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    21ba:	b480      	push	{r7}
    21bc:	b083      	sub	sp, #12
    21be:	af00      	add	r7, sp, #0
    21c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	4618      	mov	r0, r3
    21c6:	370c      	adds	r7, #12
    21c8:	46bd      	mov	sp, r7
    21ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ce:	4770      	bx	lr

000021d0 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    21d0:	b590      	push	{r4, r7, lr}
    21d2:	b085      	sub	sp, #20
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
    21d8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    21da:	6838      	ldr	r0, [r7, #0]
    21dc:	f7ff ffed 	bl	21ba <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    21e0:	4603      	mov	r3, r0
    21e2:	4622      	mov	r2, r4
    21e4:	4619      	mov	r1, r3
    21e6:	6878      	ldr	r0, [r7, #4]
    21e8:	f000 fa05 	bl	25f6 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    21ec:	bf00      	nop
    21ee:	3714      	adds	r7, #20
    21f0:	46bd      	mov	sp, r7
    21f2:	bd90      	pop	{r4, r7, pc}

000021f4 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    21f4:	b580      	push	{r7, lr}
    21f6:	b082      	sub	sp, #8
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    21fc:	6878      	ldr	r0, [r7, #4]
    21fe:	f000 fa13 	bl	2628 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2202:	4603      	mov	r3, r0
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	4798      	blx	r3
      }
    2208:	bf00      	nop
    220a:	3708      	adds	r7, #8
    220c:	46bd      	mov	sp, r7
    220e:	bd80      	pop	{r7, pc}

00002210 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2210:	b5b0      	push	{r4, r5, r7, lr}
    2212:	b086      	sub	sp, #24
    2214:	af00      	add	r7, sp, #0
    2216:	60f8      	str	r0, [r7, #12]
    2218:	60b9      	str	r1, [r7, #8]
    221a:	4613      	mov	r3, r2
    221c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    221e:	79fb      	ldrb	r3, [r7, #7]
    2220:	2b03      	cmp	r3, #3
    2222:	d016      	beq.n	2252 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    2224:	2b03      	cmp	r3, #3
    2226:	dc19      	bgt.n	225c <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    2228:	2b01      	cmp	r3, #1
    222a:	d002      	beq.n	2232 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    222c:	2b02      	cmp	r3, #2
    222e:	d00a      	beq.n	2246 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    2230:	e014      	b.n	225c <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    2232:	68b8      	ldr	r0, [r7, #8]
    2234:	f000 f9f8 	bl	2628 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    2238:	4604      	mov	r4, r0
    223a:	68f8      	ldr	r0, [r7, #12]
    223c:	f000 fa04 	bl	2648 <void (**&std::_Any_data::_M_access<void (**)()>())()>
    2240:	4603      	mov	r3, r0
    2242:	601c      	str	r4, [r3, #0]
	      break;
    2244:	e00a      	b.n	225c <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    2246:	462a      	mov	r2, r5
    2248:	68b9      	ldr	r1, [r7, #8]
    224a:	68f8      	ldr	r0, [r7, #12]
    224c:	f000 fa08 	bl	2660 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    2250:	e004      	b.n	225c <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    2252:	4621      	mov	r1, r4
    2254:	68f8      	ldr	r0, [r7, #12]
    2256:	f000 fa1c 	bl	2692 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    225a:	bf00      	nop
	  return false;
    225c:	2300      	movs	r3, #0
	}
    225e:	4618      	mov	r0, r3
    2260:	3718      	adds	r7, #24
    2262:	46bd      	mov	sp, r7
    2264:	bdb0      	pop	{r4, r5, r7, pc}

00002266 <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    2266:	b580      	push	{r7, lr}
    2268:	b082      	sub	sp, #8
    226a:	af00      	add	r7, sp, #0
    226c:	6078      	str	r0, [r7, #4]
    226e:	6039      	str	r1, [r7, #0]
    : _Function_base()
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	4618      	mov	r0, r3
    2274:	f7fe f8a8 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    2278:	6838      	ldr	r0, [r7, #0]
    227a:	f000 fa16 	bl	26aa <std::function<void ()>::operator bool() const>
    227e:	4603      	mov	r3, r0
    2280:	2b00      	cmp	r3, #0
    2282:	d00d      	beq.n	22a0 <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    2284:	683b      	ldr	r3, [r7, #0]
    2286:	689b      	ldr	r3, [r3, #8]
    2288:	6878      	ldr	r0, [r7, #4]
    228a:	6839      	ldr	r1, [r7, #0]
    228c:	2202      	movs	r2, #2
    228e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    2290:	683b      	ldr	r3, [r7, #0]
    2292:	68da      	ldr	r2, [r3, #12]
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    2298:	683b      	ldr	r3, [r7, #0]
    229a:	689a      	ldr	r2, [r3, #8]
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	609a      	str	r2, [r3, #8]
    }
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	4618      	mov	r0, r3
    22a4:	3708      	adds	r7, #8
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}

000022aa <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    22aa:	b580      	push	{r7, lr}
    22ac:	b082      	sub	sp, #8
    22ae:	af00      	add	r7, sp, #0
    22b0:	6078      	str	r0, [r7, #4]
    22b2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	683a      	ldr	r2, [r7, #0]
    22b8:	4611      	mov	r1, r2
    22ba:	4618      	mov	r0, r3
    22bc:	f000 f8f8 	bl	24b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	f103 0208 	add.w	r2, r3, #8
    22c6:	683b      	ldr	r3, [r7, #0]
    22c8:	3308      	adds	r3, #8
    22ca:	4619      	mov	r1, r3
    22cc:	4610      	mov	r0, r2
    22ce:	f000 f921 	bl	2514 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	f103 020c 	add.w	r2, r3, #12
    22d8:	683b      	ldr	r3, [r7, #0]
    22da:	330c      	adds	r3, #12
    22dc:	4619      	mov	r1, r3
    22de:	4610      	mov	r0, r2
    22e0:	f000 f9fe 	bl	26e0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    22e4:	bf00      	nop
    22e6:	3708      	adds	r7, #8
    22e8:	46bd      	mov	sp, r7
    22ea:	bd80      	pop	{r7, pc}

000022ec <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    22ec:	b580      	push	{r7, lr}
    22ee:	b084      	sub	sp, #16
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    22f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    22f8:	f04f 0300 	mov.w	r3, #0
    22fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    2300:	f107 0308 	add.w	r3, r7, #8
    2304:	4619      	mov	r1, r3
    2306:	6878      	ldr	r0, [r7, #4]
    2308:	f7fe fa1c 	bl	744 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    230c:	6878      	ldr	r0, [r7, #4]
    230e:	3710      	adds	r7, #16
    2310:	46bd      	mov	sp, r7
    2312:	bd80      	pop	{r7, pc}

00002314 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	6839      	ldr	r1, [r7, #0]
    2322:	4618      	mov	r0, r3
    2324:	f000 fa09 	bl	273a <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2328:	bf00      	nop
      }
    232a:	6878      	ldr	r0, [r7, #4]
    232c:	3708      	adds	r7, #8
    232e:	46bd      	mov	sp, r7
    2330:	bd80      	pop	{r7, pc}

00002332 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    2332:	b480      	push	{r7}
    2334:	b083      	sub	sp, #12
    2336:	af00      	add	r7, sp, #0
    2338:	6078      	str	r0, [r7, #4]
    233a:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    233c:	683b      	ldr	r3, [r7, #0]
    233e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2342:	6879      	ldr	r1, [r7, #4]
    2344:	e9c1 2300 	strd	r2, r3, [r1]
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	4618      	mov	r0, r3
    234c:	370c      	adds	r7, #12
    234e:	46bd      	mov	sp, r7
    2350:	f85d 7b04 	ldr.w	r7, [sp], #4
    2354:	4770      	bx	lr

00002356 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    2356:	b480      	push	{r7}
    2358:	b083      	sub	sp, #12
    235a:	af00      	add	r7, sp, #0
    235c:	6078      	str	r0, [r7, #4]
	{ return __r; }
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	e9d3 2300 	ldrd	r2, r3, [r3]
    2364:	4610      	mov	r0, r2
    2366:	4619      	mov	r1, r3
    2368:	370c      	adds	r7, #12
    236a:	46bd      	mov	sp, r7
    236c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2370:	4770      	bx	lr

00002372 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2372:	b5b0      	push	{r4, r5, r7, lr}
    2374:	b084      	sub	sp, #16
    2376:	af00      	add	r7, sp, #0
    2378:	6078      	str	r0, [r7, #4]
    237a:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    237c:	6838      	ldr	r0, [r7, #0]
    237e:	f7ff ffea 	bl	2356 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2382:	4602      	mov	r2, r0
    2384:	460b      	mov	r3, r1
    2386:	f04f 0400 	mov.w	r4, #0
    238a:	f04f 0500 	mov.w	r5, #0
    238e:	015d      	lsls	r5, r3, #5
    2390:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    2394:	0154      	lsls	r4, r2, #5
    2396:	4622      	mov	r2, r4
    2398:	462b      	mov	r3, r5
    239a:	1a12      	subs	r2, r2, r0
    239c:	eb63 0301 	sbc.w	r3, r3, r1
    23a0:	f04f 0400 	mov.w	r4, #0
    23a4:	f04f 0500 	mov.w	r5, #0
    23a8:	009d      	lsls	r5, r3, #2
    23aa:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    23ae:	0094      	lsls	r4, r2, #2
    23b0:	4622      	mov	r2, r4
    23b2:	462b      	mov	r3, r5
    23b4:	1812      	adds	r2, r2, r0
    23b6:	eb41 0303 	adc.w	r3, r1, r3
    23ba:	f04f 0000 	mov.w	r0, #0
    23be:	f04f 0100 	mov.w	r1, #0
    23c2:	00d9      	lsls	r1, r3, #3
    23c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    23c8:	00d0      	lsls	r0, r2, #3
    23ca:	4602      	mov	r2, r0
    23cc:	460b      	mov	r3, r1
    23ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    23d2:	f107 0308 	add.w	r3, r7, #8
    23d6:	4619      	mov	r1, r3
    23d8:	6878      	ldr	r0, [r7, #4]
    23da:	f7fe f9a1 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    23de:	6878      	ldr	r0, [r7, #4]
    23e0:	3710      	adds	r7, #16
    23e2:	46bd      	mov	sp, r7
    23e4:	bdb0      	pop	{r4, r5, r7, pc}

000023e6 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    23e6:	b590      	push	{r4, r7, lr}
    23e8:	b085      	sub	sp, #20
    23ea:	af00      	add	r7, sp, #0
    23ec:	60f8      	str	r0, [r7, #12]
    23ee:	60b9      	str	r1, [r7, #8]
    23f0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    23f2:	68b8      	ldr	r0, [r7, #8]
    23f4:	f7ff fdde 	bl	1fb4 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    23f8:	4603      	mov	r3, r0
    23fa:	681c      	ldr	r4, [r3, #0]
    23fc:	68f8      	ldr	r0, [r7, #12]
    23fe:	f7fd ffcd 	bl	39c <std::_Any_data::_M_access()>
    2402:	4603      	mov	r3, r0
    2404:	4619      	mov	r1, r3
    2406:	2004      	movs	r0, #4
    2408:	f7fd ffb0 	bl	36c <operator new(unsigned int, void*)>
    240c:	4603      	mov	r3, r0
    240e:	601c      	str	r4, [r3, #0]
    2410:	bf00      	nop
    2412:	3714      	adds	r7, #20
    2414:	46bd      	mov	sp, r7
    2416:	bd90      	pop	{r4, r7, pc}

00002418 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2418:	b580      	push	{r7, lr}
    241a:	b084      	sub	sp, #16
    241c:	af00      	add	r7, sp, #0
    241e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2420:	6878      	ldr	r0, [r7, #4]
    2422:	f000 f9cd 	bl	27c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2426:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2428:	68f8      	ldr	r0, [r7, #12]
    242a:	f000 f9d5 	bl	27d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    242e:	4603      	mov	r3, r0
	}
    2430:	4618      	mov	r0, r3
    2432:	3710      	adds	r7, #16
    2434:	46bd      	mov	sp, r7
    2436:	bd80      	pop	{r7, pc}

00002438 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2440:	6878      	ldr	r0, [r7, #4]
    2442:	f7fd ffab 	bl	39c <std::_Any_data::_M_access()>
    2446:	4603      	mov	r3, r0
    2448:	4618      	mov	r0, r3
    244a:	3708      	adds	r7, #8
    244c:	46bd      	mov	sp, r7
    244e:	bd80      	pop	{r7, pc}

00002450 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2450:	b590      	push	{r4, r7, lr}
    2452:	b085      	sub	sp, #20
    2454:	af00      	add	r7, sp, #0
    2456:	60f8      	str	r0, [r7, #12]
    2458:	60b9      	str	r1, [r7, #8]
    245a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    245c:	68b8      	ldr	r0, [r7, #8]
    245e:	f000 f9af 	bl	27c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    2462:	4603      	mov	r3, r0
    2464:	681c      	ldr	r4, [r3, #0]
    2466:	68f8      	ldr	r0, [r7, #12]
    2468:	f7fd ff98 	bl	39c <std::_Any_data::_M_access()>
    246c:	4603      	mov	r3, r0
    246e:	4619      	mov	r1, r3
    2470:	2004      	movs	r0, #4
    2472:	f7fd ff7b 	bl	36c <operator new(unsigned int, void*)>
    2476:	4603      	mov	r3, r0
    2478:	601c      	str	r4, [r3, #0]
	}
    247a:	bf00      	nop
    247c:	3714      	adds	r7, #20
    247e:	46bd      	mov	sp, r7
    2480:	bd90      	pop	{r4, r7, pc}

00002482 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2482:	b580      	push	{r7, lr}
    2484:	b082      	sub	sp, #8
    2486:	af00      	add	r7, sp, #0
    2488:	6078      	str	r0, [r7, #4]
    248a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    248c:	6878      	ldr	r0, [r7, #4]
    248e:	f000 f9ae 	bl	27ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    2492:	bf00      	nop
    2494:	3708      	adds	r7, #8
    2496:	46bd      	mov	sp, r7
    2498:	bd80      	pop	{r7, pc}

0000249a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    249a:	b480      	push	{r7}
    249c:	b083      	sub	sp, #12
    249e:	af00      	add	r7, sp, #0
    24a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	4618      	mov	r0, r3
    24a6:	370c      	adds	r7, #12
    24a8:	46bd      	mov	sp, r7
    24aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ae:	4770      	bx	lr

000024b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    24b0:	b580      	push	{r7, lr}
    24b2:	b084      	sub	sp, #16
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
    24b8:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    24ba:	6878      	ldr	r0, [r7, #4]
    24bc:	f7ff ffed 	bl	249a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    24c0:	4602      	mov	r2, r0
    24c2:	f107 0308 	add.w	r3, r7, #8
    24c6:	e892 0003 	ldmia.w	r2, {r0, r1}
    24ca:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    24ce:	6838      	ldr	r0, [r7, #0]
    24d0:	f7ff ffe3 	bl	249a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    24d4:	4602      	mov	r2, r0
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    24dc:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    24e0:	f107 0308 	add.w	r3, r7, #8
    24e4:	4618      	mov	r0, r3
    24e6:	f7ff ffd8 	bl	249a <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    24ea:	4602      	mov	r2, r0
    24ec:	683b      	ldr	r3, [r7, #0]
    24ee:	e892 0003 	ldmia.w	r2, {r0, r1}
    24f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    24f6:	bf00      	nop
    24f8:	3710      	adds	r7, #16
    24fa:	46bd      	mov	sp, r7
    24fc:	bd80      	pop	{r7, pc}

000024fe <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    24fe:	b480      	push	{r7}
    2500:	b083      	sub	sp, #12
    2502:	af00      	add	r7, sp, #0
    2504:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	4618      	mov	r0, r3
    250a:	370c      	adds	r7, #12
    250c:	46bd      	mov	sp, r7
    250e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2512:	4770      	bx	lr

00002514 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    2514:	b580      	push	{r7, lr}
    2516:	b084      	sub	sp, #16
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    251e:	6878      	ldr	r0, [r7, #4]
    2520:	f7ff ffed 	bl	24fe <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2524:	4603      	mov	r3, r0
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    252a:	6838      	ldr	r0, [r7, #0]
    252c:	f7ff ffe7 	bl	24fe <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2530:	4603      	mov	r3, r0
    2532:	681a      	ldr	r2, [r3, #0]
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2538:	f107 030c 	add.w	r3, r7, #12
    253c:	4618      	mov	r0, r3
    253e:	f7ff ffde 	bl	24fe <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    2542:	4603      	mov	r3, r0
    2544:	681a      	ldr	r2, [r3, #0]
    2546:	683b      	ldr	r3, [r7, #0]
    2548:	601a      	str	r2, [r3, #0]
    }
    254a:	bf00      	nop
    254c:	3710      	adds	r7, #16
    254e:	46bd      	mov	sp, r7
    2550:	bd80      	pop	{r7, pc}

00002552 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    2552:	b580      	push	{r7, lr}
    2554:	b084      	sub	sp, #16
    2556:	af00      	add	r7, sp, #0
    2558:	60f8      	str	r0, [r7, #12]
    255a:	60b9      	str	r1, [r7, #8]
    255c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    255e:	68b8      	ldr	r0, [r7, #8]
    2560:	f7ff fd96 	bl	2090 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    2564:	68f8      	ldr	r0, [r7, #12]
    2566:	f7fd ff19 	bl	39c <std::_Any_data::_M_access()>
    256a:	4603      	mov	r3, r0
    256c:	4619      	mov	r1, r3
    256e:	2001      	movs	r0, #1
    2570:	f7fd fefc 	bl	36c <operator new(unsigned int, void*)>
    2574:	bf00      	nop
    2576:	3710      	adds	r7, #16
    2578:	46bd      	mov	sp, r7
    257a:	bd80      	pop	{r7, pc}

0000257c <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    257c:	b580      	push	{r7, lr}
    257e:	b084      	sub	sp, #16
    2580:	af00      	add	r7, sp, #0
    2582:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2584:	6878      	ldr	r0, [r7, #4]
    2586:	f000 f93e 	bl	2806 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    258a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    258c:	68f8      	ldr	r0, [r7, #12]
    258e:	f000 f946 	bl	281e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>
    2592:	4603      	mov	r3, r0
	}
    2594:	4618      	mov	r0, r3
    2596:	3710      	adds	r7, #16
    2598:	46bd      	mov	sp, r7
    259a:	bd80      	pop	{r7, pc}

0000259c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>:
      _M_access()
    259c:	b580      	push	{r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    25a4:	6878      	ldr	r0, [r7, #4]
    25a6:	f7fd fef9 	bl	39c <std::_Any_data::_M_access()>
    25aa:	4603      	mov	r3, r0
    25ac:	4618      	mov	r0, r3
    25ae:	3708      	adds	r7, #8
    25b0:	46bd      	mov	sp, r7
    25b2:	bd80      	pop	{r7, pc}

000025b4 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    25b4:	b580      	push	{r7, lr}
    25b6:	b084      	sub	sp, #16
    25b8:	af00      	add	r7, sp, #0
    25ba:	60f8      	str	r0, [r7, #12]
    25bc:	60b9      	str	r1, [r7, #8]
    25be:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    25c0:	68b8      	ldr	r0, [r7, #8]
    25c2:	f000 f920 	bl	2806 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    25c6:	68f8      	ldr	r0, [r7, #12]
    25c8:	f7fd fee8 	bl	39c <std::_Any_data::_M_access()>
    25cc:	4603      	mov	r3, r0
    25ce:	4619      	mov	r1, r3
    25d0:	2001      	movs	r0, #1
    25d2:	f7fd fecb 	bl	36c <operator new(unsigned int, void*)>
	}
    25d6:	bf00      	nop
    25d8:	3710      	adds	r7, #16
    25da:	46bd      	mov	sp, r7
    25dc:	bd80      	pop	{r7, pc}

000025de <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    25de:	b580      	push	{r7, lr}
    25e0:	b082      	sub	sp, #8
    25e2:	af00      	add	r7, sp, #0
    25e4:	6078      	str	r0, [r7, #4]
    25e6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    25e8:	6878      	ldr	r0, [r7, #4]
    25ea:	f000 f923 	bl	2834 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>
	}
    25ee:	bf00      	nop
    25f0:	3708      	adds	r7, #8
    25f2:	46bd      	mov	sp, r7
    25f4:	bd80      	pop	{r7, pc}

000025f6 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    25f6:	b590      	push	{r4, r7, lr}
    25f8:	b085      	sub	sp, #20
    25fa:	af00      	add	r7, sp, #0
    25fc:	60f8      	str	r0, [r7, #12]
    25fe:	60b9      	str	r1, [r7, #8]
    2600:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    2602:	68b8      	ldr	r0, [r7, #8]
    2604:	f7ff fdd9 	bl	21ba <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    2608:	4603      	mov	r3, r0
    260a:	681c      	ldr	r4, [r3, #0]
    260c:	68f8      	ldr	r0, [r7, #12]
    260e:	f7fd fec5 	bl	39c <std::_Any_data::_M_access()>
    2612:	4603      	mov	r3, r0
    2614:	4619      	mov	r1, r3
    2616:	2004      	movs	r0, #4
    2618:	f7fd fea8 	bl	36c <operator new(unsigned int, void*)>
    261c:	4603      	mov	r3, r0
    261e:	601c      	str	r4, [r3, #0]
    2620:	bf00      	nop
    2622:	3714      	adds	r7, #20
    2624:	46bd      	mov	sp, r7
    2626:	bd90      	pop	{r4, r7, pc}

00002628 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    2628:	b580      	push	{r7, lr}
    262a:	b084      	sub	sp, #16
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    2630:	6878      	ldr	r0, [r7, #4]
    2632:	f000 f90b 	bl	284c <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2636:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    2638:	68f8      	ldr	r0, [r7, #12]
    263a:	f000 f913 	bl	2864 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    263e:	4603      	mov	r3, r0
	}
    2640:	4618      	mov	r0, r3
    2642:	3710      	adds	r7, #16
    2644:	46bd      	mov	sp, r7
    2646:	bd80      	pop	{r7, pc}

00002648 <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    2648:	b580      	push	{r7, lr}
    264a:	b082      	sub	sp, #8
    264c:	af00      	add	r7, sp, #0
    264e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2650:	6878      	ldr	r0, [r7, #4]
    2652:	f7fd fea3 	bl	39c <std::_Any_data::_M_access()>
    2656:	4603      	mov	r3, r0
    2658:	4618      	mov	r0, r3
    265a:	3708      	adds	r7, #8
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}

00002660 <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    2660:	b590      	push	{r4, r7, lr}
    2662:	b085      	sub	sp, #20
    2664:	af00      	add	r7, sp, #0
    2666:	60f8      	str	r0, [r7, #12]
    2668:	60b9      	str	r1, [r7, #8]
    266a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    266c:	68b8      	ldr	r0, [r7, #8]
    266e:	f000 f8ed 	bl	284c <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    2672:	4603      	mov	r3, r0
    2674:	681c      	ldr	r4, [r3, #0]
    2676:	68f8      	ldr	r0, [r7, #12]
    2678:	f7fd fe90 	bl	39c <std::_Any_data::_M_access()>
    267c:	4603      	mov	r3, r0
    267e:	4619      	mov	r1, r3
    2680:	2004      	movs	r0, #4
    2682:	f7fd fe73 	bl	36c <operator new(unsigned int, void*)>
    2686:	4603      	mov	r3, r0
    2688:	601c      	str	r4, [r3, #0]
	}
    268a:	bf00      	nop
    268c:	3714      	adds	r7, #20
    268e:	46bd      	mov	sp, r7
    2690:	bd90      	pop	{r4, r7, pc}

00002692 <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    2692:	b580      	push	{r7, lr}
    2694:	b082      	sub	sp, #8
    2696:	af00      	add	r7, sp, #0
    2698:	6078      	str	r0, [r7, #4]
    269a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    269c:	6878      	ldr	r0, [r7, #4]
    269e:	f000 f8ec 	bl	287a <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    26a2:	bf00      	nop
    26a4:	3708      	adds	r7, #8
    26a6:	46bd      	mov	sp, r7
    26a8:	bd80      	pop	{r7, pc}

000026aa <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    26aa:	b580      	push	{r7, lr}
    26ac:	b082      	sub	sp, #8
    26ae:	af00      	add	r7, sp, #0
    26b0:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	4618      	mov	r0, r3
    26b6:	f7fd fea8 	bl	40a <std::_Function_base::_M_empty() const>
    26ba:	4603      	mov	r3, r0
    26bc:	f083 0301 	eor.w	r3, r3, #1
    26c0:	b2db      	uxtb	r3, r3
    26c2:	4618      	mov	r0, r3
    26c4:	3708      	adds	r7, #8
    26c6:	46bd      	mov	sp, r7
    26c8:	bd80      	pop	{r7, pc}

000026ca <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    26ca:	b480      	push	{r7}
    26cc:	b083      	sub	sp, #12
    26ce:	af00      	add	r7, sp, #0
    26d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	4618      	mov	r0, r3
    26d6:	370c      	adds	r7, #12
    26d8:	46bd      	mov	sp, r7
    26da:	f85d 7b04 	ldr.w	r7, [sp], #4
    26de:	4770      	bx	lr

000026e0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    26e0:	b580      	push	{r7, lr}
    26e2:	b084      	sub	sp, #16
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
    26e8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    26ea:	6878      	ldr	r0, [r7, #4]
    26ec:	f7ff ffed 	bl	26ca <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    26f0:	4603      	mov	r3, r0
    26f2:	681b      	ldr	r3, [r3, #0]
    26f4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    26f6:	6838      	ldr	r0, [r7, #0]
    26f8:	f7ff ffe7 	bl	26ca <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    26fc:	4603      	mov	r3, r0
    26fe:	681a      	ldr	r2, [r3, #0]
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    2704:	f107 030c 	add.w	r3, r7, #12
    2708:	4618      	mov	r0, r3
    270a:	f7ff ffde 	bl	26ca <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    270e:	4603      	mov	r3, r0
    2710:	681a      	ldr	r2, [r3, #0]
    2712:	683b      	ldr	r3, [r7, #0]
    2714:	601a      	str	r2, [r3, #0]
    }
    2716:	bf00      	nop
    2718:	3710      	adds	r7, #16
    271a:	46bd      	mov	sp, r7
    271c:	bd80      	pop	{r7, pc}

0000271e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    271e:	b480      	push	{r7}
    2720:	b083      	sub	sp, #12
    2722:	af00      	add	r7, sp, #0
    2724:	6078      	str	r0, [r7, #4]
	{ return __r; }
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	e9d3 2300 	ldrd	r2, r3, [r3]
    272c:	4610      	mov	r0, r2
    272e:	4619      	mov	r1, r3
    2730:	370c      	adds	r7, #12
    2732:	46bd      	mov	sp, r7
    2734:	f85d 7b04 	ldr.w	r7, [sp], #4
    2738:	4770      	bx	lr

0000273a <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    273a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    273e:	b084      	sub	sp, #16
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    2746:	6838      	ldr	r0, [r7, #0]
    2748:	f7ff ffe9 	bl	271e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    274c:	4604      	mov	r4, r0
    274e:	460d      	mov	r5, r1
    2750:	4622      	mov	r2, r4
    2752:	462b      	mov	r3, r5
    2754:	f04f 0000 	mov.w	r0, #0
    2758:	f04f 0100 	mov.w	r1, #0
    275c:	0159      	lsls	r1, r3, #5
    275e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    2762:	0150      	lsls	r0, r2, #5
    2764:	4602      	mov	r2, r0
    2766:	460b      	mov	r3, r1
    2768:	1b12      	subs	r2, r2, r4
    276a:	eb63 0305 	sbc.w	r3, r3, r5
    276e:	f04f 0000 	mov.w	r0, #0
    2772:	f04f 0100 	mov.w	r1, #0
    2776:	0259      	lsls	r1, r3, #9
    2778:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    277c:	0250      	lsls	r0, r2, #9
    277e:	4602      	mov	r2, r0
    2780:	460b      	mov	r3, r1
    2782:	1912      	adds	r2, r2, r4
    2784:	eb45 0303 	adc.w	r3, r5, r3
    2788:	f04f 0000 	mov.w	r0, #0
    278c:	f04f 0100 	mov.w	r1, #0
    2790:	0199      	lsls	r1, r3, #6
    2792:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    2796:	0190      	lsls	r0, r2, #6
    2798:	1a80      	subs	r0, r0, r2
    279a:	eb61 0103 	sbc.w	r1, r1, r3
    279e:	eb10 0804 	adds.w	r8, r0, r4
    27a2:	eb41 0905 	adc.w	r9, r1, r5
    27a6:	e9c7 8902 	strd	r8, r9, [r7, #8]
    27aa:	f107 0308 	add.w	r3, r7, #8
    27ae:	4619      	mov	r1, r3
    27b0:	6878      	ldr	r0, [r7, #4]
    27b2:	f7fd ffb5 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    27b6:	6878      	ldr	r0, [r7, #4]
    27b8:	3710      	adds	r7, #16
    27ba:	46bd      	mov	sp, r7
    27bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

000027c0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    27c0:	b580      	push	{r7, lr}
    27c2:	b082      	sub	sp, #8
    27c4:	af00      	add	r7, sp, #0
    27c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    27c8:	6878      	ldr	r0, [r7, #4]
    27ca:	f7fd fdf2 	bl	3b2 <std::_Any_data::_M_access() const>
    27ce:	4603      	mov	r3, r0
    27d0:	4618      	mov	r0, r3
    27d2:	3708      	adds	r7, #8
    27d4:	46bd      	mov	sp, r7
    27d6:	bd80      	pop	{r7, pc}

000027d8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    27d8:	b480      	push	{r7}
    27da:	b083      	sub	sp, #12
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	4618      	mov	r0, r3
    27e4:	370c      	adds	r7, #12
    27e6:	46bd      	mov	sp, r7
    27e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ec:	4770      	bx	lr

000027ee <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    27ee:	b580      	push	{r7, lr}
    27f0:	b082      	sub	sp, #8
    27f2:	af00      	add	r7, sp, #0
    27f4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    27f6:	6878      	ldr	r0, [r7, #4]
    27f8:	f7fd fdd0 	bl	39c <std::_Any_data::_M_access()>
    27fc:	4603      	mov	r3, r0
    27fe:	4618      	mov	r0, r3
    2800:	3708      	adds	r7, #8
    2802:	46bd      	mov	sp, r7
    2804:	bd80      	pop	{r7, pc}

00002806 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>:
      _M_access() const
    2806:	b580      	push	{r7, lr}
    2808:	b082      	sub	sp, #8
    280a:	af00      	add	r7, sp, #0
    280c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    280e:	6878      	ldr	r0, [r7, #4]
    2810:	f7fd fdcf 	bl	3b2 <std::_Any_data::_M_access() const>
    2814:	4603      	mov	r3, r0
    2816:	4618      	mov	r0, r3
    2818:	3708      	adds	r7, #8
    281a:	46bd      	mov	sp, r7
    281c:	bd80      	pop	{r7, pc}

0000281e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    281e:	b480      	push	{r7}
    2820:	b083      	sub	sp, #12
    2822:	af00      	add	r7, sp, #0
    2824:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	4618      	mov	r0, r3
    282a:	370c      	adds	r7, #12
    282c:	46bd      	mov	sp, r7
    282e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2832:	4770      	bx	lr

00002834 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>:
      _M_access()
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    283c:	6878      	ldr	r0, [r7, #4]
    283e:	f7fd fdad 	bl	39c <std::_Any_data::_M_access()>
    2842:	4603      	mov	r3, r0
    2844:	4618      	mov	r0, r3
    2846:	3708      	adds	r7, #8
    2848:	46bd      	mov	sp, r7
    284a:	bd80      	pop	{r7, pc}

0000284c <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    284c:	b580      	push	{r7, lr}
    284e:	b082      	sub	sp, #8
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    2854:	6878      	ldr	r0, [r7, #4]
    2856:	f7fd fdac 	bl	3b2 <std::_Any_data::_M_access() const>
    285a:	4603      	mov	r3, r0
    285c:	4618      	mov	r0, r3
    285e:	3708      	adds	r7, #8
    2860:	46bd      	mov	sp, r7
    2862:	bd80      	pop	{r7, pc}

00002864 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    2864:	b480      	push	{r7}
    2866:	b083      	sub	sp, #12
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	4618      	mov	r0, r3
    2870:	370c      	adds	r7, #12
    2872:	46bd      	mov	sp, r7
    2874:	f85d 7b04 	ldr.w	r7, [sp], #4
    2878:	4770      	bx	lr

0000287a <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    287a:	b580      	push	{r7, lr}
    287c:	b082      	sub	sp, #8
    287e:	af00      	add	r7, sp, #0
    2880:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    2882:	6878      	ldr	r0, [r7, #4]
    2884:	f7fd fd8a 	bl	39c <std::_Any_data::_M_access()>
    2888:	4603      	mov	r3, r0
    288a:	4618      	mov	r0, r3
    288c:	3708      	adds	r7, #8
    288e:	46bd      	mov	sp, r7
    2890:	bd80      	pop	{r7, pc}
    2892:	Address 0x0000000000002892 is out of bounds.


00002894 <__tcf_0>:
  inline static InterruptCallback handlers[kInterruptPorts][kPinCount];
    2894:	b590      	push	{r4, r7, lr}
    2896:	b083      	sub	sp, #12
    2898:	af00      	add	r7, sp, #0
    289a:	6078      	str	r0, [r7, #4]
    289c:	4c05      	ldr	r4, [pc, #20]	; (28b4 <__tcf_0+0x20>)
    289e:	4b06      	ldr	r3, [pc, #24]	; (28b8 <__tcf_0+0x24>)
    28a0:	429c      	cmp	r4, r3
    28a2:	d004      	beq.n	28ae <__tcf_0+0x1a>
    28a4:	3c10      	subs	r4, #16
    28a6:	4620      	mov	r0, r4
    28a8:	f7fe fb0f 	bl	eca <std::function<void ()>::~function()>
    28ac:	e7f7      	b.n	289e <__tcf_0+0xa>
    28ae:	370c      	adds	r7, #12
    28b0:	46bd      	mov	sp, r7
    28b2:	bd90      	pop	{r4, r7, pc}
    28b4:	10000544 	.word	0x10000544
    28b8:	10000144 	.word	0x10000144

000028bc <__static_initialization_and_destruction_0(int, int)>:
    28bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28c0:	b082      	sub	sp, #8
    28c2:	af00      	add	r7, sp, #0
    28c4:	6078      	str	r0, [r7, #4]
    28c6:	6039      	str	r1, [r7, #0]
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	2b01      	cmp	r3, #1
    28cc:	d16d      	bne.n	29aa <__static_initialization_and_destruction_0(int, int)+0xee>
    28ce:	683b      	ldr	r3, [r7, #0]
    28d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28d4:	4293      	cmp	r3, r2
    28d6:	d168      	bne.n	29aa <__static_initialization_and_destruction_0(int, int)+0xee>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    28d8:	4b36      	ldr	r3, [pc, #216]	; (29b4 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    28da:	681b      	ldr	r3, [r3, #0]
    28dc:	f003 0301 	and.w	r3, r3, #1
    28e0:	2b00      	cmp	r3, #0
    28e2:	d105      	bne.n	28f0 <__static_initialization_and_destruction_0(int, int)+0x34>
    28e4:	4b33      	ldr	r3, [pc, #204]	; (29b4 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    28e6:	2201      	movs	r2, #1
    28e8:	601a      	str	r2, [r3, #0]
    28ea:	4a33      	ldr	r2, [pc, #204]	; (29b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    28ec:	4b33      	ldr	r3, [pc, #204]	; (29bc <__static_initialization_and_destruction_0(int, int)+0x100>)
    28ee:	601a      	str	r2, [r3, #0]
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    28f0:	4b33      	ldr	r3, [pc, #204]	; (29c0 <__static_initialization_and_destruction_0(int, int)+0x104>)
    28f2:	681b      	ldr	r3, [r3, #0]
    28f4:	f003 0301 	and.w	r3, r3, #1
    28f8:	2b00      	cmp	r3, #0
    28fa:	d10b      	bne.n	2914 <__static_initialization_and_destruction_0(int, int)+0x58>
    28fc:	4b30      	ldr	r3, [pc, #192]	; (29c0 <__static_initialization_and_destruction_0(int, int)+0x104>)
    28fe:	2201      	movs	r2, #1
    2900:	601a      	str	r2, [r3, #0]
    2902:	4930      	ldr	r1, [pc, #192]	; (29c4 <__static_initialization_and_destruction_0(int, int)+0x108>)
    2904:	4830      	ldr	r0, [pc, #192]	; (29c8 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    2906:	f7ff f8fd 	bl	1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    290a:	4a30      	ldr	r2, [pc, #192]	; (29cc <__static_initialization_and_destruction_0(int, int)+0x110>)
    290c:	4930      	ldr	r1, [pc, #192]	; (29d0 <__static_initialization_and_destruction_0(int, int)+0x114>)
    290e:	482e      	ldr	r0, [pc, #184]	; (29c8 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    2910:	f003 fde2 	bl	64d8 <__aeabi_atexit>
  inline static volatile PinTable_t * function_map =
    2914:	4b2f      	ldr	r3, [pc, #188]	; (29d4 <__static_initialization_and_destruction_0(int, int)+0x118>)
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	f003 0301 	and.w	r3, r3, #1
    291c:	2b00      	cmp	r3, #0
    291e:	d106      	bne.n	292e <__static_initialization_and_destruction_0(int, int)+0x72>
    2920:	4b2c      	ldr	r3, [pc, #176]	; (29d4 <__static_initialization_and_destruction_0(int, int)+0x118>)
    2922:	2201      	movs	r2, #1
    2924:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINSEL0);
    2926:	4b24      	ldr	r3, [pc, #144]	; (29b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    2928:	461a      	mov	r2, r3
  inline static volatile PinTable_t * function_map =
    292a:	4b2b      	ldr	r3, [pc, #172]	; (29d8 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    292c:	601a      	str	r2, [r3, #0]
  inline static volatile PinTable_t * resistor_map =
    292e:	4b2b      	ldr	r3, [pc, #172]	; (29dc <__static_initialization_and_destruction_0(int, int)+0x120>)
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	f003 0301 	and.w	r3, r3, #1
    2936:	2b00      	cmp	r3, #0
    2938:	d106      	bne.n	2948 <__static_initialization_and_destruction_0(int, int)+0x8c>
    293a:	4b28      	ldr	r3, [pc, #160]	; (29dc <__static_initialization_and_destruction_0(int, int)+0x120>)
    293c:	2201      	movs	r2, #1
    293e:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE0);
    2940:	4b1d      	ldr	r3, [pc, #116]	; (29b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    2942:	3340      	adds	r3, #64	; 0x40
  inline static volatile PinTable_t * resistor_map =
    2944:	4a26      	ldr	r2, [pc, #152]	; (29e0 <__static_initialization_and_destruction_0(int, int)+0x124>)
    2946:	6013      	str	r3, [r2, #0]
  inline static volatile PinTable_t * open_drain_map =
    2948:	4b26      	ldr	r3, [pc, #152]	; (29e4 <__static_initialization_and_destruction_0(int, int)+0x128>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	f003 0301 	and.w	r3, r3, #1
    2950:	2b00      	cmp	r3, #0
    2952:	d106      	bne.n	2962 <__static_initialization_and_destruction_0(int, int)+0xa6>
    2954:	4b23      	ldr	r3, [pc, #140]	; (29e4 <__static_initialization_and_destruction_0(int, int)+0x128>)
    2956:	2201      	movs	r2, #1
    2958:	601a      	str	r2, [r3, #0]
      reinterpret_cast<volatile PinTable_t *>(&LPC_PINCON->PINMODE_OD0);
    295a:	4b17      	ldr	r3, [pc, #92]	; (29b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    295c:	3368      	adds	r3, #104	; 0x68
  inline static volatile PinTable_t * open_drain_map =
    295e:	4a22      	ldr	r2, [pc, #136]	; (29e8 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    2960:	6013      	str	r3, [r2, #0]
    2962:	4b22      	ldr	r3, [pc, #136]	; (29ec <__static_initialization_and_destruction_0(int, int)+0x130>)
    2964:	681b      	ldr	r3, [r3, #0]
    2966:	f003 0301 	and.w	r3, r3, #1
    296a:	2b00      	cmp	r3, #0
    296c:	d11a      	bne.n	29a4 <__static_initialization_and_destruction_0(int, int)+0xe8>
    296e:	4b1f      	ldr	r3, [pc, #124]	; (29ec <__static_initialization_and_destruction_0(int, int)+0x130>)
    2970:	2201      	movs	r2, #1
    2972:	601a      	str	r2, [r3, #0]
    2974:	4b1e      	ldr	r3, [pc, #120]	; (29f0 <__static_initialization_and_destruction_0(int, int)+0x134>)
    2976:	2401      	movs	r4, #1
    2978:	4698      	mov	r8, r3
    297a:	2c00      	cmp	r4, #0
    297c:	db0d      	blt.n	299a <__static_initialization_and_destruction_0(int, int)+0xde>
    297e:	4646      	mov	r6, r8
    2980:	251f      	movs	r5, #31
    2982:	2d00      	cmp	r5, #0
    2984:	db05      	blt.n	2992 <__static_initialization_and_destruction_0(int, int)+0xd6>
    2986:	4630      	mov	r0, r6
    2988:	f7ff f9cf 	bl	1d2a <std::function<void ()>::function()>
    298c:	3610      	adds	r6, #16
    298e:	3d01      	subs	r5, #1
    2990:	e7f7      	b.n	2982 <__static_initialization_and_destruction_0(int, int)+0xc6>
    2992:	f508 7800 	add.w	r8, r8, #512	; 0x200
    2996:	3c01      	subs	r4, #1
    2998:	e7ef      	b.n	297a <__static_initialization_and_destruction_0(int, int)+0xbe>
    299a:	4a0c      	ldr	r2, [pc, #48]	; (29cc <__static_initialization_and_destruction_0(int, int)+0x110>)
    299c:	4915      	ldr	r1, [pc, #84]	; (29f4 <__static_initialization_and_destruction_0(int, int)+0x138>)
    299e:	2000      	movs	r0, #0
    29a0:	f003 fd9a 	bl	64d8 <__aeabi_atexit>
Bus bus;
    29a4:	4814      	ldr	r0, [pc, #80]	; (29f8 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    29a6:	f7fe fd86 	bl	14b6 <Bus::Bus()>
}
    29aa:	bf00      	nop
    29ac:	3708      	adds	r7, #8
    29ae:	46bd      	mov	sp, r7
    29b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29b4:	1000074c 	.word	0x1000074c
    29b8:	4002c000 	.word	0x4002c000
    29bc:	10000118 	.word	0x10000118
    29c0:	10000750 	.word	0x10000750
    29c4:	000007d9 	.word	0x000007d9
    29c8:	10000128 	.word	0x10000128
    29cc:	10000000 	.word	0x10000000
    29d0:	00000821 	.word	0x00000821
    29d4:	10000754 	.word	0x10000754
    29d8:	10000138 	.word	0x10000138
    29dc:	10000758 	.word	0x10000758
    29e0:	1000013c 	.word	0x1000013c
    29e4:	1000075c 	.word	0x1000075c
    29e8:	10000140 	.word	0x10000140
    29ec:	10000760 	.word	0x10000760
    29f0:	10000144 	.word	0x10000144
    29f4:	00002895 	.word	0x00002895
    29f8:	1000058c 	.word	0x1000058c

000029fc <_GLOBAL__sub_I_bus>:
    29fc:	b580      	push	{r7, lr}
    29fe:	af00      	add	r7, sp, #0
    2a00:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a04:	2001      	movs	r0, #1
    2a06:	f7ff ff59 	bl	28bc <__static_initialization_and_destruction_0(int, int)>
    2a0a:	bd80      	pop	{r7, pc}

00002a0c <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b086      	sub	sp, #24
    2a10:	af02      	add	r7, sp, #8
    2a12:	6078      	str	r0, [r7, #4]
    2a14:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    2a16:	683a      	ldr	r2, [r7, #0]
    2a18:	f107 030c 	add.w	r3, r7, #12
    2a1c:	9300      	str	r3, [sp, #0]
    2a1e:	2300      	movs	r3, #0
    2a20:	2100      	movs	r1, #0
    2a22:	6878      	ldr	r0, [r7, #4]
    2a24:	f004 fa60 	bl	6ee8 <_Unwind_VRS_Get>
      return val;
    2a28:	68fb      	ldr	r3, [r7, #12]
    }
    2a2a:	4618      	mov	r0, r3
    2a2c:	3710      	adds	r7, #16
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd80      	pop	{r7, pc}
    2a32:	Address 0x0000000000002a32 is out of bounds.


00002a34 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    2a34:	b580      	push	{r7, lr}
    2a36:	b084      	sub	sp, #16
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
    2a3c:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    2a42:	210f      	movs	r1, #15
    2a44:	6878      	ldr	r0, [r7, #4]
    2a46:	f7ff ffe1 	bl	2a0c <_Unwind_GetGR>
    2a4a:	4603      	mov	r3, r0
    2a4c:	f023 0301 	bic.w	r3, r3, #1
    2a50:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    2a52:	68fb      	ldr	r3, [r7, #12]
    2a54:	6819      	ldr	r1, [r3, #0]
         address - config::kBacktraceAddressOffset);
    2a56:	68bb      	ldr	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    2a58:	3b04      	subs	r3, #4
    2a5a:	461a      	mov	r2, r3
    2a5c:	4806      	ldr	r0, [pc, #24]	; (2a78 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    2a5e:	f001 fbe5 	bl	422c <printf>
  (*depth)++;
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	681b      	ldr	r3, [r3, #0]
    2a66:	1c5a      	adds	r2, r3, #1
    2a68:	68fb      	ldr	r3, [r7, #12]
    2a6a:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    2a6c:	2300      	movs	r3, #0
}
    2a6e:	4618      	mov	r0, r3
    2a70:	3710      	adds	r7, #16
    2a72:	46bd      	mov	sp, r7
    2a74:	bd80      	pop	{r7, pc}
    2a76:	bf00      	nop
    2a78:	000083ac 	.word	0x000083ac

00002a7c <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b084      	sub	sp, #16
    2a80:	af00      	add	r7, sp, #0
    2a82:	6078      	str	r0, [r7, #4]
    2a84:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    2a86:	683b      	ldr	r3, [r7, #0]
    2a88:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    2a8a:	210f      	movs	r1, #15
    2a8c:	6878      	ldr	r0, [r7, #4]
    2a8e:	f7ff ffbd 	bl	2a0c <_Unwind_GetGR>
    2a92:	4603      	mov	r3, r0
    2a94:	f023 0301 	bic.w	r3, r3, #1
    2a98:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    2a9a:	68bb      	ldr	r3, [r7, #8]
    2a9c:	3b04      	subs	r3, #4
    2a9e:	4619      	mov	r1, r3
    2aa0:	4806      	ldr	r0, [pc, #24]	; (2abc <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    2aa2:	f001 fbc3 	bl	422c <printf>
  (*depth)++;
    2aa6:	68fb      	ldr	r3, [r7, #12]
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	1c5a      	adds	r2, r3, #1
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    2ab0:	2300      	movs	r3, #0
}
    2ab2:	4618      	mov	r0, r3
    2ab4:	3710      	adds	r7, #16
    2ab6:	46bd      	mov	sp, r7
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	bf00      	nop
    2abc:	000083bc 	.word	0x000083bc

00002ac0 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b084      	sub	sp, #16
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	4603      	mov	r3, r0
    2ac8:	6039      	str	r1, [r7, #0]
    2aca:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    2acc:	2300      	movs	r3, #0
    2ace:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    2ad0:	f107 030c 	add.w	r3, r7, #12
    2ad4:	4619      	mov	r1, r3
    2ad6:	4817      	ldr	r0, [pc, #92]	; (2b34 <sjsu::debug::PrintBacktrace(bool, void*)+0x74>)
    2ad8:	f004 fde4 	bl	76a4 <_Unwind_Backtrace>
    if (final_address)
    2adc:	683b      	ldr	r3, [r7, #0]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d005      	beq.n	2aee <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    2ae2:	68fb      	ldr	r3, [r7, #12]
    2ae4:	683a      	ldr	r2, [r7, #0]
    2ae6:	4619      	mov	r1, r3
    2ae8:	4813      	ldr	r0, [pc, #76]	; (2b38 <sjsu::debug::PrintBacktrace(bool, void*)+0x78>)
    2aea:	f001 fb9f 	bl	422c <printf>
    }

    if (show_make_command)
    2aee:	79fb      	ldrb	r3, [r7, #7]
    2af0:	2b00      	cmp	r3, #0
    2af2:	d01b      	beq.n	2b2c <sjsu::debug::PrintBacktrace(bool, void*)+0x6c>
    {
      printf("\nRun: the following command in your project directory");
    2af4:	4811      	ldr	r0, [pc, #68]	; (2b3c <sjsu::debug::PrintBacktrace(bool, void*)+0x7c>)
    2af6:	f001 fb99 	bl	422c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    2afa:	4811      	ldr	r0, [pc, #68]	; (2b40 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    2afc:	f001 fb96 	bl	422c <printf>
      printf("make stacktrace TRACES=\"");
    2b00:	4810      	ldr	r0, [pc, #64]	; (2b44 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    2b02:	f001 fb93 	bl	422c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    2b06:	f107 030c 	add.w	r3, r7, #12
    2b0a:	4619      	mov	r1, r3
    2b0c:	480e      	ldr	r0, [pc, #56]	; (2b48 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    2b0e:	f004 fdc9 	bl	76a4 <_Unwind_Backtrace>
      if (final_address)
    2b12:	683b      	ldr	r3, [r7, #0]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d003      	beq.n	2b20 <sjsu::debug::PrintBacktrace(bool, void*)+0x60>
      {
        printf("0x%p ", final_address);
    2b18:	6839      	ldr	r1, [r7, #0]
    2b1a:	480c      	ldr	r0, [pc, #48]	; (2b4c <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    2b1c:	f001 fb86 	bl	422c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    2b20:	480b      	ldr	r0, [pc, #44]	; (2b50 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    2b22:	f001 fb83 	bl	422c <printf>
      printf(
    2b26:	480b      	ldr	r0, [pc, #44]	; (2b54 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    2b28:	f000 fa3a 	bl	2fa0 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    2b2c:	bf00      	nop
    2b2e:	3710      	adds	r7, #16
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}
    2b34:	00002a35 	.word	0x00002a35
    2b38:	000083c4 	.word	0x000083c4
    2b3c:	000083d0 	.word	0x000083d0
    2b40:	00008408 	.word	0x00008408
    2b44:	00008414 	.word	0x00008414
    2b48:	00002a7d 	.word	0x00002a7d
    2b4c:	00008430 	.word	0x00008430
    2b50:	00008438 	.word	0x00008438
    2b54:	00008440 	.word	0x00008440

00002b58 <sjsu::Halt()>:
/// Halt system by putting it into infinite loop
inline void Halt()
{
    2b58:	b480      	push	{r7}
    2b5a:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    2b5c:	bf00      	nop
  while (true)
    2b5e:	e7fd      	b.n	2b5c <sjsu::Halt()+0x4>

00002b60 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    2b60:	b580      	push	{r7, lr}
    2b62:	b082      	sub	sp, #8
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
    2b68:	6039      	str	r1, [r7, #0]
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	2b01      	cmp	r3, #1
    2b6e:	d116      	bne.n	2b9e <__static_initialization_and_destruction_0(int, int)+0x3e>
    2b70:	683b      	ldr	r3, [r7, #0]
    2b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b76:	4293      	cmp	r3, r2
    2b78:	d111      	bne.n	2b9e <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    2b7a:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	f003 0301 	and.w	r3, r3, #1
    2b82:	2b00      	cmp	r3, #0
    2b84:	d10b      	bne.n	2b9e <__static_initialization_and_destruction_0(int, int)+0x3e>
    2b86:	4b08      	ldr	r3, [pc, #32]	; (2ba8 <__static_initialization_and_destruction_0(int, int)+0x48>)
    2b88:	2201      	movs	r2, #1
    2b8a:	601a      	str	r2, [r3, #0]
    2b8c:	4907      	ldr	r1, [pc, #28]	; (2bac <__static_initialization_and_destruction_0(int, int)+0x4c>)
    2b8e:	4808      	ldr	r0, [pc, #32]	; (2bb0 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2b90:	f7fe ffb8 	bl	1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2b94:	4a07      	ldr	r2, [pc, #28]	; (2bb4 <__static_initialization_and_destruction_0(int, int)+0x54>)
    2b96:	4908      	ldr	r1, [pc, #32]	; (2bb8 <__static_initialization_and_destruction_0(int, int)+0x58>)
    2b98:	4805      	ldr	r0, [pc, #20]	; (2bb0 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2b9a:	f003 fc9d 	bl	64d8 <__aeabi_atexit>
    2b9e:	bf00      	nop
    2ba0:	3708      	adds	r7, #8
    2ba2:	46bd      	mov	sp, r7
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	bf00      	nop
    2ba8:	10000750 	.word	0x10000750
    2bac:	000007d9 	.word	0x000007d9
    2bb0:	10000128 	.word	0x10000128
    2bb4:	10000000 	.word	0x10000000
    2bb8:	00000821 	.word	0x00000821

00002bbc <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    2bbc:	b580      	push	{r7, lr}
    2bbe:	af00      	add	r7, sp, #0
    2bc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2bc4:	2001      	movs	r0, #1
    2bc6:	f7ff ffcb 	bl	2b60 <__static_initialization_and_destruction_0(int, int)>
    2bca:	bd80      	pop	{r7, pc}

00002bcc <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    2bcc:	b480      	push	{r7}
    2bce:	b087      	sub	sp, #28
    2bd0:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2bd2:	2300      	movs	r3, #0
    2bd4:	617b      	str	r3, [r7, #20]
    2bd6:	697a      	ldr	r2, [r7, #20]
    2bd8:	4613      	mov	r3, r2
    2bda:	005b      	lsls	r3, r3, #1
    2bdc:	4413      	add	r3, r2
    2bde:	009b      	lsls	r3, r3, #2
    2be0:	4a1f      	ldr	r2, [pc, #124]	; (2c60 <sjsu::InitializeDataSection()+0x94>)
    2be2:	4413      	add	r3, r2
    2be4:	4a1f      	ldr	r2, [pc, #124]	; (2c64 <sjsu::InitializeDataSection()+0x98>)
    2be6:	4293      	cmp	r3, r2
    2be8:	d233      	bcs.n	2c52 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    2bea:	491d      	ldr	r1, [pc, #116]	; (2c60 <sjsu::InitializeDataSection()+0x94>)
    2bec:	697a      	ldr	r2, [r7, #20]
    2bee:	4613      	mov	r3, r2
    2bf0:	005b      	lsls	r3, r3, #1
    2bf2:	4413      	add	r3, r2
    2bf4:	009b      	lsls	r3, r3, #2
    2bf6:	440b      	add	r3, r1
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    2bfc:	4918      	ldr	r1, [pc, #96]	; (2c60 <sjsu::InitializeDataSection()+0x94>)
    2bfe:	697a      	ldr	r2, [r7, #20]
    2c00:	4613      	mov	r3, r2
    2c02:	005b      	lsls	r3, r3, #1
    2c04:	4413      	add	r3, r2
    2c06:	009b      	lsls	r3, r3, #2
    2c08:	440b      	add	r3, r1
    2c0a:	685b      	ldr	r3, [r3, #4]
    2c0c:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    2c0e:	4914      	ldr	r1, [pc, #80]	; (2c60 <sjsu::InitializeDataSection()+0x94>)
    2c10:	697a      	ldr	r2, [r7, #20]
    2c12:	4613      	mov	r3, r2
    2c14:	005b      	lsls	r3, r3, #1
    2c16:	4413      	add	r3, r2
    2c18:	009b      	lsls	r3, r3, #2
    2c1a:	440b      	add	r3, r1
    2c1c:	3308      	adds	r3, #8
    2c1e:	681b      	ldr	r3, [r3, #0]
    2c20:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    2c22:	2300      	movs	r3, #0
    2c24:	613b      	str	r3, [r7, #16]
    2c26:	693a      	ldr	r2, [r7, #16]
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	429a      	cmp	r2, r3
    2c2c:	d20d      	bcs.n	2c4a <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    2c2e:	693b      	ldr	r3, [r7, #16]
    2c30:	009b      	lsls	r3, r3, #2
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	441a      	add	r2, r3
    2c36:	693b      	ldr	r3, [r7, #16]
    2c38:	009b      	lsls	r3, r3, #2
    2c3a:	68b9      	ldr	r1, [r7, #8]
    2c3c:	440b      	add	r3, r1
    2c3e:	6812      	ldr	r2, [r2, #0]
    2c40:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2c42:	693b      	ldr	r3, [r7, #16]
    2c44:	3301      	adds	r3, #1
    2c46:	613b      	str	r3, [r7, #16]
    2c48:	e7ed      	b.n	2c26 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    2c4a:	697b      	ldr	r3, [r7, #20]
    2c4c:	3301      	adds	r3, #1
    2c4e:	617b      	str	r3, [r7, #20]
    2c50:	e7c1      	b.n	2bd6 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    2c52:	bf00      	nop
    2c54:	371c      	adds	r7, #28
    2c56:	46bd      	mov	sp, r7
    2c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop
    2c60:	000000e4 	.word	0x000000e4
    2c64:	000000fc 	.word	0x000000fc

00002c68 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    2c68:	b480      	push	{r7}
    2c6a:	b085      	sub	sp, #20
    2c6c:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2c6e:	2300      	movs	r3, #0
    2c70:	60fb      	str	r3, [r7, #12]
    2c72:	68fb      	ldr	r3, [r7, #12]
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4a15      	ldr	r2, [pc, #84]	; (2ccc <sjsu::InitializeBssSection()+0x64>)
    2c78:	4413      	add	r3, r2
    2c7a:	4a15      	ldr	r2, [pc, #84]	; (2cd0 <sjsu::InitializeBssSection()+0x68>)
    2c7c:	4293      	cmp	r3, r2
    2c7e:	d21e      	bcs.n	2cbe <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    2c80:	4a12      	ldr	r2, [pc, #72]	; (2ccc <sjsu::InitializeBssSection()+0x64>)
    2c82:	68fb      	ldr	r3, [r7, #12]
    2c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c88:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    2c8a:	4a10      	ldr	r2, [pc, #64]	; (2ccc <sjsu::InitializeBssSection()+0x64>)
    2c8c:	68fb      	ldr	r3, [r7, #12]
    2c8e:	00db      	lsls	r3, r3, #3
    2c90:	4413      	add	r3, r2
    2c92:	685b      	ldr	r3, [r3, #4]
    2c94:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    2c96:	2300      	movs	r3, #0
    2c98:	60bb      	str	r3, [r7, #8]
    2c9a:	68ba      	ldr	r2, [r7, #8]
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	429a      	cmp	r2, r3
    2ca0:	d209      	bcs.n	2cb6 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	009b      	lsls	r3, r3, #2
    2ca6:	687a      	ldr	r2, [r7, #4]
    2ca8:	4413      	add	r3, r2
    2caa:	2200      	movs	r2, #0
    2cac:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    2cae:	68bb      	ldr	r3, [r7, #8]
    2cb0:	3301      	adds	r3, #1
    2cb2:	60bb      	str	r3, [r7, #8]
    2cb4:	e7f1      	b.n	2c9a <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    2cb6:	68fb      	ldr	r3, [r7, #12]
    2cb8:	3301      	adds	r3, #1
    2cba:	60fb      	str	r3, [r7, #12]
    2cbc:	e7d9      	b.n	2c72 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    2cbe:	bf00      	nop
    2cc0:	3714      	adds	r7, #20
    2cc2:	46bd      	mov	sp, r7
    2cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cc8:	4770      	bx	lr
    2cca:	bf00      	nop
    2ccc:	000000fc 	.word	0x000000fc
    2cd0:	0000010c 	.word	0x0000010c

00002cd4 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2cd8:	f7ff ff78 	bl	2bcc <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    2cdc:	f7ff ffc4 	bl	2c68 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    2ce0:	f004 feaa 	bl	7a38 <__libc_init_array>
}
    2ce4:	bf00      	nop
    2ce6:	bd80      	pop	{r7, pc}

00002ce8 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2ce8:	b580      	push	{r7, lr}
    2cea:	b08c      	sub	sp, #48	; 0x30
    2cec:	af02      	add	r7, sp, #8
    2cee:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	685b      	ldr	r3, [r3, #4]
    2cfa:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	689b      	ldr	r3, [r3, #8]
    2d00:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	68db      	ldr	r3, [r3, #12]
    2d06:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	691b      	ldr	r3, [r3, #16]
    2d0c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	695b      	ldr	r3, [r3, #20]
    2d12:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	699b      	ldr	r3, [r3, #24]
    2d18:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	69db      	ldr	r3, [r3, #28]
    2d1e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    2d20:	480f      	ldr	r0, [pc, #60]	; (2d60 <GetRegistersFromStack+0x78>)
    2d22:	f001 fa83 	bl	422c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2d28:	6a3a      	ldr	r2, [r7, #32]
    2d2a:	69f8      	ldr	r0, [r7, #28]
    2d2c:	69bb      	ldr	r3, [r7, #24]
    2d2e:	9300      	str	r3, [sp, #0]
    2d30:	4603      	mov	r3, r0
    2d32:	480c      	ldr	r0, [pc, #48]	; (2d64 <GetRegistersFromStack+0x7c>)
    2d34:	f001 fa7a 	bl	422c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2d38:	6979      	ldr	r1, [r7, #20]
    2d3a:	693a      	ldr	r2, [r7, #16]
    2d3c:	68f8      	ldr	r0, [r7, #12]
    2d3e:	68bb      	ldr	r3, [r7, #8]
    2d40:	9300      	str	r3, [sp, #0]
    2d42:	4603      	mov	r3, r0
    2d44:	4808      	ldr	r0, [pc, #32]	; (2d68 <GetRegistersFromStack+0x80>)
    2d46:	f001 fa71 	bl	422c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	4619      	mov	r1, r3
    2d4e:	2001      	movs	r0, #1
    2d50:	f7ff feb6 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    2d54:	f7ff ff00 	bl	2b58 <sjsu::Halt()>
  }
    2d58:	bf00      	nop
    2d5a:	3728      	adds	r7, #40	; 0x28
    2d5c:	46bd      	mov	sp, r7
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	00008b50 	.word	0x00008b50
    2d64:	00008b7c 	.word	0x00008b7c
    2d68:	00008bb0 	.word	0x00008bb0

00002d6c <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    2d6c:	b480      	push	{r7}
    2d6e:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    2d70:	f01e 0f04 	tst.w	lr, #4
    2d74:	bf0c      	ite	eq
    2d76:	f3ef 8008 	mrseq	r0, MSP
    2d7a:	f3ef 8009 	mrsne	r0, PSP
    2d7e:	6981      	ldr	r1, [r0, #24]
    2d80:	4a00      	ldr	r2, [pc, #0]	; (2d84 <handler2_address_const>)
    2d82:	4710      	bx	r2

00002d84 <handler2_address_const>:
    2d84:	00002ce9 	.word	0x00002ce9
    }
  }
    2d88:	bf00      	nop
    2d8a:	46bd      	mov	sp, r7
    2d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d90:	4770      	bx	lr
    2d92:	Address 0x0000000000002d92 is out of bounds.


00002d94 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    2d94:	b580      	push	{r7, lr}
    2d96:	b084      	sub	sp, #16
    2d98:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    2d9a:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <ArmResetHandler+0x70>)
    2d9c:	60fb      	str	r3, [r7, #12]
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	f383 8809 	msr	PSP, r3
}
    2da8:	bf00      	nop
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	f383 8808 	msr	MSP, r3
}
    2db4:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    2db6:	f7ff ff8d 	bl	2cd4 <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    2dba:	4b13      	ldr	r3, [pc, #76]	; (2e08 <ArmResetHandler+0x74>)
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	f003 0301 	and.w	r3, r3, #1
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	bf14      	ite	ne
    2dc6:	2301      	movne	r3, #1
    2dc8:	2300      	moveq	r3, #0
    2dca:	b2db      	uxtb	r3, r3
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d001      	beq.n	2dd4 <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    2dd0:	f001 fa4e 	bl	4270 <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    2dd4:	f002 fdbe 	bl	5954 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    2dd8:	f7fe fbe4 	bl	15a4 <main>
    2ddc:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    2dde:	68bb      	ldr	r3, [r7, #8]
    2de0:	2b00      	cmp	r3, #0
    2de2:	db04      	blt.n	2dee <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2de4:	68b9      	ldr	r1, [r7, #8]
    2de6:	4809      	ldr	r0, [pc, #36]	; (2e0c <ArmResetHandler+0x78>)
    2de8:	f001 fa20 	bl	422c <printf>
    2dec:	e003      	b.n	2df6 <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    2dee:	68b9      	ldr	r1, [r7, #8]
    2df0:	4807      	ldr	r0, [pc, #28]	; (2e10 <ArmResetHandler+0x7c>)
    2df2:	f001 fa1b 	bl	422c <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    2df6:	f7ff feaf 	bl	2b58 <sjsu::Halt()>
  }
    2dfa:	bf00      	nop
    2dfc:	3710      	adds	r7, #16
    2dfe:	46bd      	mov	sp, r7
    2e00:	bd80      	pop	{r7, pc}
    2e02:	bf00      	nop
    2e04:	10010000 	.word	0x10010000
    2e08:	e000edf0 	.word	0xe000edf0
    2e0c:	00008be8 	.word	0x00008be8
    2e10:	00008c1c 	.word	0x00008c1c

00002e14 <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    2e14:	b580      	push	{r7, lr}
    2e16:	b082      	sub	sp, #8
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	2b01      	cmp	r3, #1
    2e22:	d116      	bne.n	2e52 <__static_initialization_and_destruction_0(int, int)+0x3e>
    2e24:	683b      	ldr	r3, [r7, #0]
    2e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e2a:	4293      	cmp	r3, r2
    2e2c:	d111      	bne.n	2e52 <__static_initialization_and_destruction_0(int, int)+0x3e>
    2e2e:	4b0b      	ldr	r3, [pc, #44]	; (2e5c <__static_initialization_and_destruction_0(int, int)+0x48>)
    2e30:	681b      	ldr	r3, [r3, #0]
    2e32:	f003 0301 	and.w	r3, r3, #1
    2e36:	2b00      	cmp	r3, #0
    2e38:	d10b      	bne.n	2e52 <__static_initialization_and_destruction_0(int, int)+0x3e>
    2e3a:	4b08      	ldr	r3, [pc, #32]	; (2e5c <__static_initialization_and_destruction_0(int, int)+0x48>)
    2e3c:	2201      	movs	r2, #1
    2e3e:	601a      	str	r2, [r3, #0]
    2e40:	4907      	ldr	r1, [pc, #28]	; (2e60 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    2e42:	4808      	ldr	r0, [pc, #32]	; (2e64 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2e44:	f7fe fe5e 	bl	1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2e48:	4a07      	ldr	r2, [pc, #28]	; (2e68 <__static_initialization_and_destruction_0(int, int)+0x54>)
    2e4a:	4908      	ldr	r1, [pc, #32]	; (2e6c <__static_initialization_and_destruction_0(int, int)+0x58>)
    2e4c:	4805      	ldr	r0, [pc, #20]	; (2e64 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2e4e:	f003 fb43 	bl	64d8 <__aeabi_atexit>
    2e52:	bf00      	nop
    2e54:	3708      	adds	r7, #8
    2e56:	46bd      	mov	sp, r7
    2e58:	bd80      	pop	{r7, pc}
    2e5a:	bf00      	nop
    2e5c:	10000750 	.word	0x10000750
    2e60:	000007d9 	.word	0x000007d9
    2e64:	10000128 	.word	0x10000128
    2e68:	10000000 	.word	0x10000000
    2e6c:	00000821 	.word	0x00000821

00002e70 <_GLOBAL__sub_I_GetRegistersFromStack>:
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
    2e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2e78:	2001      	movs	r0, #1
    2e7a:	f7ff ffcb 	bl	2e14 <__static_initialization_and_destruction_0(int, int)>
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b084      	sub	sp, #16
    2e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2e86:	4b28      	ldr	r3, [pc, #160]	; (2f28 <vTaskSwitchContext+0xa8>)
    2e88:	681b      	ldr	r3, [r3, #0]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d003      	beq.n	2e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2e8e:	4b27      	ldr	r3, [pc, #156]	; (2f2c <vTaskSwitchContext+0xac>)
    2e90:	2201      	movs	r2, #1
    2e92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2e94:	e043      	b.n	2f1e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    2e96:	4b25      	ldr	r3, [pc, #148]	; (2f2c <vTaskSwitchContext+0xac>)
    2e98:	2200      	movs	r2, #0
    2e9a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2e9c:	f002 fd50 	bl	5940 <ThreadRuntimeCounter>
    2ea0:	4603      	mov	r3, r0
    2ea2:	4a23      	ldr	r2, [pc, #140]	; (2f30 <vTaskSwitchContext+0xb0>)
    2ea4:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    2ea6:	4b22      	ldr	r3, [pc, #136]	; (2f30 <vTaskSwitchContext+0xb0>)
    2ea8:	681a      	ldr	r2, [r3, #0]
    2eaa:	4b22      	ldr	r3, [pc, #136]	; (2f34 <vTaskSwitchContext+0xb4>)
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	429a      	cmp	r2, r3
    2eb0:	d909      	bls.n	2ec6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    2eb2:	4b21      	ldr	r3, [pc, #132]	; (2f38 <vTaskSwitchContext+0xb8>)
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2eb8:	4a1d      	ldr	r2, [pc, #116]	; (2f30 <vTaskSwitchContext+0xb0>)
    2eba:	6810      	ldr	r0, [r2, #0]
    2ebc:	4a1d      	ldr	r2, [pc, #116]	; (2f34 <vTaskSwitchContext+0xb4>)
    2ebe:	6812      	ldr	r2, [r2, #0]
    2ec0:	1a82      	subs	r2, r0, r2
    2ec2:	440a      	add	r2, r1
    2ec4:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    2ec6:	4b1a      	ldr	r3, [pc, #104]	; (2f30 <vTaskSwitchContext+0xb0>)
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	4a1a      	ldr	r2, [pc, #104]	; (2f34 <vTaskSwitchContext+0xb4>)
    2ecc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2ece:	4b1b      	ldr	r3, [pc, #108]	; (2f3c <vTaskSwitchContext+0xbc>)
    2ed0:	681b      	ldr	r3, [r3, #0]
    2ed2:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	fab3 f383 	clz	r3, r3
    2eda:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    2edc:	78fb      	ldrb	r3, [r7, #3]
    2ede:	f1c3 031f 	rsb	r3, r3, #31
    2ee2:	60fb      	str	r3, [r7, #12]
    2ee4:	68fa      	ldr	r2, [r7, #12]
    2ee6:	4613      	mov	r3, r2
    2ee8:	009b      	lsls	r3, r3, #2
    2eea:	4413      	add	r3, r2
    2eec:	009b      	lsls	r3, r3, #2
    2eee:	4a14      	ldr	r2, [pc, #80]	; (2f40 <vTaskSwitchContext+0xc0>)
    2ef0:	4413      	add	r3, r2
    2ef2:	60bb      	str	r3, [r7, #8]
    2ef4:	68bb      	ldr	r3, [r7, #8]
    2ef6:	685b      	ldr	r3, [r3, #4]
    2ef8:	685a      	ldr	r2, [r3, #4]
    2efa:	68bb      	ldr	r3, [r7, #8]
    2efc:	605a      	str	r2, [r3, #4]
    2efe:	68bb      	ldr	r3, [r7, #8]
    2f00:	685a      	ldr	r2, [r3, #4]
    2f02:	68bb      	ldr	r3, [r7, #8]
    2f04:	3308      	adds	r3, #8
    2f06:	429a      	cmp	r2, r3
    2f08:	d104      	bne.n	2f14 <vTaskSwitchContext+0x94>
    2f0a:	68bb      	ldr	r3, [r7, #8]
    2f0c:	685b      	ldr	r3, [r3, #4]
    2f0e:	685a      	ldr	r2, [r3, #4]
    2f10:	68bb      	ldr	r3, [r7, #8]
    2f12:	605a      	str	r2, [r3, #4]
    2f14:	68bb      	ldr	r3, [r7, #8]
    2f16:	685b      	ldr	r3, [r3, #4]
    2f18:	68db      	ldr	r3, [r3, #12]
    2f1a:	4a07      	ldr	r2, [pc, #28]	; (2f38 <vTaskSwitchContext+0xb8>)
    2f1c:	6013      	str	r3, [r2, #0]
}
    2f1e:	bf00      	nop
    2f20:	3710      	adds	r7, #16
    2f22:	46bd      	mov	sp, r7
    2f24:	bd80      	pop	{r7, pc}
    2f26:	bf00      	nop
    2f28:	100007d4 	.word	0x100007d4
    2f2c:	100007d0 	.word	0x100007d0
    2f30:	100007dc 	.word	0x100007dc
    2f34:	100007d8 	.word	0x100007d8
    2f38:	10000764 	.word	0x10000764
    2f3c:	100007cc 	.word	0x100007cc
    2f40:	10000768 	.word	0x10000768

00002f44 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    2f44:	b480      	push	{r7}
    2f46:	af00      	add	r7, sp, #0
    return 1;
    2f48:	2301      	movs	r3, #1
  }
    2f4a:	4618      	mov	r0, r3
    2f4c:	46bd      	mov	sp, r7
    2f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f52:	4770      	bx	lr

00002f54 <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    2f54:	b480      	push	{r7}
    2f56:	b083      	sub	sp, #12
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
    2f5c:	6039      	str	r1, [r7, #0]
    return -1;
    2f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    2f62:	4618      	mov	r0, r3
    2f64:	370c      	adds	r7, #12
    2f66:	46bd      	mov	sp, r7
    2f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f6c:	4770      	bx	lr
    2f6e:	Address 0x0000000000002f6e is out of bounds.


00002f70 <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    2f70:	b580      	push	{r7, lr}
    2f72:	b084      	sub	sp, #16
    2f74:	af00      	add	r7, sp, #0
    2f76:	60f8      	str	r0, [r7, #12]
    2f78:	60b9      	str	r1, [r7, #8]
    2f7a:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	4619      	mov	r1, r3
    2f80:	68b8      	ldr	r0, [r7, #8]
    2f82:	f001 f97c 	bl	427e <trace_write>
    return sjsu::newlib::out(ptr, length);
    2f86:	4b05      	ldr	r3, [pc, #20]	; (2f9c <_write+0x2c>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	687a      	ldr	r2, [r7, #4]
    2f8c:	4611      	mov	r1, r2
    2f8e:	68b8      	ldr	r0, [r7, #8]
    2f90:	4798      	blx	r3
    2f92:	4603      	mov	r3, r0
  }
    2f94:	4618      	mov	r0, r3
    2f96:	3710      	adds	r7, #16
    2f98:	46bd      	mov	sp, r7
    2f9a:	bd80      	pop	{r7, pc}
    2f9c:	1000000c 	.word	0x1000000c

00002fa0 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b084      	sub	sp, #16
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
    int string_length = static_cast<int>(strlen(str));
    2fa8:	6878      	ldr	r0, [r7, #4]
    2faa:	f004 fdbb 	bl	7b24 <strlen>
    2fae:	4603      	mov	r3, r0
    2fb0:	60fb      	str	r3, [r7, #12]
    int result        = 0;
    2fb2:	2300      	movs	r3, #0
    2fb4:	60bb      	str	r3, [r7, #8]
    result += _write(0, str, string_length);
    2fb6:	68fa      	ldr	r2, [r7, #12]
    2fb8:	6879      	ldr	r1, [r7, #4]
    2fba:	2000      	movs	r0, #0
    2fbc:	f7ff ffd8 	bl	2f70 <_write>
    2fc0:	4602      	mov	r2, r0
    2fc2:	68bb      	ldr	r3, [r7, #8]
    2fc4:	4413      	add	r3, r2
    2fc6:	60bb      	str	r3, [r7, #8]
    result += _write(0, "\n", 1);
    2fc8:	2201      	movs	r2, #1
    2fca:	4906      	ldr	r1, [pc, #24]	; (2fe4 <puts+0x44>)
    2fcc:	2000      	movs	r0, #0
    2fce:	f7ff ffcf 	bl	2f70 <_write>
    2fd2:	4602      	mov	r2, r0
    2fd4:	68bb      	ldr	r3, [r7, #8]
    2fd6:	4413      	add	r3, r2
    2fd8:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    2fda:	68bb      	ldr	r3, [r7, #8]
  }
    2fdc:	4618      	mov	r0, r3
    2fde:	3710      	adds	r7, #16
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bd80      	pop	{r7, pc}
    2fe4:	00008c50 	.word	0x00008c50

00002fe8 <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    2fe8:	b480      	push	{r7}
    2fea:	b083      	sub	sp, #12
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    2ff0:	bf00      	nop
    while (1)
    2ff2:	e7fd      	b.n	2ff0 <_exit+0x8>

00002ff4 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	b088      	sub	sp, #32
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	60b9      	str	r1, [r7, #8]
    2ffc:	607a      	str	r2, [r7, #4]
    2ffe:	603b      	str	r3, [r7, #0]
    3000:	4603      	mov	r3, r0
    3002:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = PRINTF_BUFFER_CHUNK_SIZE - 2;
    3004:	23fe      	movs	r3, #254	; 0xfe
    3006:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	69fa      	ldr	r2, [r7, #28]
    300c:	fbb3 f2f2 	udiv	r2, r3, r2
    3010:	69f9      	ldr	r1, [r7, #28]
    3012:	fb01 f202 	mul.w	r2, r1, r2
    3016:	1a9b      	subs	r3, r3, r2
    3018:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    301a:	68ba      	ldr	r2, [r7, #8]
    301c:	69bb      	ldr	r3, [r7, #24]
    301e:	4413      	add	r3, r2
    3020:	7bfa      	ldrb	r2, [r7, #15]
    3022:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    3024:	7bfb      	ldrb	r3, [r7, #15]
    3026:	2b00      	cmp	r3, #0
    3028:	d106      	bne.n	3038 <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    302a:	69bb      	ldr	r3, [r7, #24]
    302c:	461a      	mov	r2, r3
    302e:	68b9      	ldr	r1, [r7, #8]
    3030:	2001      	movs	r0, #1
    3032:	f7ff ff9d 	bl	2f70 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    3036:	e012      	b.n	305e <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    3038:	69bb      	ldr	r3, [r7, #24]
    303a:	3301      	adds	r3, #1
    303c:	69fa      	ldr	r2, [r7, #28]
    303e:	429a      	cmp	r2, r3
    3040:	d10d      	bne.n	305e <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    3042:	69fb      	ldr	r3, [r7, #28]
    3044:	3301      	adds	r3, #1
    3046:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    3048:	68ba      	ldr	r2, [r7, #8]
    304a:	697b      	ldr	r3, [r7, #20]
    304c:	4413      	add	r3, r2
    304e:	2200      	movs	r2, #0
    3050:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    3052:	697b      	ldr	r3, [r7, #20]
    3054:	461a      	mov	r2, r3
    3056:	68b9      	ldr	r1, [r7, #8]
    3058:	2001      	movs	r0, #1
    305a:	f7ff ff89 	bl	2f70 <_write>
}
    305e:	bf00      	nop
    3060:	3720      	adds	r7, #32
    3062:	46bd      	mov	sp, r7
    3064:	bd80      	pop	{r7, pc}

00003066 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    3066:	b480      	push	{r7}
    3068:	b085      	sub	sp, #20
    306a:	af00      	add	r7, sp, #0
    306c:	60b9      	str	r1, [r7, #8]
    306e:	607a      	str	r2, [r7, #4]
    3070:	603b      	str	r3, [r7, #0]
    3072:	4603      	mov	r3, r0
    3074:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3076:	bf00      	nop
    3078:	3714      	adds	r7, #20
    307a:	46bd      	mov	sp, r7
    307c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3080:	4770      	bx	lr

00003082 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    3082:	b480      	push	{r7}
    3084:	b085      	sub	sp, #20
    3086:	af00      	add	r7, sp, #0
    3088:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	60fb      	str	r3, [r7, #12]
    308e:	68fb      	ldr	r3, [r7, #12]
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d003      	beq.n	309e <_strlen(char const*)+0x1c>
    3096:	68fb      	ldr	r3, [r7, #12]
    3098:	3301      	adds	r3, #1
    309a:	60fb      	str	r3, [r7, #12]
    309c:	e7f7      	b.n	308e <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    309e:	68fa      	ldr	r2, [r7, #12]
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	1ad3      	subs	r3, r2, r3
}
    30a4:	4618      	mov	r0, r3
    30a6:	3714      	adds	r7, #20
    30a8:	46bd      	mov	sp, r7
    30aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    30ae:	4770      	bx	lr

000030b0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    30b0:	b480      	push	{r7}
    30b2:	b083      	sub	sp, #12
    30b4:	af00      	add	r7, sp, #0
    30b6:	4603      	mov	r3, r0
    30b8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    30ba:	79fb      	ldrb	r3, [r7, #7]
    30bc:	2b2f      	cmp	r3, #47	; 0x2f
    30be:	d904      	bls.n	30ca <_is_digit(char)+0x1a>
    30c0:	79fb      	ldrb	r3, [r7, #7]
    30c2:	2b39      	cmp	r3, #57	; 0x39
    30c4:	d801      	bhi.n	30ca <_is_digit(char)+0x1a>
    30c6:	2301      	movs	r3, #1
    30c8:	e000      	b.n	30cc <_is_digit(char)+0x1c>
    30ca:	2300      	movs	r3, #0
}
    30cc:	4618      	mov	r0, r3
    30ce:	370c      	adds	r7, #12
    30d0:	46bd      	mov	sp, r7
    30d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30d6:	4770      	bx	lr

000030d8 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b084      	sub	sp, #16
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    30e0:	2300      	movs	r3, #0
    30e2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	681b      	ldr	r3, [r3, #0]
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	4618      	mov	r0, r3
    30ec:	f7ff ffe0 	bl	30b0 <_is_digit(char)>
    30f0:	4603      	mov	r3, r0
    30f2:	2b00      	cmp	r3, #0
    30f4:	d00f      	beq.n	3116 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    30f6:	68fa      	ldr	r2, [r7, #12]
    30f8:	4613      	mov	r3, r2
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	4413      	add	r3, r2
    30fe:	005b      	lsls	r3, r3, #1
    3100:	4618      	mov	r0, r3
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	681b      	ldr	r3, [r3, #0]
    3106:	1c59      	adds	r1, r3, #1
    3108:	687a      	ldr	r2, [r7, #4]
    310a:	6011      	str	r1, [r2, #0]
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	4403      	add	r3, r0
    3110:	3b30      	subs	r3, #48	; 0x30
    3112:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    3114:	e7e6      	b.n	30e4 <_atoi(char const**)+0xc>
  }
  return i;
    3116:	68fb      	ldr	r3, [r7, #12]
}
    3118:	4618      	mov	r0, r3
    311a:	3710      	adds	r7, #16
    311c:	46bd      	mov	sp, r7
    311e:	bd80      	pop	{r7, pc}

00003120 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3120:	b590      	push	{r4, r7, lr}
    3122:	b089      	sub	sp, #36	; 0x24
    3124:	af00      	add	r7, sp, #0
    3126:	60f8      	str	r0, [r7, #12]
    3128:	60b9      	str	r1, [r7, #8]
    312a:	607a      	str	r2, [r7, #4]
    312c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3134:	f003 0302 	and.w	r3, r3, #2
    3138:	2b00      	cmp	r3, #0
    313a:	d10e      	bne.n	315a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    313c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3140:	429a      	cmp	r2, r3
    3142:	d20a      	bcs.n	315a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    3144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3146:	2b1f      	cmp	r3, #31
    3148:	d807      	bhi.n	315a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    314c:	1c5a      	adds	r2, r3, #1
    314e:	637a      	str	r2, [r7, #52]	; 0x34
    3150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3152:	4413      	add	r3, r2
    3154:	2230      	movs	r2, #48	; 0x30
    3156:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3158:	e7eb      	b.n	3132 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    315c:	f003 0302 	and.w	r3, r3, #2
    3160:	2b00      	cmp	r3, #0
    3162:	d113      	bne.n	318c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3166:	f003 0301 	and.w	r3, r3, #1
    316a:	2b00      	cmp	r3, #0
    316c:	d00e      	beq.n	318c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    316e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3172:	429a      	cmp	r2, r3
    3174:	d20a      	bcs.n	318c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    3176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3178:	2b1f      	cmp	r3, #31
    317a:	d807      	bhi.n	318c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    317e:	1c5a      	adds	r2, r3, #1
    3180:	637a      	str	r2, [r7, #52]	; 0x34
    3182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3184:	4413      	add	r3, r2
    3186:	2230      	movs	r2, #48	; 0x30
    3188:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    318a:	e7e6      	b.n	315a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    318e:	f003 0310 	and.w	r3, r3, #16
    3192:	2b00      	cmp	r3, #0
    3194:	d058      	beq.n	3248 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    319c:	2b00      	cmp	r3, #0
    319e:	d116      	bne.n	31ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    31a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31a2:	2b00      	cmp	r3, #0
    31a4:	d013      	beq.n	31ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    31a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    31a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    31aa:	429a      	cmp	r2, r3
    31ac:	d003      	beq.n	31b6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    31ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    31b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    31b2:	429a      	cmp	r2, r3
    31b4:	d10b      	bne.n	31ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    31b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31b8:	3b01      	subs	r3, #1
    31ba:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    31bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31be:	2b00      	cmp	r3, #0
    31c0:	d005      	beq.n	31ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    31c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31c4:	2b10      	cmp	r3, #16
    31c6:	d102      	bne.n	31ce <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    31c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31ca:	3b01      	subs	r3, #1
    31cc:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    31ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31d0:	2b10      	cmp	r3, #16
    31d2:	d10f      	bne.n	31f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    31d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    31d6:	f003 0320 	and.w	r3, r3, #32
    31da:	2b00      	cmp	r3, #0
    31dc:	d10a      	bne.n	31f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    31de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31e0:	2b1f      	cmp	r3, #31
    31e2:	d807      	bhi.n	31f4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    31e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31e6:	1c5a      	adds	r2, r3, #1
    31e8:	637a      	str	r2, [r7, #52]	; 0x34
    31ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    31ec:	4413      	add	r3, r2
    31ee:	2278      	movs	r2, #120	; 0x78
    31f0:	701a      	strb	r2, [r3, #0]
    31f2:	e01f      	b.n	3234 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    31f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31f6:	2b10      	cmp	r3, #16
    31f8:	d10f      	bne.n	321a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    31fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    31fc:	f003 0320 	and.w	r3, r3, #32
    3200:	2b00      	cmp	r3, #0
    3202:	d00a      	beq.n	321a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    3204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3206:	2b1f      	cmp	r3, #31
    3208:	d807      	bhi.n	321a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    320c:	1c5a      	adds	r2, r3, #1
    320e:	637a      	str	r2, [r7, #52]	; 0x34
    3210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3212:	4413      	add	r3, r2
    3214:	2258      	movs	r2, #88	; 0x58
    3216:	701a      	strb	r2, [r3, #0]
    3218:	e00c      	b.n	3234 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    321c:	2b02      	cmp	r3, #2
    321e:	d109      	bne.n	3234 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    3220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3222:	2b1f      	cmp	r3, #31
    3224:	d806      	bhi.n	3234 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    3226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3228:	1c5a      	adds	r2, r3, #1
    322a:	637a      	str	r2, [r7, #52]	; 0x34
    322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    322e:	4413      	add	r3, r2
    3230:	2262      	movs	r2, #98	; 0x62
    3232:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3236:	2b1f      	cmp	r3, #31
    3238:	d806      	bhi.n	3248 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    323c:	1c5a      	adds	r2, r3, #1
    323e:	637a      	str	r2, [r7, #52]	; 0x34
    3240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3242:	4413      	add	r3, r2
    3244:	2230      	movs	r2, #48	; 0x30
    3246:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    324a:	2b00      	cmp	r3, #0
    324c:	d014      	beq.n	3278 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    324e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3252:	429a      	cmp	r2, r3
    3254:	d110      	bne.n	3278 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    3256:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    325a:	2b00      	cmp	r3, #0
    325c:	d109      	bne.n	3272 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    325e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3260:	f003 0304 	and.w	r3, r3, #4
    3264:	2b00      	cmp	r3, #0
    3266:	d104      	bne.n	3272 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    3268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    326a:	f003 0308 	and.w	r3, r3, #8
    326e:	2b00      	cmp	r3, #0
    3270:	d002      	beq.n	3278 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    3272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3274:	3b01      	subs	r3, #1
    3276:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    327a:	2b1f      	cmp	r3, #31
    327c:	d824      	bhi.n	32c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    327e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    3282:	2b00      	cmp	r3, #0
    3284:	d007      	beq.n	3296 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    3286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3288:	1c5a      	adds	r2, r3, #1
    328a:	637a      	str	r2, [r7, #52]	; 0x34
    328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    328e:	4413      	add	r3, r2
    3290:	222d      	movs	r2, #45	; 0x2d
    3292:	701a      	strb	r2, [r3, #0]
    3294:	e018      	b.n	32c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    3296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3298:	f003 0304 	and.w	r3, r3, #4
    329c:	2b00      	cmp	r3, #0
    329e:	d007      	beq.n	32b0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    32a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32a2:	1c5a      	adds	r2, r3, #1
    32a4:	637a      	str	r2, [r7, #52]	; 0x34
    32a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    32a8:	4413      	add	r3, r2
    32aa:	222b      	movs	r2, #43	; 0x2b
    32ac:	701a      	strb	r2, [r3, #0]
    32ae:	e00b      	b.n	32c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    32b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    32b2:	f003 0308 	and.w	r3, r3, #8
    32b6:	2b00      	cmp	r3, #0
    32b8:	d006      	beq.n	32c8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    32ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32bc:	1c5a      	adds	r2, r3, #1
    32be:	637a      	str	r2, [r7, #52]	; 0x34
    32c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    32c2:	4413      	add	r3, r2
    32c4:	2220      	movs	r2, #32
    32c6:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    32c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    32ca:	f003 0302 	and.w	r3, r3, #2
    32ce:	2b00      	cmp	r3, #0
    32d0:	d116      	bne.n	3300 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    32d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    32d4:	f003 0301 	and.w	r3, r3, #1
    32d8:	2b00      	cmp	r3, #0
    32da:	d111      	bne.n	3300 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    32dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32de:	61fb      	str	r3, [r7, #28]
    32e0:	69fa      	ldr	r2, [r7, #28]
    32e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    32e4:	429a      	cmp	r2, r3
    32e6:	d20b      	bcs.n	3300 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    32e8:	68fc      	ldr	r4, [r7, #12]
    32ea:	687a      	ldr	r2, [r7, #4]
    32ec:	1c53      	adds	r3, r2, #1
    32ee:	607b      	str	r3, [r7, #4]
    32f0:	683b      	ldr	r3, [r7, #0]
    32f2:	68b9      	ldr	r1, [r7, #8]
    32f4:	2020      	movs	r0, #32
    32f6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    32f8:	69fb      	ldr	r3, [r7, #28]
    32fa:	3301      	adds	r3, #1
    32fc:	61fb      	str	r3, [r7, #28]
    32fe:	e7ef      	b.n	32e0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3300:	2300      	movs	r3, #0
    3302:	61bb      	str	r3, [r7, #24]
    3304:	69ba      	ldr	r2, [r7, #24]
    3306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3308:	429a      	cmp	r2, r3
    330a:	d211      	bcs.n	3330 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    330c:	68fc      	ldr	r4, [r7, #12]
    330e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3310:	69bb      	ldr	r3, [r7, #24]
    3312:	1ad3      	subs	r3, r2, r3
    3314:	3b01      	subs	r3, #1
    3316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3318:	4413      	add	r3, r2
    331a:	7818      	ldrb	r0, [r3, #0]
    331c:	687a      	ldr	r2, [r7, #4]
    331e:	1c53      	adds	r3, r2, #1
    3320:	607b      	str	r3, [r7, #4]
    3322:	683b      	ldr	r3, [r7, #0]
    3324:	68b9      	ldr	r1, [r7, #8]
    3326:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3328:	69bb      	ldr	r3, [r7, #24]
    332a:	3301      	adds	r3, #1
    332c:	61bb      	str	r3, [r7, #24]
    332e:	e7e9      	b.n	3304 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3332:	f003 0302 	and.w	r3, r3, #2
    3336:	2b00      	cmp	r3, #0
    3338:	d00e      	beq.n	3358 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    333a:	687a      	ldr	r2, [r7, #4]
    333c:	697b      	ldr	r3, [r7, #20]
    333e:	1ad3      	subs	r3, r2, r3
    3340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3342:	429a      	cmp	r2, r3
    3344:	d908      	bls.n	3358 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    3346:	68fc      	ldr	r4, [r7, #12]
    3348:	687a      	ldr	r2, [r7, #4]
    334a:	1c53      	adds	r3, r2, #1
    334c:	607b      	str	r3, [r7, #4]
    334e:	683b      	ldr	r3, [r7, #0]
    3350:	68b9      	ldr	r1, [r7, #8]
    3352:	2020      	movs	r0, #32
    3354:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3356:	e7f0      	b.n	333a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    3358:	687b      	ldr	r3, [r7, #4]
}
    335a:	4618      	mov	r0, r3
    335c:	3724      	adds	r7, #36	; 0x24
    335e:	46bd      	mov	sp, r7
    3360:	bd90      	pop	{r4, r7, pc}

00003362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3362:	b580      	push	{r7, lr}
    3364:	b096      	sub	sp, #88	; 0x58
    3366:	af08      	add	r7, sp, #32
    3368:	60f8      	str	r0, [r7, #12]
    336a:	60b9      	str	r1, [r7, #8]
    336c:	607a      	str	r2, [r7, #4]
    336e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3370:	2300      	movs	r3, #0
    3372:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3376:	2b00      	cmp	r3, #0
    3378:	d103      	bne.n	3382 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    337c:	f023 0310 	bic.w	r3, r3, #16
    3380:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3388:	2b00      	cmp	r3, #0
    338a:	d002      	beq.n	3392 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    338e:	2b00      	cmp	r3, #0
    3390:	d034      	beq.n	33fc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    3392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3394:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3396:	fbb3 f2f2 	udiv	r2, r3, r2
    339a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    339c:	fb01 f202 	mul.w	r2, r1, r2
    33a0:	1a9b      	subs	r3, r3, r2
    33a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    33a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    33aa:	2b09      	cmp	r3, #9
    33ac:	d804      	bhi.n	33b8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    33ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    33b2:	3330      	adds	r3, #48	; 0x30
    33b4:	b2da      	uxtb	r2, r3
    33b6:	e00d      	b.n	33d4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    33b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33ba:	f003 0320 	and.w	r3, r3, #32
    33be:	2b00      	cmp	r3, #0
    33c0:	d001      	beq.n	33c6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    33c2:	2241      	movs	r2, #65	; 0x41
    33c4:	e000      	b.n	33c8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    33c6:	2261      	movs	r2, #97	; 0x61
    33c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    33cc:	4413      	add	r3, r2
    33ce:	b2db      	uxtb	r3, r3
    33d0:	3b0a      	subs	r3, #10
    33d2:	b2da      	uxtb	r2, r3
    33d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33d6:	1c59      	adds	r1, r3, #1
    33d8:	6379      	str	r1, [r7, #52]	; 0x34
    33da:	f107 0138 	add.w	r1, r7, #56	; 0x38
    33de:	440b      	add	r3, r1
    33e0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    33e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    33e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33e8:	fbb2 f3f3 	udiv	r3, r2, r3
    33ec:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    33ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    33f0:	2b00      	cmp	r3, #0
    33f2:	d003      	beq.n	33fc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    33f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33f6:	2b1f      	cmp	r3, #31
    33f8:	d800      	bhi.n	33fc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    33fa:	e7ca      	b.n	3392 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    33fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33fe:	9306      	str	r3, [sp, #24]
    3400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3402:	9305      	str	r3, [sp, #20]
    3404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3406:	9304      	str	r3, [sp, #16]
    3408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    340a:	9303      	str	r3, [sp, #12]
    340c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    3410:	9302      	str	r3, [sp, #8]
    3412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3414:	9301      	str	r3, [sp, #4]
    3416:	f107 0310 	add.w	r3, r7, #16
    341a:	9300      	str	r3, [sp, #0]
    341c:	683b      	ldr	r3, [r7, #0]
    341e:	687a      	ldr	r2, [r7, #4]
    3420:	68b9      	ldr	r1, [r7, #8]
    3422:	68f8      	ldr	r0, [r7, #12]
    3424:	f7ff fe7c 	bl	3120 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3428:	4603      	mov	r3, r0
}
    342a:	4618      	mov	r0, r3
    342c:	3738      	adds	r7, #56	; 0x38
    342e:	46bd      	mov	sp, r7
    3430:	bd80      	pop	{r7, pc}

00003432 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3432:	b580      	push	{r7, lr}
    3434:	b096      	sub	sp, #88	; 0x58
    3436:	af08      	add	r7, sp, #32
    3438:	60f8      	str	r0, [r7, #12]
    343a:	60b9      	str	r1, [r7, #8]
    343c:	607a      	str	r2, [r7, #4]
    343e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    3440:	2300      	movs	r3, #0
    3442:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    3444:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3448:	4313      	orrs	r3, r2
    344a:	d103      	bne.n	3454 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    344c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    344e:	f023 0310 	bic.w	r3, r3, #16
    3452:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    345a:	2b00      	cmp	r3, #0
    345c:	d003      	beq.n	3466 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    345e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    3462:	4313      	orrs	r3, r2
    3464:	d039      	beq.n	34da <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    3466:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    346a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    346e:	f003 f9ff 	bl	6870 <__aeabi_uldivmod>
    3472:	4613      	mov	r3, r2
    3474:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    347c:	2b09      	cmp	r3, #9
    347e:	d804      	bhi.n	348a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    3480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    3484:	3330      	adds	r3, #48	; 0x30
    3486:	b2da      	uxtb	r2, r3
    3488:	e00d      	b.n	34a6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    348c:	f003 0320 	and.w	r3, r3, #32
    3490:	2b00      	cmp	r3, #0
    3492:	d001      	beq.n	3498 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    3494:	2241      	movs	r2, #65	; 0x41
    3496:	e000      	b.n	349a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    3498:	2261      	movs	r2, #97	; 0x61
    349a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    349e:	4413      	add	r3, r2
    34a0:	b2db      	uxtb	r3, r3
    34a2:	3b0a      	subs	r3, #10
    34a4:	b2da      	uxtb	r2, r3
    34a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34a8:	1c59      	adds	r1, r3, #1
    34aa:	6379      	str	r1, [r7, #52]	; 0x34
    34ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
    34b0:	440b      	add	r3, r1
    34b2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    34b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    34ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    34be:	f003 f9d7 	bl	6870 <__aeabi_uldivmod>
    34c2:	4602      	mov	r2, r0
    34c4:	460b      	mov	r3, r1
    34c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    34ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    34ce:	4313      	orrs	r3, r2
    34d0:	d003      	beq.n	34da <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    34d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34d4:	2b1f      	cmp	r3, #31
    34d6:	d800      	bhi.n	34da <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    34d8:	e7c5      	b.n	3466 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    34da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    34dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    34de:	9206      	str	r2, [sp, #24]
    34e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    34e2:	9205      	str	r2, [sp, #20]
    34e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
    34e6:	9204      	str	r2, [sp, #16]
    34e8:	9303      	str	r3, [sp, #12]
    34ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    34ee:	9302      	str	r3, [sp, #8]
    34f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34f2:	9301      	str	r3, [sp, #4]
    34f4:	f107 0310 	add.w	r3, r7, #16
    34f8:	9300      	str	r3, [sp, #0]
    34fa:	683b      	ldr	r3, [r7, #0]
    34fc:	687a      	ldr	r2, [r7, #4]
    34fe:	68b9      	ldr	r1, [r7, #8]
    3500:	68f8      	ldr	r0, [r7, #12]
    3502:	f7ff fe0d 	bl	3120 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    3506:	4603      	mov	r3, r0
}
    3508:	4618      	mov	r0, r3
    350a:	3738      	adds	r7, #56	; 0x38
    350c:	46bd      	mov	sp, r7
    350e:	bd80      	pop	{r7, pc}

00003510 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    3510:	b590      	push	{r4, r7, lr}
    3512:	b09b      	sub	sp, #108	; 0x6c
    3514:	af00      	add	r7, sp, #0
    3516:	6178      	str	r0, [r7, #20]
    3518:	6139      	str	r1, [r7, #16]
    351a:	60fa      	str	r2, [r7, #12]
    351c:	60bb      	str	r3, [r7, #8]
    351e:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    3526:	e9d7 0100 	ldrd	r0, r1, [r7]
    352a:	f002 fff3 	bl	6514 <__aeabi_d2f>
    352e:	4603      	mov	r3, r0
    3530:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    3532:	2300      	movs	r3, #0
    3534:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    3536:	f04f 0300 	mov.w	r3, #0
    353a:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    353c:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    3540:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    3542:	2300      	movs	r3, #0
    3544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    3548:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    354c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3554:	d50a      	bpl.n	356c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    3556:	2301      	movs	r3, #1
    3558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    355c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 380c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    3560:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    3564:	ee77 7a67 	vsub.f32	s15, s14, s15
    3568:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    356c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3574:	2b00      	cmp	r3, #0
    3576:	d101      	bne.n	357c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    3578:	2306      	movs	r3, #6
    357a:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    357c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    357e:	2b1f      	cmp	r3, #31
    3580:	d80f      	bhi.n	35a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    3582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3584:	2b09      	cmp	r3, #9
    3586:	d90c      	bls.n	35a2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    3588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    358a:	1c5a      	adds	r2, r3, #1
    358c:	663a      	str	r2, [r7, #96]	; 0x60
    358e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3592:	4413      	add	r3, r2
    3594:	2230      	movs	r2, #48	; 0x30
    3596:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    359a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    359c:	3b01      	subs	r3, #1
    359e:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    35a0:	e7ec      	b.n	357c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    35a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    35a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    35aa:	ee17 3a90 	vmov	r3, s15
    35ae:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    35b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35b2:	ee07 3a90 	vmov	s15, r3
    35b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    35ba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    35be:	ee37 7a67 	vsub.f32	s14, s14, s15
    35c2:	4a93      	ldr	r2, [pc, #588]	; (3810 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    35c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    35c6:	009b      	lsls	r3, r3, #2
    35c8:	4413      	add	r3, r2
    35ca:	edd3 7a00 	vldr	s15, [r3]
    35ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    35d2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    35d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    35da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    35de:	ee17 3a90 	vmov	r3, s15
    35e2:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    35e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    35e6:	ee07 3a90 	vmov	s15, r3
    35ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    35ee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    35f2:	ee77 7a67 	vsub.f32	s15, s14, s15
    35f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    35fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    35fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3602:	eef4 7ac7 	vcmpe.f32	s15, s14
    3606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    360a:	dd18      	ble.n	363e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    360c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    360e:	3301      	adds	r3, #1
    3610:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    3612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3614:	ee07 3a90 	vmov	s15, r3
    3618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    361c:	4a7c      	ldr	r2, [pc, #496]	; (3810 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    361e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3620:	009b      	lsls	r3, r3, #2
    3622:	4413      	add	r3, r2
    3624:	edd3 7a00 	vldr	s15, [r3]
    3628:	eeb4 7ae7 	vcmpe.f32	s14, s15
    362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3630:	db19      	blt.n	3666 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    3632:	2300      	movs	r3, #0
    3634:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    3636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3638:	3301      	adds	r3, #1
    363a:	65bb      	str	r3, [r7, #88]	; 0x58
    363c:	e013      	b.n	3666 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    363e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    3642:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3646:	eef4 7a47 	vcmp.f32	s15, s14
    364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    364e:	d10a      	bne.n	3666 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    3650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3652:	2b00      	cmp	r3, #0
    3654:	d004      	beq.n	3660 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    3656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3658:	f003 0301 	and.w	r3, r3, #1
    365c:	2b00      	cmp	r3, #0
    365e:	d002      	beq.n	3666 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    3660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3662:	3301      	adds	r3, #1
    3664:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    3666:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    366a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 3814 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    366e:	eef4 7ac7 	vcmpe.f32	s15, s14
    3672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3676:	dd01      	ble.n	367c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    3678:	2300      	movs	r3, #0
    367a:	e166      	b.n	394a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    367c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    367e:	2b00      	cmp	r3, #0
    3680:	d129      	bne.n	36d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    3682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3684:	ee07 3a90 	vmov	s15, r3
    3688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    368c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    3690:	ee77 7a67 	vsub.f32	s15, s14, s15
    3694:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    3698:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    369c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    36a0:	eef4 7ac7 	vcmpe.f32	s15, s14
    36a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36a8:	dd03      	ble.n	36b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    36aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36ac:	3301      	adds	r3, #1
    36ae:	65bb      	str	r3, [r7, #88]	; 0x58
    36b0:	e062      	b.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    36b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    36b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    36ba:	eef4 7a47 	vcmp.f32	s15, s14
    36be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36c2:	d159      	bne.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    36c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36c6:	f003 0301 	and.w	r3, r3, #1
    36ca:	2b00      	cmp	r3, #0
    36cc:	d054      	beq.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    36ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36d0:	3301      	adds	r3, #1
    36d2:	65bb      	str	r3, [r7, #88]	; 0x58
    36d4:	e050      	b.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    36d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    36d8:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    36da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    36dc:	2b1f      	cmp	r3, #31
    36de:	d828      	bhi.n	3732 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    36e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    36e2:	3b01      	subs	r3, #1
    36e4:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    36e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
    36e8:	4b4b      	ldr	r3, [pc, #300]	; (3818 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    36ea:	fba3 2301 	umull	r2, r3, r3, r1
    36ee:	08da      	lsrs	r2, r3, #3
    36f0:	4613      	mov	r3, r2
    36f2:	009b      	lsls	r3, r3, #2
    36f4:	4413      	add	r3, r2
    36f6:	005b      	lsls	r3, r3, #1
    36f8:	1aca      	subs	r2, r1, r3
    36fa:	b2d3      	uxtb	r3, r2
    36fc:	3330      	adds	r3, #48	; 0x30
    36fe:	b2d9      	uxtb	r1, r3
    3700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3702:	1c5a      	adds	r2, r3, #1
    3704:	663a      	str	r2, [r7, #96]	; 0x60
    3706:	f107 0268 	add.w	r2, r7, #104	; 0x68
    370a:	4413      	add	r3, r2
    370c:	460a      	mov	r2, r1
    370e:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    3712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3714:	4a40      	ldr	r2, [pc, #256]	; (3818 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    3716:	fba2 2303 	umull	r2, r3, r2, r3
    371a:	08db      	lsrs	r3, r3, #3
    371c:	657b      	str	r3, [r7, #84]	; 0x54
    371e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3720:	2b00      	cmp	r3, #0
    3722:	bf0c      	ite	eq
    3724:	2301      	moveq	r3, #1
    3726:	2300      	movne	r3, #0
    3728:	b2db      	uxtb	r3, r3
    372a:	2b00      	cmp	r3, #0
    372c:	d100      	bne.n	3730 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    372e:	e7d4      	b.n	36da <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    3730:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3734:	2b1f      	cmp	r3, #31
    3736:	d806      	bhi.n	3746 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    373a:	1e5a      	subs	r2, r3, #1
    373c:	653a      	str	r2, [r7, #80]	; 0x50
    373e:	2b00      	cmp	r3, #0
    3740:	d001      	beq.n	3746 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    3742:	2301      	movs	r3, #1
    3744:	e000      	b.n	3748 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    3746:	2300      	movs	r3, #0
    3748:	2b00      	cmp	r3, #0
    374a:	d009      	beq.n	3760 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    374c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    374e:	1c5a      	adds	r2, r3, #1
    3750:	663a      	str	r2, [r7, #96]	; 0x60
    3752:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3756:	4413      	add	r3, r2
    3758:	2230      	movs	r2, #48	; 0x30
    375a:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    375e:	e7e8      	b.n	3732 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3762:	2b1f      	cmp	r3, #31
    3764:	d808      	bhi.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    3766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3768:	1c5a      	adds	r2, r3, #1
    376a:	663a      	str	r2, [r7, #96]	; 0x60
    376c:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3770:	4413      	add	r3, r2
    3772:	222e      	movs	r2, #46	; 0x2e
    3774:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    377a:	2b1f      	cmp	r3, #31
    377c:	d829      	bhi.n	37d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    377e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3780:	4b26      	ldr	r3, [pc, #152]	; (381c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    3782:	fb83 1302 	smull	r1, r3, r3, r2
    3786:	1099      	asrs	r1, r3, #2
    3788:	17d3      	asrs	r3, r2, #31
    378a:	1ac9      	subs	r1, r1, r3
    378c:	460b      	mov	r3, r1
    378e:	009b      	lsls	r3, r3, #2
    3790:	440b      	add	r3, r1
    3792:	005b      	lsls	r3, r3, #1
    3794:	1ad1      	subs	r1, r2, r3
    3796:	b2cb      	uxtb	r3, r1
    3798:	3330      	adds	r3, #48	; 0x30
    379a:	b2d9      	uxtb	r1, r3
    379c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    379e:	1c5a      	adds	r2, r3, #1
    37a0:	663a      	str	r2, [r7, #96]	; 0x60
    37a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    37a6:	4413      	add	r3, r2
    37a8:	460a      	mov	r2, r1
    37aa:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    37ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    37b0:	4a1a      	ldr	r2, [pc, #104]	; (381c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    37b2:	fb82 1203 	smull	r1, r2, r2, r3
    37b6:	1092      	asrs	r2, r2, #2
    37b8:	17db      	asrs	r3, r3, #31
    37ba:	1ad3      	subs	r3, r2, r3
    37bc:	65bb      	str	r3, [r7, #88]	; 0x58
    37be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    37c0:	2b00      	cmp	r3, #0
    37c2:	bf0c      	ite	eq
    37c4:	2301      	moveq	r3, #1
    37c6:	2300      	movne	r3, #0
    37c8:	b2db      	uxtb	r3, r3
    37ca:	2b00      	cmp	r3, #0
    37cc:	d100      	bne.n	37d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    37ce:	e7d3      	b.n	3778 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    37d0:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    37d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    37d6:	f003 0302 	and.w	r3, r3, #2
    37da:	2b00      	cmp	r3, #0
    37dc:	d120      	bne.n	3820 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    37de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    37e2:	f003 0301 	and.w	r3, r3, #1
    37e6:	2b00      	cmp	r3, #0
    37e8:	d01a      	beq.n	3820 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    37ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    37ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    37ee:	429a      	cmp	r2, r3
    37f0:	d216      	bcs.n	3820 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    37f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    37f4:	2b1f      	cmp	r3, #31
    37f6:	d813      	bhi.n	3820 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    37f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    37fa:	1c5a      	adds	r2, r3, #1
    37fc:	663a      	str	r2, [r7, #96]	; 0x60
    37fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3802:	4413      	add	r3, r2
    3804:	2230      	movs	r2, #48	; 0x30
    3806:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    380a:	e7e2      	b.n	37d2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    380c:	00000000 	.word	0x00000000
    3810:	00008c54 	.word	0x00008c54
    3814:	4f000000 	.word	0x4f000000
    3818:	cccccccd 	.word	0xcccccccd
    381c:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3824:	429a      	cmp	r2, r3
    3826:	d112      	bne.n	384e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    3828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    382c:	2b00      	cmp	r3, #0
    382e:	d10b      	bne.n	3848 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    3830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3834:	f003 0304 	and.w	r3, r3, #4
    3838:	2b00      	cmp	r3, #0
    383a:	d105      	bne.n	3848 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    383c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3840:	f003 0308 	and.w	r3, r3, #8
    3844:	2b00      	cmp	r3, #0
    3846:	d002      	beq.n	384e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    3848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    384a:	3b01      	subs	r3, #1
    384c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    384e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3850:	2b1f      	cmp	r3, #31
    3852:	d82c      	bhi.n	38ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    3854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    3858:	2b00      	cmp	r3, #0
    385a:	d009      	beq.n	3870 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    385c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    385e:	1c5a      	adds	r2, r3, #1
    3860:	663a      	str	r2, [r7, #96]	; 0x60
    3862:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3866:	4413      	add	r3, r2
    3868:	222d      	movs	r2, #45	; 0x2d
    386a:	f803 2c50 	strb.w	r2, [r3, #-80]
    386e:	e01e      	b.n	38ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    3870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3874:	f003 0304 	and.w	r3, r3, #4
    3878:	2b00      	cmp	r3, #0
    387a:	d009      	beq.n	3890 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    387c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    387e:	1c5a      	adds	r2, r3, #1
    3880:	663a      	str	r2, [r7, #96]	; 0x60
    3882:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3886:	4413      	add	r3, r2
    3888:	222b      	movs	r2, #43	; 0x2b
    388a:	f803 2c50 	strb.w	r2, [r3, #-80]
    388e:	e00e      	b.n	38ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    3890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3894:	f003 0308 	and.w	r3, r3, #8
    3898:	2b00      	cmp	r3, #0
    389a:	d008      	beq.n	38ae <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    389c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    389e:	1c5a      	adds	r2, r3, #1
    38a0:	663a      	str	r2, [r7, #96]	; 0x60
    38a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    38a6:	4413      	add	r3, r2
    38a8:	2220      	movs	r2, #32
    38aa:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    38ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    38b2:	f003 0302 	and.w	r3, r3, #2
    38b6:	2b00      	cmp	r3, #0
    38b8:	d117      	bne.n	38ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    38ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    38be:	f003 0301 	and.w	r3, r3, #1
    38c2:	2b00      	cmp	r3, #0
    38c4:	d111      	bne.n	38ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    38c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    38c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    38ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    38cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    38ce:	429a      	cmp	r2, r3
    38d0:	d20b      	bcs.n	38ea <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    38d2:	697c      	ldr	r4, [r7, #20]
    38d4:	68fa      	ldr	r2, [r7, #12]
    38d6:	1c53      	adds	r3, r2, #1
    38d8:	60fb      	str	r3, [r7, #12]
    38da:	68bb      	ldr	r3, [r7, #8]
    38dc:	6939      	ldr	r1, [r7, #16]
    38de:	2020      	movs	r0, #32
    38e0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    38e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    38e4:	3301      	adds	r3, #1
    38e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    38e8:	e7ef      	b.n	38ca <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    38ea:	2300      	movs	r3, #0
    38ec:	64bb      	str	r3, [r7, #72]	; 0x48
    38ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
    38f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    38f2:	429a      	cmp	r2, r3
    38f4:	d213      	bcs.n	391e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    38f6:	697c      	ldr	r4, [r7, #20]
    38f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    38fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    38fc:	1ad3      	subs	r3, r2, r3
    38fe:	3b01      	subs	r3, #1
    3900:	f107 0268 	add.w	r2, r7, #104	; 0x68
    3904:	4413      	add	r3, r2
    3906:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    390a:	68fa      	ldr	r2, [r7, #12]
    390c:	1c53      	adds	r3, r2, #1
    390e:	60fb      	str	r3, [r7, #12]
    3910:	68bb      	ldr	r3, [r7, #8]
    3912:	6939      	ldr	r1, [r7, #16]
    3914:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    3916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3918:	3301      	adds	r3, #1
    391a:	64bb      	str	r3, [r7, #72]	; 0x48
    391c:	e7e7      	b.n	38ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    391e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3922:	f003 0302 	and.w	r3, r3, #2
    3926:	2b00      	cmp	r3, #0
    3928:	d00e      	beq.n	3948 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    392a:	68fa      	ldr	r2, [r7, #12]
    392c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    392e:	1ad3      	subs	r3, r2, r3
    3930:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    3932:	429a      	cmp	r2, r3
    3934:	d908      	bls.n	3948 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    3936:	697c      	ldr	r4, [r7, #20]
    3938:	68fa      	ldr	r2, [r7, #12]
    393a:	1c53      	adds	r3, r2, #1
    393c:	60fb      	str	r3, [r7, #12]
    393e:	68bb      	ldr	r3, [r7, #8]
    3940:	6939      	ldr	r1, [r7, #16]
    3942:	2020      	movs	r0, #32
    3944:	47a0      	blx	r4
    while (idx - start_idx < width) {
    3946:	e7f0      	b.n	392a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    3948:	68fb      	ldr	r3, [r7, #12]
}
    394a:	4618      	mov	r0, r3
    394c:	376c      	adds	r7, #108	; 0x6c
    394e:	46bd      	mov	sp, r7
    3950:	bd90      	pop	{r4, r7, pc}
    3952:	bf00      	nop

00003954 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3954:	b5b0      	push	{r4, r5, r7, lr}
    3956:	b0a0      	sub	sp, #128	; 0x80
    3958:	af0a      	add	r7, sp, #40	; 0x28
    395a:	60f8      	str	r0, [r7, #12]
    395c:	60b9      	str	r1, [r7, #8]
    395e:	607a      	str	r2, [r7, #4]
    3960:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    3962:	2300      	movs	r3, #0
    3964:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    3966:	68bb      	ldr	r3, [r7, #8]
    3968:	2b00      	cmp	r3, #0
    396a:	d101      	bne.n	3970 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    396c:	4ba2      	ldr	r3, [pc, #648]	; (3bf8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    396e:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    3970:	683b      	ldr	r3, [r7, #0]
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	2b00      	cmp	r3, #0
    3976:	f000 8446 	beq.w	4206 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    397a:	683b      	ldr	r3, [r7, #0]
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	2b25      	cmp	r3, #37	; 0x25
    3980:	d00d      	beq.n	399e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    3982:	68fc      	ldr	r4, [r7, #12]
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7818      	ldrb	r0, [r3, #0]
    3988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    398a:	1c53      	adds	r3, r2, #1
    398c:	647b      	str	r3, [r7, #68]	; 0x44
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	68b9      	ldr	r1, [r7, #8]
    3992:	47a0      	blx	r4
      format++;
    3994:	683b      	ldr	r3, [r7, #0]
    3996:	3301      	adds	r3, #1
    3998:	603b      	str	r3, [r7, #0]
      continue;
    399a:	f000 bc32 	b.w	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
    }
    else {
      // yes, evaluate it
      format++;
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	3301      	adds	r3, #1
    39a2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    39a4:	2300      	movs	r3, #0
    39a6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	3b20      	subs	r3, #32
    39ae:	2b10      	cmp	r3, #16
    39b0:	d856      	bhi.n	3a60 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    39b2:	a201      	add	r2, pc, #4	; (adr r2, 39b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    39b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    39b8:	00003a39 	.word	0x00003a39
    39bc:	00003a61 	.word	0x00003a61
    39c0:	00003a61 	.word	0x00003a61
    39c4:	00003a4d 	.word	0x00003a4d
    39c8:	00003a61 	.word	0x00003a61
    39cc:	00003a61 	.word	0x00003a61
    39d0:	00003a61 	.word	0x00003a61
    39d4:	00003a61 	.word	0x00003a61
    39d8:	00003a61 	.word	0x00003a61
    39dc:	00003a61 	.word	0x00003a61
    39e0:	00003a61 	.word	0x00003a61
    39e4:	00003a25 	.word	0x00003a25
    39e8:	00003a61 	.word	0x00003a61
    39ec:	00003a11 	.word	0x00003a11
    39f0:	00003a61 	.word	0x00003a61
    39f4:	00003a61 	.word	0x00003a61
    39f8:	000039fd 	.word	0x000039fd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    39fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    39fe:	f043 0301 	orr.w	r3, r3, #1
    3a02:	657b      	str	r3, [r7, #84]	; 0x54
    3a04:	683b      	ldr	r3, [r7, #0]
    3a06:	3301      	adds	r3, #1
    3a08:	603b      	str	r3, [r7, #0]
    3a0a:	2301      	movs	r3, #1
    3a0c:	64bb      	str	r3, [r7, #72]	; 0x48
    3a0e:	e02a      	b.n	3a66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a12:	f043 0302 	orr.w	r3, r3, #2
    3a16:	657b      	str	r3, [r7, #84]	; 0x54
    3a18:	683b      	ldr	r3, [r7, #0]
    3a1a:	3301      	adds	r3, #1
    3a1c:	603b      	str	r3, [r7, #0]
    3a1e:	2301      	movs	r3, #1
    3a20:	64bb      	str	r3, [r7, #72]	; 0x48
    3a22:	e020      	b.n	3a66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a26:	f043 0304 	orr.w	r3, r3, #4
    3a2a:	657b      	str	r3, [r7, #84]	; 0x54
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	3301      	adds	r3, #1
    3a30:	603b      	str	r3, [r7, #0]
    3a32:	2301      	movs	r3, #1
    3a34:	64bb      	str	r3, [r7, #72]	; 0x48
    3a36:	e016      	b.n	3a66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a3a:	f043 0308 	orr.w	r3, r3, #8
    3a3e:	657b      	str	r3, [r7, #84]	; 0x54
    3a40:	683b      	ldr	r3, [r7, #0]
    3a42:	3301      	adds	r3, #1
    3a44:	603b      	str	r3, [r7, #0]
    3a46:	2301      	movs	r3, #1
    3a48:	64bb      	str	r3, [r7, #72]	; 0x48
    3a4a:	e00c      	b.n	3a66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a4e:	f043 0310 	orr.w	r3, r3, #16
    3a52:	657b      	str	r3, [r7, #84]	; 0x54
    3a54:	683b      	ldr	r3, [r7, #0]
    3a56:	3301      	adds	r3, #1
    3a58:	603b      	str	r3, [r7, #0]
    3a5a:	2301      	movs	r3, #1
    3a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    3a5e:	e002      	b.n	3a66 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    3a60:	2300      	movs	r3, #0
    3a62:	64bb      	str	r3, [r7, #72]	; 0x48
    3a64:	bf00      	nop
      }
    } while (n);
    3a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d000      	beq.n	3a6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    3a6c:	e79c      	b.n	39a8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    3a6e:	2300      	movs	r3, #0
    3a70:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    3a72:	683b      	ldr	r3, [r7, #0]
    3a74:	781b      	ldrb	r3, [r3, #0]
    3a76:	4618      	mov	r0, r3
    3a78:	f7ff fb1a 	bl	30b0 <_is_digit(char)>
    3a7c:	4603      	mov	r3, r0
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d005      	beq.n	3a8e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    3a82:	463b      	mov	r3, r7
    3a84:	4618      	mov	r0, r3
    3a86:	f7ff fb27 	bl	30d8 <_atoi(char const**)>
    3a8a:	6538      	str	r0, [r7, #80]	; 0x50
    3a8c:	e018      	b.n	3ac0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    3a8e:	683b      	ldr	r3, [r7, #0]
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	2b2a      	cmp	r3, #42	; 0x2a
    3a94:	d114      	bne.n	3ac0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    3a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a98:	1d1a      	adds	r2, r3, #4
    3a9a:	66ba      	str	r2, [r7, #104]	; 0x68
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    3aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	da07      	bge.n	3ab6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    3aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3aa8:	f043 0302 	orr.w	r3, r3, #2
    3aac:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    3aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ab0:	425b      	negs	r3, r3
    3ab2:	653b      	str	r3, [r7, #80]	; 0x50
    3ab4:	e001      	b.n	3aba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    3ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ab8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    3aba:	683b      	ldr	r3, [r7, #0]
    3abc:	3301      	adds	r3, #1
    3abe:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    3ac0:	2300      	movs	r3, #0
    3ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    3ac4:	683b      	ldr	r3, [r7, #0]
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	2b2e      	cmp	r3, #46	; 0x2e
    3aca:	d124      	bne.n	3b16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    3acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3ad2:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    3ad4:	683b      	ldr	r3, [r7, #0]
    3ad6:	3301      	adds	r3, #1
    3ad8:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    3ada:	683b      	ldr	r3, [r7, #0]
    3adc:	781b      	ldrb	r3, [r3, #0]
    3ade:	4618      	mov	r0, r3
    3ae0:	f7ff fae6 	bl	30b0 <_is_digit(char)>
    3ae4:	4603      	mov	r3, r0
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d005      	beq.n	3af6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    3aea:	463b      	mov	r3, r7
    3aec:	4618      	mov	r0, r3
    3aee:	f7ff faf3 	bl	30d8 <_atoi(char const**)>
    3af2:	64f8      	str	r0, [r7, #76]	; 0x4c
    3af4:	e00f      	b.n	3b16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    3af6:	683b      	ldr	r3, [r7, #0]
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	2b2a      	cmp	r3, #42	; 0x2a
    3afc:	d10b      	bne.n	3b16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    3afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3b00:	1d1a      	adds	r2, r3, #4
    3b02:	66ba      	str	r2, [r7, #104]	; 0x68
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    3b10:	683b      	ldr	r3, [r7, #0]
    3b12:	3301      	adds	r3, #1
    3b14:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    3b16:	683b      	ldr	r3, [r7, #0]
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	3b68      	subs	r3, #104	; 0x68
    3b1c:	2b12      	cmp	r3, #18
    3b1e:	d867      	bhi.n	3bf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    3b20:	a201      	add	r2, pc, #4	; (adr r2, 3b28 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    3b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b26:	bf00      	nop
    3b28:	00003b9b 	.word	0x00003b9b
    3b2c:	00003bf1 	.word	0x00003bf1
    3b30:	00003bd1 	.word	0x00003bd1
    3b34:	00003bf1 	.word	0x00003bf1
    3b38:	00003b75 	.word	0x00003b75
    3b3c:	00003bf1 	.word	0x00003bf1
    3b40:	00003bf1 	.word	0x00003bf1
    3b44:	00003bf1 	.word	0x00003bf1
    3b48:	00003bf1 	.word	0x00003bf1
    3b4c:	00003bf1 	.word	0x00003bf1
    3b50:	00003bf1 	.word	0x00003bf1
    3b54:	00003bf1 	.word	0x00003bf1
    3b58:	00003bc1 	.word	0x00003bc1
    3b5c:	00003bf1 	.word	0x00003bf1
    3b60:	00003bf1 	.word	0x00003bf1
    3b64:	00003bf1 	.word	0x00003bf1
    3b68:	00003bf1 	.word	0x00003bf1
    3b6c:	00003bf1 	.word	0x00003bf1
    3b70:	00003be1 	.word	0x00003be1
      case 'l' :
        flags |= FLAGS_LONG;
    3b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b7a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3b7c:	683b      	ldr	r3, [r7, #0]
    3b7e:	3301      	adds	r3, #1
    3b80:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	2b6c      	cmp	r3, #108	; 0x6c
    3b88:	d134      	bne.n	3bf4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    3b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3b90:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3b92:	683b      	ldr	r3, [r7, #0]
    3b94:	3301      	adds	r3, #1
    3b96:	603b      	str	r3, [r7, #0]
        }
        break;
    3b98:	e02c      	b.n	3bf4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    3b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3ba0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3ba2:	683b      	ldr	r3, [r7, #0]
    3ba4:	3301      	adds	r3, #1
    3ba6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    3ba8:	683b      	ldr	r3, [r7, #0]
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	2b68      	cmp	r3, #104	; 0x68
    3bae:	d125      	bne.n	3bfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    3bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3bb6:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    3bb8:	683b      	ldr	r3, [r7, #0]
    3bba:	3301      	adds	r3, #1
    3bbc:	603b      	str	r3, [r7, #0]
        }
        break;
    3bbe:	e01d      	b.n	3bfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3bc6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3bc8:	683b      	ldr	r3, [r7, #0]
    3bca:	3301      	adds	r3, #1
    3bcc:	603b      	str	r3, [r7, #0]
        break;
    3bce:	e016      	b.n	3bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3bd6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3bd8:	683b      	ldr	r3, [r7, #0]
    3bda:	3301      	adds	r3, #1
    3bdc:	603b      	str	r3, [r7, #0]
        break;
    3bde:	e00e      	b.n	3bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3be6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    3be8:	683b      	ldr	r3, [r7, #0]
    3bea:	3301      	adds	r3, #1
    3bec:	603b      	str	r3, [r7, #0]
        break;
    3bee:	e006      	b.n	3bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    3bf0:	bf00      	nop
    3bf2:	e004      	b.n	3bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    3bf4:	bf00      	nop
    3bf6:	e002      	b.n	3bfe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    3bf8:	00003067 	.word	0x00003067
        break;
    3bfc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    3bfe:	683b      	ldr	r3, [r7, #0]
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	3b25      	subs	r3, #37	; 0x25
    3c04:	2b53      	cmp	r3, #83	; 0x53
    3c06:	f200 82ef 	bhi.w	41e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x894>
    3c0a:	a201      	add	r2, pc, #4	; (adr r2, 3c10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    3c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c10:	000041d1 	.word	0x000041d1
    3c14:	000041e9 	.word	0x000041e9
    3c18:	000041e9 	.word	0x000041e9
    3c1c:	000041e9 	.word	0x000041e9
    3c20:	000041e9 	.word	0x000041e9
    3c24:	000041e9 	.word	0x000041e9
    3c28:	000041e9 	.word	0x000041e9
    3c2c:	000041e9 	.word	0x000041e9
    3c30:	000041e9 	.word	0x000041e9
    3c34:	000041e9 	.word	0x000041e9
    3c38:	000041e9 	.word	0x000041e9
    3c3c:	000041e9 	.word	0x000041e9
    3c40:	000041e9 	.word	0x000041e9
    3c44:	000041e9 	.word	0x000041e9
    3c48:	000041e9 	.word	0x000041e9
    3c4c:	000041e9 	.word	0x000041e9
    3c50:	000041e9 	.word	0x000041e9
    3c54:	000041e9 	.word	0x000041e9
    3c58:	000041e9 	.word	0x000041e9
    3c5c:	000041e9 	.word	0x000041e9
    3c60:	000041e9 	.word	0x000041e9
    3c64:	000041e9 	.word	0x000041e9
    3c68:	000041e9 	.word	0x000041e9
    3c6c:	000041e9 	.word	0x000041e9
    3c70:	000041e9 	.word	0x000041e9
    3c74:	000041e9 	.word	0x000041e9
    3c78:	000041e9 	.word	0x000041e9
    3c7c:	000041e9 	.word	0x000041e9
    3c80:	000041e9 	.word	0x000041e9
    3c84:	000041e9 	.word	0x000041e9
    3c88:	000041e9 	.word	0x000041e9
    3c8c:	000041e9 	.word	0x000041e9
    3c90:	000041e9 	.word	0x000041e9
    3c94:	00003fef 	.word	0x00003fef
    3c98:	000041e9 	.word	0x000041e9
    3c9c:	000041e9 	.word	0x000041e9
    3ca0:	000041e9 	.word	0x000041e9
    3ca4:	000041e9 	.word	0x000041e9
    3ca8:	000041e9 	.word	0x000041e9
    3cac:	000041e9 	.word	0x000041e9
    3cb0:	000041e9 	.word	0x000041e9
    3cb4:	000041e9 	.word	0x000041e9
    3cb8:	000041e9 	.word	0x000041e9
    3cbc:	000041e9 	.word	0x000041e9
    3cc0:	000041e9 	.word	0x000041e9
    3cc4:	000041e9 	.word	0x000041e9
    3cc8:	000041e9 	.word	0x000041e9
    3ccc:	000041e9 	.word	0x000041e9
    3cd0:	000041e9 	.word	0x000041e9
    3cd4:	000041e9 	.word	0x000041e9
    3cd8:	000041e9 	.word	0x000041e9
    3cdc:	00003d61 	.word	0x00003d61
    3ce0:	000041e9 	.word	0x000041e9
    3ce4:	000041e9 	.word	0x000041e9
    3ce8:	000041e9 	.word	0x000041e9
    3cec:	000041e9 	.word	0x000041e9
    3cf0:	000041e9 	.word	0x000041e9
    3cf4:	000041e9 	.word	0x000041e9
    3cf8:	000041e9 	.word	0x000041e9
    3cfc:	000041e9 	.word	0x000041e9
    3d00:	000041e9 	.word	0x000041e9
    3d04:	00003d61 	.word	0x00003d61
    3d08:	0000402b 	.word	0x0000402b
    3d0c:	00003d61 	.word	0x00003d61
    3d10:	000041e9 	.word	0x000041e9
    3d14:	00003fef 	.word	0x00003fef
    3d18:	000041e9 	.word	0x000041e9
    3d1c:	000041e9 	.word	0x000041e9
    3d20:	00003d61 	.word	0x00003d61
    3d24:	000041e9 	.word	0x000041e9
    3d28:	000041e9 	.word	0x000041e9
    3d2c:	000041e9 	.word	0x000041e9
    3d30:	000041e9 	.word	0x000041e9
    3d34:	000041e9 	.word	0x000041e9
    3d38:	00003d61 	.word	0x00003d61
    3d3c:	00004189 	.word	0x00004189
    3d40:	000041e9 	.word	0x000041e9
    3d44:	000041e9 	.word	0x000041e9
    3d48:	000040b3 	.word	0x000040b3
    3d4c:	000041e9 	.word	0x000041e9
    3d50:	00003d61 	.word	0x00003d61
    3d54:	000041e9 	.word	0x000041e9
    3d58:	000041e9 	.word	0x000041e9
    3d5c:	00003d61 	.word	0x00003d61
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    3d60:	683b      	ldr	r3, [r7, #0]
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	2b78      	cmp	r3, #120	; 0x78
    3d66:	d003      	beq.n	3d70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    3d68:	683b      	ldr	r3, [r7, #0]
    3d6a:	781b      	ldrb	r3, [r3, #0]
    3d6c:	2b58      	cmp	r3, #88	; 0x58
    3d6e:	d102      	bne.n	3d76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    3d70:	2310      	movs	r3, #16
    3d72:	643b      	str	r3, [r7, #64]	; 0x40
    3d74:	e013      	b.n	3d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    3d76:	683b      	ldr	r3, [r7, #0]
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	2b6f      	cmp	r3, #111	; 0x6f
    3d7c:	d102      	bne.n	3d84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    3d7e:	2308      	movs	r3, #8
    3d80:	643b      	str	r3, [r7, #64]	; 0x40
    3d82:	e00c      	b.n	3d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    3d84:	683b      	ldr	r3, [r7, #0]
    3d86:	781b      	ldrb	r3, [r3, #0]
    3d88:	2b62      	cmp	r3, #98	; 0x62
    3d8a:	d102      	bne.n	3d92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    3d8c:	2302      	movs	r3, #2
    3d8e:	643b      	str	r3, [r7, #64]	; 0x40
    3d90:	e005      	b.n	3d9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    3d92:	230a      	movs	r3, #10
    3d94:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d98:	f023 0310 	bic.w	r3, r3, #16
    3d9c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    3d9e:	683b      	ldr	r3, [r7, #0]
    3da0:	781b      	ldrb	r3, [r3, #0]
    3da2:	2b58      	cmp	r3, #88	; 0x58
    3da4:	d103      	bne.n	3dae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    3da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3da8:	f043 0320 	orr.w	r3, r3, #32
    3dac:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    3dae:	683b      	ldr	r3, [r7, #0]
    3db0:	781b      	ldrb	r3, [r3, #0]
    3db2:	2b69      	cmp	r3, #105	; 0x69
    3db4:	d007      	beq.n	3dc6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    3db6:	683b      	ldr	r3, [r7, #0]
    3db8:	781b      	ldrb	r3, [r3, #0]
    3dba:	2b64      	cmp	r3, #100	; 0x64
    3dbc:	d003      	beq.n	3dc6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3dc0:	f023 030c 	bic.w	r3, r3, #12
    3dc4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    3dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d003      	beq.n	3dd8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    3dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3dd2:	f023 0301 	bic.w	r3, r3, #1
    3dd6:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    3dd8:	683b      	ldr	r3, [r7, #0]
    3dda:	781b      	ldrb	r3, [r3, #0]
    3ddc:	2b69      	cmp	r3, #105	; 0x69
    3dde:	d004      	beq.n	3dea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    3de0:	683b      	ldr	r3, [r7, #0]
    3de2:	781b      	ldrb	r3, [r3, #0]
    3de4:	2b64      	cmp	r3, #100	; 0x64
    3de6:	f040 808e 	bne.w	3f06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    3dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3df0:	2b00      	cmp	r3, #0
    3df2:	d02f      	beq.n	3e54 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    3df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3df6:	3307      	adds	r3, #7
    3df8:	f023 0307 	bic.w	r3, r3, #7
    3dfc:	f103 0208 	add.w	r2, r3, #8
    3e00:	66ba      	str	r2, [r7, #104]	; 0x68
    3e02:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e06:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3e0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    3e0e:	2a00      	cmp	r2, #0
    3e10:	f173 0100 	sbcs.w	r1, r3, #0
    3e14:	da02      	bge.n	3e1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    3e16:	4252      	negs	r2, r2
    3e18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3e1c:	4610      	mov	r0, r2
    3e1e:	4619      	mov	r1, r3
    3e20:	697b      	ldr	r3, [r7, #20]
    3e22:	0fdb      	lsrs	r3, r3, #31
    3e24:	b2dc      	uxtb	r4, r3
    3e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e28:	461a      	mov	r2, r3
    3e2a:	f04f 0300 	mov.w	r3, #0
    3e2e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    3e30:	9508      	str	r5, [sp, #32]
    3e32:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    3e34:	9507      	str	r5, [sp, #28]
    3e36:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    3e38:	9506      	str	r5, [sp, #24]
    3e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3e3e:	9402      	str	r4, [sp, #8]
    3e40:	e9cd 0100 	strd	r0, r1, [sp]
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e48:	68b9      	ldr	r1, [r7, #8]
    3e4a:	68f8      	ldr	r0, [r7, #12]
    3e4c:	f7ff faf1 	bl	3432 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3e50:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    3e52:	e0c8      	b.n	3fe6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    3e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d01e      	beq.n	3e9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    3e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3e60:	1d1a      	adds	r2, r3, #4
    3e62:	66ba      	str	r2, [r7, #104]	; 0x68
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3e68:	69fb      	ldr	r3, [r7, #28]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	bfb8      	it	lt
    3e6e:	425b      	neglt	r3, r3
    3e70:	4619      	mov	r1, r3
    3e72:	69fb      	ldr	r3, [r7, #28]
    3e74:	0fdb      	lsrs	r3, r3, #31
    3e76:	b2db      	uxtb	r3, r3
    3e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3e7a:	9205      	str	r2, [sp, #20]
    3e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3e7e:	9204      	str	r2, [sp, #16]
    3e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3e82:	9203      	str	r2, [sp, #12]
    3e84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3e86:	9202      	str	r2, [sp, #8]
    3e88:	9301      	str	r3, [sp, #4]
    3e8a:	9100      	str	r1, [sp, #0]
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3e90:	68b9      	ldr	r1, [r7, #8]
    3e92:	68f8      	ldr	r0, [r7, #12]
    3e94:	f7ff fa65 	bl	3362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3e98:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3e9a:	e0a4      	b.n	3fe6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d005      	beq.n	3eb2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    3ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ea8:	1d1a      	adds	r2, r3, #4
    3eaa:	66ba      	str	r2, [r7, #104]	; 0x68
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	e00e      	b.n	3ed0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    3eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d005      	beq.n	3ec8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    3ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ebe:	1d1a      	adds	r2, r3, #4
    3ec0:	66ba      	str	r2, [r7, #104]	; 0x68
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	b21b      	sxth	r3, r3
    3ec6:	e003      	b.n	3ed0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    3ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3eca:	1d1a      	adds	r2, r3, #4
    3ecc:	66ba      	str	r2, [r7, #104]	; 0x68
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3ed2:	6a3b      	ldr	r3, [r7, #32]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	bfb8      	it	lt
    3ed8:	425b      	neglt	r3, r3
    3eda:	4619      	mov	r1, r3
    3edc:	6a3b      	ldr	r3, [r7, #32]
    3ede:	0fdb      	lsrs	r3, r3, #31
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3ee4:	9205      	str	r2, [sp, #20]
    3ee6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3ee8:	9204      	str	r2, [sp, #16]
    3eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3eec:	9203      	str	r2, [sp, #12]
    3eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3ef0:	9202      	str	r2, [sp, #8]
    3ef2:	9301      	str	r3, [sp, #4]
    3ef4:	9100      	str	r1, [sp, #0]
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3efa:	68b9      	ldr	r1, [r7, #8]
    3efc:	68f8      	ldr	r0, [r7, #12]
    3efe:	f7ff fa30 	bl	3362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3f02:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3f04:	e06f      	b.n	3fe6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d020      	beq.n	3f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3f12:	3307      	adds	r3, #7
    3f14:	f023 0307 	bic.w	r3, r3, #7
    3f18:	f103 0208 	add.w	r2, r3, #8
    3f1c:	66ba      	str	r2, [r7, #104]	; 0x68
    3f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3f24:	4608      	mov	r0, r1
    3f26:	f04f 0100 	mov.w	r1, #0
    3f2a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    3f2c:	9408      	str	r4, [sp, #32]
    3f2e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    3f30:	9407      	str	r4, [sp, #28]
    3f32:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    3f34:	9406      	str	r4, [sp, #24]
    3f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3f3a:	2100      	movs	r1, #0
    3f3c:	9102      	str	r1, [sp, #8]
    3f3e:	e9cd 2300 	strd	r2, r3, [sp]
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f46:	68b9      	ldr	r1, [r7, #8]
    3f48:	68f8      	ldr	r0, [r7, #12]
    3f4a:	f7ff fa72 	bl	3432 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    3f4e:	6478      	str	r0, [r7, #68]	; 0x44
    3f50:	e049      	b.n	3fe6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    3f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d016      	beq.n	3f8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3f5e:	1d1a      	adds	r2, r3, #4
    3f60:	66ba      	str	r2, [r7, #104]	; 0x68
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3f66:	9205      	str	r2, [sp, #20]
    3f68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3f6a:	9204      	str	r2, [sp, #16]
    3f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3f6e:	9203      	str	r2, [sp, #12]
    3f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3f72:	9202      	str	r2, [sp, #8]
    3f74:	2200      	movs	r2, #0
    3f76:	9201      	str	r2, [sp, #4]
    3f78:	9300      	str	r3, [sp, #0]
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3f7e:	68b9      	ldr	r1, [r7, #8]
    3f80:	68f8      	ldr	r0, [r7, #12]
    3f82:	f7ff f9ee 	bl	3362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3f86:	6478      	str	r0, [r7, #68]	; 0x44
    3f88:	e02d      	b.n	3fe6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3f90:	2b00      	cmp	r3, #0
    3f92:	d005      	beq.n	3fa0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    3f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3f96:	1d1a      	adds	r2, r3, #4
    3f98:	66ba      	str	r2, [r7, #104]	; 0x68
    3f9a:	681b      	ldr	r3, [r3, #0]
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	e00e      	b.n	3fbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    3fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d005      	beq.n	3fb6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    3faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3fac:	1d1a      	adds	r2, r3, #4
    3fae:	66ba      	str	r2, [r7, #104]	; 0x68
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	b29b      	uxth	r3, r3
    3fb4:	e003      	b.n	3fbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    3fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3fb8:	1d1a      	adds	r2, r3, #4
    3fba:	66ba      	str	r2, [r7, #104]	; 0x68
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3fc2:	9305      	str	r3, [sp, #20]
    3fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3fc6:	9304      	str	r3, [sp, #16]
    3fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3fca:	9303      	str	r3, [sp, #12]
    3fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3fce:	9302      	str	r3, [sp, #8]
    3fd0:	2300      	movs	r3, #0
    3fd2:	9301      	str	r3, [sp, #4]
    3fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fd6:	9300      	str	r3, [sp, #0]
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3fdc:	68b9      	ldr	r1, [r7, #8]
    3fde:	68f8      	ldr	r0, [r7, #12]
    3fe0:	f7ff f9bf 	bl	3362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3fe4:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    3fe6:	683b      	ldr	r3, [r7, #0]
    3fe8:	3301      	adds	r3, #1
    3fea:	603b      	str	r3, [r7, #0]
        break;
    3fec:	e109      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ff0:	3307      	adds	r3, #7
    3ff2:	f023 0307 	bic.w	r3, r3, #7
    3ff6:	f103 0208 	add.w	r2, r3, #8
    3ffa:	66ba      	str	r2, [r7, #104]	; 0x68
    3ffc:	ed93 7b00 	vldr	d7, [r3]
    4000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4002:	9302      	str	r3, [sp, #8]
    4004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4006:	9301      	str	r3, [sp, #4]
    4008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    400a:	9300      	str	r3, [sp, #0]
    400c:	eeb0 0a47 	vmov.f32	s0, s14
    4010:	eef0 0a67 	vmov.f32	s1, s15
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4018:	68b9      	ldr	r1, [r7, #8]
    401a:	68f8      	ldr	r0, [r7, #12]
    401c:	f7ff fa78 	bl	3510 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    4020:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    4022:	683b      	ldr	r3, [r7, #0]
    4024:	3301      	adds	r3, #1
    4026:	603b      	str	r3, [r7, #0]
        break;
    4028:	e0eb      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    402a:	2301      	movs	r3, #1
    402c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    402e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4030:	f003 0302 	and.w	r3, r3, #2
    4034:	2b00      	cmp	r3, #0
    4036:	d113      	bne.n	4060 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
          while (l++ < width) {
    4038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    403a:	1c5a      	adds	r2, r3, #1
    403c:	63fa      	str	r2, [r7, #60]	; 0x3c
    403e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4040:	429a      	cmp	r2, r3
    4042:	bf8c      	ite	hi
    4044:	2301      	movhi	r3, #1
    4046:	2300      	movls	r3, #0
    4048:	b2db      	uxtb	r3, r3
    404a:	2b00      	cmp	r3, #0
    404c:	d008      	beq.n	4060 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70c>
            out(' ', buffer, idx++, maxlen);
    404e:	68fc      	ldr	r4, [r7, #12]
    4050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4052:	1c53      	adds	r3, r2, #1
    4054:	647b      	str	r3, [r7, #68]	; 0x44
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	68b9      	ldr	r1, [r7, #8]
    405a:	2020      	movs	r0, #32
    405c:	47a0      	blx	r4
          while (l++ < width) {
    405e:	e7eb      	b.n	4038 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4060:	68fc      	ldr	r4, [r7, #12]
    4062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4064:	1d1a      	adds	r2, r3, #4
    4066:	66ba      	str	r2, [r7, #104]	; 0x68
    4068:	681b      	ldr	r3, [r3, #0]
    406a:	b2d8      	uxtb	r0, r3
    406c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    406e:	1c53      	adds	r3, r2, #1
    4070:	647b      	str	r3, [r7, #68]	; 0x44
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	68b9      	ldr	r1, [r7, #8]
    4076:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    4078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    407a:	f003 0302 	and.w	r3, r3, #2
    407e:	2b00      	cmp	r3, #0
    4080:	d013      	beq.n	40aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
          while (l++ < width) {
    4082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4084:	1c5a      	adds	r2, r3, #1
    4086:	63fa      	str	r2, [r7, #60]	; 0x3c
    4088:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    408a:	429a      	cmp	r2, r3
    408c:	bf8c      	ite	hi
    408e:	2301      	movhi	r3, #1
    4090:	2300      	movls	r3, #0
    4092:	b2db      	uxtb	r3, r3
    4094:	2b00      	cmp	r3, #0
    4096:	d008      	beq.n	40aa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x756>
            out(' ', buffer, idx++, maxlen);
    4098:	68fc      	ldr	r4, [r7, #12]
    409a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    409c:	1c53      	adds	r3, r2, #1
    409e:	647b      	str	r3, [r7, #68]	; 0x44
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	68b9      	ldr	r1, [r7, #8]
    40a4:	2020      	movs	r0, #32
    40a6:	47a0      	blx	r4
          while (l++ < width) {
    40a8:	e7eb      	b.n	4082 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72e>
          }
        }
        format++;
    40aa:	683b      	ldr	r3, [r7, #0]
    40ac:	3301      	adds	r3, #1
    40ae:	603b      	str	r3, [r7, #0]
        break;
    40b0:	e0a7      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    40b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    40b4:	1d1a      	adds	r2, r3, #4
    40b6:	66ba      	str	r2, [r7, #104]	; 0x68
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    40bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    40be:	f7fe ffe0 	bl	3082 <_strlen(char const*)>
    40c2:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    40c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    40ca:	2b00      	cmp	r3, #0
    40cc:	d007      	beq.n	40de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x78a>
          l = (l < precision ? l : precision);
    40ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    40d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40d2:	429a      	cmp	r2, r3
    40d4:	d201      	bcs.n	40da <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    40d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40d8:	e000      	b.n	40dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
    40da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    40de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40e0:	f003 0302 	and.w	r3, r3, #2
    40e4:	2b00      	cmp	r3, #0
    40e6:	d113      	bne.n	4110 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
          while (l++ < width) {
    40e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ea:	1c5a      	adds	r2, r3, #1
    40ec:	637a      	str	r2, [r7, #52]	; 0x34
    40ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    40f0:	429a      	cmp	r2, r3
    40f2:	bf8c      	ite	hi
    40f4:	2301      	movhi	r3, #1
    40f6:	2300      	movls	r3, #0
    40f8:	b2db      	uxtb	r3, r3
    40fa:	2b00      	cmp	r3, #0
    40fc:	d008      	beq.n	4110 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
            out(' ', buffer, idx++, maxlen);
    40fe:	68fc      	ldr	r4, [r7, #12]
    4100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4102:	1c53      	adds	r3, r2, #1
    4104:	647b      	str	r3, [r7, #68]	; 0x44
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	68b9      	ldr	r1, [r7, #8]
    410a:	2020      	movs	r0, #32
    410c:	47a0      	blx	r4
          while (l++ < width) {
    410e:	e7eb      	b.n	40e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x794>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    4110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4112:	781b      	ldrb	r3, [r3, #0]
    4114:	2b00      	cmp	r3, #0
    4116:	d00b      	beq.n	4130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    4118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    411e:	2b00      	cmp	r3, #0
    4120:	d004      	beq.n	412c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d8>
    4122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4124:	1e5a      	subs	r2, r3, #1
    4126:	64fa      	str	r2, [r7, #76]	; 0x4c
    4128:	2b00      	cmp	r3, #0
    412a:	d001      	beq.n	4130 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    412c:	2301      	movs	r3, #1
    412e:	e000      	b.n	4132 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7de>
    4130:	2300      	movs	r3, #0
    4132:	2b00      	cmp	r3, #0
    4134:	d00b      	beq.n	414e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7fa>
          out(*(p++), buffer, idx++, maxlen);
    4136:	68fc      	ldr	r4, [r7, #12]
    4138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    413a:	1c5a      	adds	r2, r3, #1
    413c:	63ba      	str	r2, [r7, #56]	; 0x38
    413e:	7818      	ldrb	r0, [r3, #0]
    4140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4142:	1c53      	adds	r3, r2, #1
    4144:	647b      	str	r3, [r7, #68]	; 0x44
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	68b9      	ldr	r1, [r7, #8]
    414a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    414c:	e7e0      	b.n	4110 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7bc>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    414e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4150:	f003 0302 	and.w	r3, r3, #2
    4154:	2b00      	cmp	r3, #0
    4156:	d013      	beq.n	4180 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
          while (l++ < width) {
    4158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    415a:	1c5a      	adds	r2, r3, #1
    415c:	637a      	str	r2, [r7, #52]	; 0x34
    415e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4160:	429a      	cmp	r2, r3
    4162:	bf8c      	ite	hi
    4164:	2301      	movhi	r3, #1
    4166:	2300      	movls	r3, #0
    4168:	b2db      	uxtb	r3, r3
    416a:	2b00      	cmp	r3, #0
    416c:	d008      	beq.n	4180 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82c>
            out(' ', buffer, idx++, maxlen);
    416e:	68fc      	ldr	r4, [r7, #12]
    4170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4172:	1c53      	adds	r3, r2, #1
    4174:	647b      	str	r3, [r7, #68]	; 0x44
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	68b9      	ldr	r1, [r7, #8]
    417a:	2020      	movs	r0, #32
    417c:	47a0      	blx	r4
          while (l++ < width) {
    417e:	e7eb      	b.n	4158 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x804>
          }
        }
        format++;
    4180:	683b      	ldr	r3, [r7, #0]
    4182:	3301      	adds	r3, #1
    4184:	603b      	str	r3, [r7, #0]
        break;
    4186:	e03c      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    4188:	2308      	movs	r3, #8
    418a:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    418e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    4192:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    4194:	2300      	movs	r3, #0
    4196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    419a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    419c:	1d1a      	adds	r2, r3, #4
    419e:	66ba      	str	r2, [r7, #104]	; 0x68
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	461a      	mov	r2, r3
    41a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    41a6:	9305      	str	r3, [sp, #20]
    41a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    41aa:	9304      	str	r3, [sp, #16]
    41ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    41ae:	9303      	str	r3, [sp, #12]
    41b0:	2310      	movs	r3, #16
    41b2:	9302      	str	r3, [sp, #8]
    41b4:	2300      	movs	r3, #0
    41b6:	9301      	str	r3, [sp, #4]
    41b8:	9200      	str	r2, [sp, #0]
    41ba:	687b      	ldr	r3, [r7, #4]
    41bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41be:	68b9      	ldr	r1, [r7, #8]
    41c0:	68f8      	ldr	r0, [r7, #12]
    41c2:	f7ff f8ce 	bl	3362 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    41c6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    41c8:	683b      	ldr	r3, [r7, #0]
    41ca:	3301      	adds	r3, #1
    41cc:	603b      	str	r3, [r7, #0]
        break;
    41ce:	e018      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    41d0:	68fc      	ldr	r4, [r7, #12]
    41d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41d4:	1c53      	adds	r3, r2, #1
    41d6:	647b      	str	r3, [r7, #68]	; 0x44
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	68b9      	ldr	r1, [r7, #8]
    41dc:	2025      	movs	r0, #37	; 0x25
    41de:	47a0      	blx	r4
        format++;
    41e0:	683b      	ldr	r3, [r7, #0]
    41e2:	3301      	adds	r3, #1
    41e4:	603b      	str	r3, [r7, #0]
        break;
    41e6:	e00c      	b.n	4202 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ae>

      default :
        out(*format, buffer, idx++, maxlen);
    41e8:	68fc      	ldr	r4, [r7, #12]
    41ea:	683b      	ldr	r3, [r7, #0]
    41ec:	7818      	ldrb	r0, [r3, #0]
    41ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    41f0:	1c53      	adds	r3, r2, #1
    41f2:	647b      	str	r3, [r7, #68]	; 0x44
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	68b9      	ldr	r1, [r7, #8]
    41f8:	47a0      	blx	r4
        format++;
    41fa:	683b      	ldr	r3, [r7, #0]
    41fc:	3301      	adds	r3, #1
    41fe:	603b      	str	r3, [r7, #0]
        break;
    4200:	bf00      	nop
  while (*format)
    4202:	f7ff bbb5 	b.w	3970 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4206:	68fc      	ldr	r4, [r7, #12]
    4208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	429a      	cmp	r2, r3
    420e:	d302      	bcc.n	4216 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c2>
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	1e5a      	subs	r2, r3, #1
    4214:	e000      	b.n	4218 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
    4216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	68b9      	ldr	r1, [r7, #8]
    421c:	2000      	movs	r0, #0
    421e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    4220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    4222:	4618      	mov	r0, r3
    4224:	3758      	adds	r7, #88	; 0x58
    4226:	46bd      	mov	sp, r7
    4228:	bdb0      	pop	{r4, r5, r7, pc}
    422a:	bf00      	nop

0000422c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    422c:	b40f      	push	{r0, r1, r2, r3}
    422e:	b580      	push	{r7, lr}
    4230:	b0c4      	sub	sp, #272	; 0x110
    4232:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    4234:	f507 738a 	add.w	r3, r7, #276	; 0x114
    4238:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[PRINTF_BUFFER_CHUNK_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    423c:	4639      	mov	r1, r7
    423e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    4242:	9300      	str	r3, [sp, #0]
    4244:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    4248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    424c:	4807      	ldr	r0, [pc, #28]	; (426c <printf+0x40>)
    424e:	f7ff fb81 	bl	3954 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    4252:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    4256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    425a:	4618      	mov	r0, r3
    425c:	f507 7784 	add.w	r7, r7, #264	; 0x108
    4260:	46bd      	mov	sp, r7
    4262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    4266:	b004      	add	sp, #16
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	00002ff5 	.word	0x00002ff5

00004270 <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    4270:	b480      	push	{r7}
    4272:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    4274:	bf00      	nop
    4276:	46bd      	mov	sp, r7
    4278:	f85d 7b04 	ldr.w	r7, [sp], #4
    427c:	4770      	bx	lr

0000427e <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    427e:	b580      	push	{r7, lr}
    4280:	b082      	sub	sp, #8
    4282:	af00      	add	r7, sp, #0
    4284:	6078      	str	r0, [r7, #4]
    4286:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    4288:	6839      	ldr	r1, [r7, #0]
    428a:	6878      	ldr	r0, [r7, #4]
    428c:	f000 f806 	bl	429c <_trace_write_semihosting_stdout(char const*, unsigned int)>
    4290:	4603      	mov	r3, r0
    4292:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    4294:	4618      	mov	r0, r3
    4296:	3708      	adds	r7, #8
    4298:	46bd      	mov	sp, r7
    429a:	bd80      	pop	{r7, pc}

0000429c <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    429c:	b5b0      	push	{r4, r5, r7, lr}
    429e:	b08c      	sub	sp, #48	; 0x30
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    42a6:	4b2c      	ldr	r3, [pc, #176]	; (4358 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	f003 0301 	and.w	r3, r3, #1
    42ae:	2b00      	cmp	r3, #0
    42b0:	bf0c      	ite	eq
    42b2:	2301      	moveq	r3, #1
    42b4:	2300      	movne	r3, #0
    42b6:	b2db      	uxtb	r3, r3
    42b8:	2b00      	cmp	r3, #0
    42ba:	d001      	beq.n	42c0 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    42bc:	683b      	ldr	r3, [r7, #0]
    42be:	e047      	b.n	4350 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    42c0:	4b26      	ldr	r3, [pc, #152]	; (435c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d11d      	bne.n	4304 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    42c8:	4b25      	ldr	r3, [pc, #148]	; (4360 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    42ca:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    42cc:	2304      	movs	r3, #4
    42ce:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    42d0:	2303      	movs	r3, #3
    42d2:	613b      	str	r3, [r7, #16]
    42d4:	2301      	movs	r3, #1
    42d6:	62bb      	str	r3, [r7, #40]	; 0x28
    42d8:	f107 0308 	add.w	r3, r7, #8
    42dc:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    42de:	6abc      	ldr	r4, [r7, #40]	; 0x28
    42e0:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    42e2:	4620      	mov	r0, r4
    42e4:	4629      	mov	r1, r5
    42e6:	beab      	bkpt	0x00ab
    42e8:	4604      	mov	r4, r0
    42ea:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    42ec:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    42ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    42f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    42f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    42f6:	d102      	bne.n	42fe <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    42f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42fc:	e028      	b.n	4350 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    42fe:	4a17      	ldr	r2, [pc, #92]	; (435c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4302:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    4304:	4b15      	ldr	r3, [pc, #84]	; (435c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    430e:	683b      	ldr	r3, [r7, #0]
    4310:	613b      	str	r3, [r7, #16]
    4312:	2305      	movs	r3, #5
    4314:	61fb      	str	r3, [r7, #28]
    4316:	f107 0308 	add.w	r3, r7, #8
    431a:	61bb      	str	r3, [r7, #24]
  );
    431c:	69fc      	ldr	r4, [r7, #28]
    431e:	69bd      	ldr	r5, [r7, #24]
    4320:	4620      	mov	r0, r4
    4322:	4629      	mov	r1, r5
    4324:	beab      	bkpt	0x00ab
    4326:	4604      	mov	r4, r0
    4328:	617c      	str	r4, [r7, #20]
  return value;
    432a:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    432c:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4334:	d102      	bne.n	433c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    4336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    433a:	e009      	b.n	4350 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    433c:	683b      	ldr	r3, [r7, #0]
    433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4340:	429a      	cmp	r2, r3
    4342:	d102      	bne.n	434a <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    4344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4348:	e002      	b.n	4350 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    434a:	683a      	ldr	r2, [r7, #0]
    434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    434e:	1ad3      	subs	r3, r2, r3
}
    4350:	4618      	mov	r0, r3
    4352:	3730      	adds	r7, #48	; 0x30
    4354:	46bd      	mov	sp, r7
    4356:	bdb0      	pop	{r4, r5, r7, pc}
    4358:	e000edf0 	.word	0xe000edf0
    435c:	100007e0 	.word	0x100007e0
    4360:	00008c7c 	.word	0x00008c7c

00004364 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    4364:	b480      	push	{r7}
    4366:	b083      	sub	sp, #12
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    436c:	4b0c      	ldr	r3, [pc, #48]	; (43a0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    436e:	681b      	ldr	r3, [r3, #0]
    4370:	68da      	ldr	r2, [r3, #12]
    4372:	4b0b      	ldr	r3, [pc, #44]	; (43a0 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    437a:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    437c:	4b09      	ldr	r3, [pc, #36]	; (43a4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	2200      	movs	r2, #0
    4382:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    4384:	4b07      	ldr	r3, [pc, #28]	; (43a4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    4386:	681b      	ldr	r3, [r3, #0]
    4388:	681a      	ldr	r2, [r3, #0]
    438a:	4b06      	ldr	r3, [pc, #24]	; (43a4 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    438c:	681b      	ldr	r3, [r3, #0]
    438e:	f042 0201 	orr.w	r2, r2, #1
    4392:	601a      	str	r2, [r3, #0]
  }
    4394:	bf00      	nop
    4396:	370c      	adds	r7, #12
    4398:	46bd      	mov	sp, r7
    439a:	f85d 7b04 	ldr.w	r7, [sp], #4
    439e:	4770      	bx	lr
    43a0:	10000018 	.word	0x10000018
    43a4:	10000014 	.word	0x10000014

000043a8 <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    43a8:	b480      	push	{r7}
    43aa:	b083      	sub	sp, #12
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    43b0:	4b04      	ldr	r3, [pc, #16]	; (43c4 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	685b      	ldr	r3, [r3, #4]
  }
    43b6:	4618      	mov	r0, r3
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop
    43c4:	10000014 	.word	0x10000014

000043c8 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    43c8:	b480      	push	{r7}
    43ca:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    43cc:	f8df 001c 	ldr.w	r0, [pc, #28]	; 43ec <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    43d0:	6801      	ldr	r1, [r0, #0]
    43d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    43d6:	6001      	str	r1, [r0, #0]
    43d8:	f3bf 8f4f 	dsb	sy
    43dc:	f3bf 8f6f 	isb	sy
  }
}
    43e0:	bf00      	nop
    43e2:	46bd      	mov	sp, r7
    43e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e8:	4770      	bx	lr
    43ea:	0000      	.short	0x0000
    43ec:	e000ed88 	.word	0xe000ed88

000043f0 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:
  static void SetPlatformController(InterruptController * interrupt_controller)
    43f0:	b480      	push	{r7}
    43f2:	b083      	sub	sp, #12
    43f4:	af00      	add	r7, sp, #0
    43f6:	6078      	str	r0, [r7, #4]
    platform_interrupt_controller = interrupt_controller;
    43f8:	4a04      	ldr	r2, [pc, #16]	; (440c <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	6013      	str	r3, [r2, #0]
  }
    43fe:	bf00      	nop
    4400:	370c      	adds	r7, #12
    4402:	46bd      	mov	sp, r7
    4404:	f85d 7b04 	ldr.w	r7, [sp], #4
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	10000114 	.word	0x10000114

00004410 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    4410:	b580      	push	{r7, lr}
    4412:	b084      	sub	sp, #16
    4414:	af00      	add	r7, sp, #0
    4416:	e9c7 0100 	strd	r0, r1, [r7]
    441a:	e9d7 0100 	ldrd	r0, r1, [r7]
    441e:	f002 f991 	bl	6744 <__aeabi_ul2f>
    4422:	4602      	mov	r2, r0
    4424:	f107 030c 	add.w	r3, r7, #12
    4428:	ee00 2a10 	vmov	s0, r2
    442c:	4618      	mov	r0, r3
    442e:	f000 f85c 	bl	44ea <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4432:	68fb      	ldr	r3, [r7, #12]
    4434:	4618      	mov	r0, r3
    4436:	3710      	adds	r7, #16
    4438:	46bd      	mov	sp, r7
    443a:	bd80      	pop	{r7, pc}

0000443c <units::literals::operator"" _MHz(unsigned long long)>:
    443c:	b580      	push	{r7, lr}
    443e:	b084      	sub	sp, #16
    4440:	af00      	add	r7, sp, #0
    4442:	e9c7 0100 	strd	r0, r1, [r7]
    4446:	e9d7 0100 	ldrd	r0, r1, [r7]
    444a:	f002 f97b 	bl	6744 <__aeabi_ul2f>
    444e:	4602      	mov	r2, r0
    4450:	f107 030c 	add.w	r3, r7, #12
    4454:	ee00 2a10 	vmov	s0, r2
    4458:	4618      	mov	r0, r3
    445a:	f000 f805 	bl	4468 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	4618      	mov	r0, r3
    4462:	3710      	adds	r7, #16
    4464:	46bd      	mov	sp, r7
    4466:	bd80      	pop	{r7, pc}

00004468 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    4468:	b580      	push	{r7, lr}
    446a:	b082      	sub	sp, #8
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
    4470:	ed87 0a00 	vstr	s0, [r7]
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	463a      	mov	r2, r7
    4478:	4611      	mov	r1, r2
    447a:	4618      	mov	r0, r3
    447c:	f000 f805 	bl	448a <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	4618      	mov	r0, r3
    4484:	3708      	adds	r7, #8
    4486:	46bd      	mov	sp, r7
    4488:	bd80      	pop	{r7, pc}

0000448a <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    448a:	b480      	push	{r7}
    448c:	b083      	sub	sp, #12
    448e:	af00      	add	r7, sp, #0
    4490:	6078      	str	r0, [r7, #4]
    4492:	6039      	str	r1, [r7, #0]
    4494:	683b      	ldr	r3, [r7, #0]
    4496:	681a      	ldr	r2, [r3, #0]
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	601a      	str	r2, [r3, #0]
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	4618      	mov	r0, r3
    44a0:	370c      	adds	r7, #12
    44a2:	46bd      	mov	sp, r7
    44a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a8:	4770      	bx	lr

000044aa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    44aa:	b580      	push	{r7, lr}
    44ac:	b086      	sub	sp, #24
    44ae:	af00      	add	r7, sp, #0
    44b0:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    44b2:	6878      	ldr	r0, [r7, #4]
    44b4:	f000 f807 	bl	44c6 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    44b8:	eef0 7a40 	vmov.f32	s15, s0
	}
    44bc:	eeb0 0a67 	vmov.f32	s0, s15
    44c0:	3718      	adds	r7, #24
    44c2:	46bd      	mov	sp, r7
    44c4:	bd80      	pop	{r7, pc}

000044c6 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    44c6:	b480      	push	{r7}
    44c8:	b085      	sub	sp, #20
    44ca:	af00      	add	r7, sp, #0
    44cc:	60f8      	str	r0, [r7, #12]
    44ce:	7239      	strb	r1, [r7, #8]
    44d0:	713a      	strb	r2, [r7, #4]
    44d2:	703b      	strb	r3, [r7, #0]
			return value;
    44d4:	68fb      	ldr	r3, [r7, #12]
    44d6:	681b      	ldr	r3, [r3, #0]
    44d8:	ee07 3a90 	vmov	s15, r3
		}
    44dc:	eeb0 0a67 	vmov.f32	s0, s15
    44e0:	3714      	adds	r7, #20
    44e2:	46bd      	mov	sp, r7
    44e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e8:	4770      	bx	lr

000044ea <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    44ea:	b580      	push	{r7, lr}
    44ec:	b082      	sub	sp, #8
    44ee:	af00      	add	r7, sp, #0
    44f0:	6078      	str	r0, [r7, #4]
    44f2:	ed87 0a00 	vstr	s0, [r7]
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	463a      	mov	r2, r7
    44fa:	4611      	mov	r1, r2
    44fc:	4618      	mov	r0, r3
    44fe:	f7ff ffc4 	bl	448a <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	4618      	mov	r0, r3
    4506:	3708      	adds	r7, #8
    4508:	46bd      	mov	sp, r7
    450a:	bd80      	pop	{r7, pc}

0000450c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    450c:	b580      	push	{r7, lr}
    450e:	b086      	sub	sp, #24
    4510:	af00      	add	r7, sp, #0
    4512:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4514:	6878      	ldr	r0, [r7, #4]
    4516:	f000 f807 	bl	4528 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    451a:	eef0 7a40 	vmov.f32	s15, s0
	}
    451e:	eeb0 0a67 	vmov.f32	s0, s15
    4522:	3718      	adds	r7, #24
    4524:	46bd      	mov	sp, r7
    4526:	bd80      	pop	{r7, pc}

00004528 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4528:	b480      	push	{r7}
    452a:	b085      	sub	sp, #20
    452c:	af00      	add	r7, sp, #0
    452e:	60f8      	str	r0, [r7, #12]
    4530:	7239      	strb	r1, [r7, #8]
    4532:	713a      	strb	r2, [r7, #4]
    4534:	703b      	strb	r3, [r7, #0]
			return value;
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	681b      	ldr	r3, [r3, #0]
    453a:	ee07 3a90 	vmov	s15, r3
		}
    453e:	eeb0 0a67 	vmov.f32	s0, s15
    4542:	3714      	adds	r7, #20
    4544:	46bd      	mov	sp, r7
    4546:	f85d 7b04 	ldr.w	r7, [sp], #4
    454a:	4770      	bx	lr

0000454c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    454c:	b580      	push	{r7, lr}
    454e:	ed2d 8b02 	vpush	{d8}
    4552:	b082      	sub	sp, #8
    4554:	af00      	add	r7, sp, #0
    4556:	6078      	str	r0, [r7, #4]
    4558:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	ed93 8a00 	vldr	s16, [r3]
    4560:	683b      	ldr	r3, [r7, #0]
    4562:	4618      	mov	r0, r3
    4564:	f7ff ffd2 	bl	450c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4568:	eef0 7a40 	vmov.f32	s15, s0
    456c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4574:	bf94      	ite	ls
    4576:	2301      	movls	r3, #1
    4578:	2300      	movhi	r3, #0
    457a:	b2db      	uxtb	r3, r3
		}
    457c:	4618      	mov	r0, r3
    457e:	3708      	adds	r7, #8
    4580:	46bd      	mov	sp, r7
    4582:	ecbd 8b02 	vpop	{d8}
    4586:	bd80      	pop	{r7, pc}

00004588 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
    458e:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    4590:	6879      	ldr	r1, [r7, #4]
    4592:	4803      	ldr	r0, [pc, #12]	; (45a0 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    4594:	f001 fa50 	bl	5a38 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    4598:	bf00      	nop
    459a:	3708      	adds	r7, #8
    459c:	46bd      	mov	sp, r7
    459e:	bd80      	pop	{r7, pc}
    45a0:	10000128 	.word	0x10000128

000045a4 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
 public:
  /// Set the controller for the platform
  ///
  /// @param system_controller - a pointer to the current platform's
  ///        system controller.
  static void SetPlatformController(SystemController * system_controller)
    45a4:	b480      	push	{r7}
    45a6:	b083      	sub	sp, #12
    45a8:	af00      	add	r7, sp, #0
    45aa:	6078      	str	r0, [r7, #4]
  {
    platform_system_controller = system_controller;
    45ac:	4a04      	ldr	r2, [pc, #16]	; (45c0 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	6013      	str	r3, [r2, #0]
  }
    45b2:	bf00      	nop
    45b4:	370c      	adds	r7, #12
    45b6:	46bd      	mov	sp, r7
    45b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    45bc:	4770      	bx	lr
    45be:	bf00      	nop
    45c0:	100007e4 	.word	0x100007e4

000045c4 <sjsu::SystemController::GetPlatformController()>:
  /// Retrieve a reference of the platforms system controller
  static sjsu::SystemController & GetPlatformController()
    45c4:	b480      	push	{r7}
    45c6:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
    45c8:	4b03      	ldr	r3, [pc, #12]	; (45d8 <sjsu::SystemController::GetPlatformController()+0x14>)
    45ca:	681b      	ldr	r3, [r3, #0]
  }
    45cc:	4618      	mov	r0, r3
    45ce:	46bd      	mov	sp, r7
    45d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d4:	4770      	bx	lr
    45d6:	bf00      	nop
    45d8:	100007e4 	.word	0x100007e4

000045dc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    45dc:	b580      	push	{r7, lr}
    45de:	b086      	sub	sp, #24
    45e0:	af00      	add	r7, sp, #0
    45e2:	6078      	str	r0, [r7, #4]
    45e4:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	681b      	ldr	r3, [r3, #0]
    45ea:	3308      	adds	r3, #8
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	6839      	ldr	r1, [r7, #0]
    45f0:	6878      	ldr	r0, [r7, #4]
    45f2:	4798      	blx	r3
    45f4:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    45f6:	f04f 0300 	mov.w	r3, #0
    45fa:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    45fc:	697b      	ldr	r3, [r7, #20]
    45fe:	2b00      	cmp	r3, #0
    4600:	d00f      	beq.n	4622 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	681b      	ldr	r3, [r3, #0]
    4606:	330c      	adds	r3, #12
    4608:	681b      	ldr	r3, [r3, #0]
    460a:	6878      	ldr	r0, [r7, #4]
    460c:	4798      	blx	r3
    460e:	4603      	mov	r3, r0
    4610:	613b      	str	r3, [r7, #16]
    4612:	f107 0310 	add.w	r3, r7, #16
    4616:	6979      	ldr	r1, [r7, #20]
    4618:	4618      	mov	r0, r3
    461a:	f001 fa28 	bl	5a6e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    461e:	4603      	mov	r3, r0
    4620:	60fb      	str	r3, [r7, #12]
    }
    return result;
    4622:	68fb      	ldr	r3, [r7, #12]
  }
    4624:	4618      	mov	r0, r3
    4626:	3718      	adds	r7, #24
    4628:	46bd      	mov	sp, r7
    462a:	bd80      	pop	{r7, pc}

0000462c <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    462c:	b580      	push	{r7, lr}
    462e:	b084      	sub	sp, #16
    4630:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    4632:	f107 0308 	add.w	r3, r7, #8
    4636:	4618      	mov	r0, r3
    4638:	f001 fa45 	bl	5ac6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    463c:	f107 0208 	add.w	r2, r7, #8
    4640:	463b      	mov	r3, r7
    4642:	4611      	mov	r1, r2
    4644:	4618      	mov	r0, r3
    4646:	f7fd fc3b 	bl	1ec0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    464a:	463b      	mov	r3, r7
    464c:	4619      	mov	r1, r3
    464e:	4808      	ldr	r0, [pc, #32]	; (4670 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    4650:	f7fc f8ab 	bl	7aa <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    4654:	4807      	ldr	r0, [pc, #28]	; (4674 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4656:	f7fe f828 	bl	26aa <std::function<void ()>::operator bool() const>
    465a:	4603      	mov	r3, r0
    465c:	2b00      	cmp	r3, #0
    465e:	d002      	beq.n	4666 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    4660:	4804      	ldr	r0, [pc, #16]	; (4674 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    4662:	f7fd fb6f 	bl	1d44 <std::function<void ()>::operator()() const>
    }
  }
    4666:	bf00      	nop
    4668:	3710      	adds	r7, #16
    466a:	46bd      	mov	sp, r7
    466c:	bd80      	pop	{r7, pc}
    466e:	bf00      	nop
    4670:	100007f8 	.word	0x100007f8
    4674:	100007e8 	.word	0x100007e8

00004678 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    4678:	b580      	push	{r7, lr}
    467a:	b084      	sub	sp, #16
    467c:	af00      	add	r7, sp, #0
    467e:	60f8      	str	r0, [r7, #12]
    4680:	60b9      	str	r1, [r7, #8]
    4682:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    4684:	68fb      	ldr	r3, [r7, #12]
    4686:	68ba      	ldr	r2, [r7, #8]
    4688:	6879      	ldr	r1, [r7, #4]
    468a:	4618      	mov	r0, r3
    468c:	f000 f805 	bl	469a <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    4690:	bf00      	nop
    4692:	68f8      	ldr	r0, [r7, #12]
    4694:	3710      	adds	r7, #16
    4696:	46bd      	mov	sp, r7
    4698:	bd80      	pop	{r7, pc}

0000469a <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    469a:	b5b0      	push	{r4, r5, r7, lr}
    469c:	b088      	sub	sp, #32
    469e:	af00      	add	r7, sp, #0
    46a0:	60f8      	str	r0, [r7, #12]
    46a2:	60b9      	str	r1, [r7, #8]
    46a4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    46a6:	68bb      	ldr	r3, [r7, #8]
    46a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    46ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    46b0:	f107 0318 	add.w	r3, r7, #24
    46b4:	4618      	mov	r0, r3
    46b6:	f7fb fffd 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	461a      	mov	r2, r3
    46c0:	f04f 0300 	mov.w	r3, #0
    46c4:	fb02 f501 	mul.w	r5, r2, r1
    46c8:	fb00 f403 	mul.w	r4, r0, r3
    46cc:	442c      	add	r4, r5
    46ce:	fba0 2302 	umull	r2, r3, r0, r2
    46d2:	18e1      	adds	r1, r4, r3
    46d4:	460b      	mov	r3, r1
    46d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    46da:	f107 0310 	add.w	r3, r7, #16
    46de:	4619      	mov	r1, r3
    46e0:	68f8      	ldr	r0, [r7, #12]
    46e2:	f7fc f81d 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    46e6:	68f8      	ldr	r0, [r7, #12]
    46e8:	3720      	adds	r7, #32
    46ea:	46bd      	mov	sp, r7
    46ec:	bdb0      	pop	{r4, r5, r7, pc}

000046ee <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    46ee:	b580      	push	{r7, lr}
    46f0:	b088      	sub	sp, #32
    46f2:	af00      	add	r7, sp, #0
    46f4:	60f8      	str	r0, [r7, #12]
    46f6:	60b9      	str	r1, [r7, #8]
    46f8:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    46fa:	68bb      	ldr	r3, [r7, #8]
    46fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4700:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4704:	f107 0318 	add.w	r3, r7, #24
    4708:	4618      	mov	r0, r3
    470a:	f7fb ffd3 	bl	6b4 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    470e:	687b      	ldr	r3, [r7, #4]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	461a      	mov	r2, r3
    4714:	f04f 0300 	mov.w	r3, #0
    4718:	f002 f85a 	bl	67d0 <__aeabi_ldivmod>
    471c:	4602      	mov	r2, r0
    471e:	460b      	mov	r3, r1
    4720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    4724:	f107 0310 	add.w	r3, r7, #16
    4728:	4619      	mov	r1, r3
    472a:	68f8      	ldr	r0, [r7, #12]
    472c:	f7fb fff8 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    4730:	68f8      	ldr	r0, [r7, #12]
    4732:	3720      	adds	r7, #32
    4734:	46bd      	mov	sp, r7
    4736:	bd80      	pop	{r7, pc}

00004738 <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    4738:	b580      	push	{r7, lr}
    473a:	b08c      	sub	sp, #48	; 0x30
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    4740:	4816      	ldr	r0, [pc, #88]	; (479c <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    4742:	f7ff fe31 	bl	43a8 <sjsu::cortex::DwtCounter::GetCount()>
    4746:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    4748:	4b15      	ldr	r3, [pc, #84]	; (47a0 <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    474a:	e9d3 2300 	ldrd	r2, r3, [r3]
    474e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    4752:	4b14      	ldr	r3, [pc, #80]	; (47a4 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    4754:	681a      	ldr	r2, [r3, #0]
    4756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4758:	fbb3 f1f2 	udiv	r1, r3, r2
    475c:	fb02 f201 	mul.w	r2, r2, r1
    4760:	1a9b      	subs	r3, r3, r2
    4762:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    4764:	f107 0310 	add.w	r3, r7, #16
    4768:	f107 011c 	add.w	r1, r7, #28
    476c:	4a0e      	ldr	r2, [pc, #56]	; (47a8 <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    476e:	4618      	mov	r0, r3
    4770:	f7ff ff82 	bl	4678 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    4774:	f107 0308 	add.w	r3, r7, #8
    4778:	f107 0110 	add.w	r1, r7, #16
    477c:	4a0b      	ldr	r2, [pc, #44]	; (47ac <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    477e:	4618      	mov	r0, r3
    4780:	f7ff ffb5 	bl	46ee <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	f107 0208 	add.w	r2, r7, #8
    478a:	f107 0120 	add.w	r1, r7, #32
    478e:	4618      	mov	r0, r3
    4790:	f7fd fa36 	bl	1c00 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    4794:	6878      	ldr	r0, [r7, #4]
    4796:	3730      	adds	r7, #48	; 0x30
    4798:	46bd      	mov	sp, r7
    479a:	bd80      	pop	{r7, pc}
    479c:	10000800 	.word	0x10000800
    47a0:	100007f8 	.word	0x100007f8
    47a4:	10000028 	.word	0x10000028
    47a8:	10000020 	.word	0x10000020
    47ac:	000093c8 	.word	0x000093c8

000047b0 <sjsu::cortex::SystemTimer::Initialize() const>:
  /// Constructor for ARM Cortex M system timer.
  ///
  /// @param priority - the interrupt priority of
  explicit constexpr SystemTimer(uint8_t priority = -1) : priority_(priority) {}

  void Initialize() const override
    47b0:	b590      	push	{r4, r7, lr}
    47b2:	b08b      	sub	sp, #44	; 0x2c
    47b4:	af00      	add	r7, sp, #0
    47b6:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    47b8:	481c      	ldr	r0, [pc, #112]	; (482c <sjsu::cortex::SystemTimer::Initialize() const+0x7c>)
    47ba:	f7ff fdd3 	bl	4364 <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    47be:	f7ff ff01 	bl	45c4 <sjsu::SystemController::GetPlatformController()>
    47c2:	4603      	mov	r3, r0
                                .GetSystemFrequency()
    47c4:	681a      	ldr	r2, [r3, #0]
    47c6:	320c      	adds	r2, #12
    47c8:	6812      	ldr	r2, [r2, #0]
    47ca:	4618      	mov	r0, r3
    47cc:	4790      	blx	r2
    47ce:	4603      	mov	r3, r0
    47d0:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    47d2:	f107 0314 	add.w	r3, r7, #20
    47d6:	4618      	mov	r0, r3
    47d8:	f001 f982 	bl	5ae0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    47dc:	4603      	mov	r3, r0
    47de:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    47e0:	693b      	ldr	r3, [r7, #16]
    47e2:	4a13      	ldr	r2, [pc, #76]	; (4830 <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    47e4:	fba2 2303 	umull	r2, r3, r2, r3
    47e8:	099b      	lsrs	r3, r3, #6
    47ea:	4a12      	ldr	r2, [pc, #72]	; (4834 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    47ec:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    47ee:	f107 0320 	add.w	r3, r7, #32
    47f2:	4618      	mov	r0, r3
    47f4:	f001 f980 	bl	5af8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    47f8:	f107 0318 	add.w	r3, r7, #24
    47fc:	f107 0220 	add.w	r2, r7, #32
    4800:	490d      	ldr	r1, [pc, #52]	; (4838 <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    4802:	4618      	mov	r0, r3
    4804:	f7ff ff38 	bl	4678 <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    4808:	4c0c      	ldr	r4, [pc, #48]	; (483c <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    480a:	463b      	mov	r3, r7
    480c:	f107 0210 	add.w	r2, r7, #16
    4810:	f107 0118 	add.w	r1, r7, #24
    4814:	4618      	mov	r0, r3
    4816:	f7ff ff6a 	bl	46ee <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    481a:	e9d7 2300 	ldrd	r2, r3, [r7]
    481e:	e9c4 2300 	strd	r2, r3, [r4]
  }
    4822:	bf00      	nop
    4824:	372c      	adds	r7, #44	; 0x2c
    4826:	46bd      	mov	sp, r7
    4828:	bd90      	pop	{r4, r7, pc}
    482a:	bf00      	nop
    482c:	10000800 	.word	0x10000800
    4830:	10624dd3 	.word	0x10624dd3
    4834:	10000028 	.word	0x10000028
    4838:	000093c8 	.word	0x000093c8
    483c:	10000020 	.word	0x10000020

00004840 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    484a:	6839      	ldr	r1, [r7, #0]
    484c:	4803      	ldr	r0, [pc, #12]	; (485c <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    484e:	f7fd faf5 	bl	1e3c <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    4852:	bf00      	nop
    4854:	3708      	adds	r7, #8
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}
    485a:	bf00      	nop
    485c:	100007e8 	.word	0x100007e8

00004860 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    4860:	b5b0      	push	{r4, r5, r7, lr}
    4862:	b08a      	sub	sp, #40	; 0x28
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    4868:	2304      	movs	r3, #4
    486a:	627b      	str	r3, [r7, #36]	; 0x24

    if (sys_tick->LOAD != 0)
    486c:	4b1d      	ldr	r3, [pc, #116]	; (48e4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	685b      	ldr	r3, [r3, #4]
    4872:	2b00      	cmp	r3, #0
    4874:	bf14      	ite	ne
    4876:	2301      	movne	r3, #1
    4878:	2300      	moveq	r3, #0
    487a:	b2db      	uxtb	r3, r3
    487c:	2b00      	cmp	r3, #0
    487e:	d02c      	beq.n	48da <sjsu::cortex::SystemTimer::StartTimer() const+0x7a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    4880:	f7fb fdd4 	bl	42c <sjsu::InterruptController::GetPlatformController()>
    4884:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    4886:	6823      	ldr	r3, [r4, #0]
    4888:	3304      	adds	r3, #4
    488a:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    488c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4890:	60bb      	str	r3, [r7, #8]
    4892:	f107 0308 	add.w	r3, r7, #8
    4896:	3304      	adds	r3, #4
    4898:	4913      	ldr	r1, [pc, #76]	; (48e8 <sjsu::cortex::SystemTimer::StartTimer() const+0x88>)
    489a:	4618      	mov	r0, r3
    489c:	f7fd faa4 	bl	1de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	791b      	ldrb	r3, [r3, #4]
      sjsu::InterruptController::GetPlatformController().Enable({
    48a4:	61fb      	str	r3, [r7, #28]
    48a6:	f107 0308 	add.w	r3, r7, #8
    48aa:	4619      	mov	r1, r3
    48ac:	4620      	mov	r0, r4
    48ae:	47a8      	blx	r5
      });
    48b0:	f107 0308 	add.w	r3, r7, #8
    48b4:	4618      	mov	r0, r3
    48b6:	f7fc fb15 	bl	ee4 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    48ba:	2307      	movs	r3, #7
    48bc:	623b      	str	r3, [r7, #32]
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    48be:	4b09      	ldr	r3, [pc, #36]	; (48e4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    48c0:	681b      	ldr	r3, [r3, #0]
    48c2:	2200      	movs	r2, #0
    48c4:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    48c6:	4b07      	ldr	r3, [pc, #28]	; (48e4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    48c8:	681b      	ldr	r3, [r3, #0]
    48ca:	6819      	ldr	r1, [r3, #0]
    48cc:	4b05      	ldr	r3, [pc, #20]	; (48e4 <sjsu::cortex::SystemTimer::StartTimer() const+0x84>)
    48ce:	681b      	ldr	r3, [r3, #0]
    48d0:	6a3a      	ldr	r2, [r7, #32]
    48d2:	430a      	orrs	r2, r1
    48d4:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    48d6:	2300      	movs	r3, #0
    48d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return status;
    48da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
    48dc:	4618      	mov	r0, r3
    48de:	3728      	adds	r7, #40	; 0x28
    48e0:	46bd      	mov	sp, r7
    48e2:	bdb0      	pop	{r4, r5, r7, pc}
    48e4:	1000001c 	.word	0x1000001c
    48e8:	0000462d 	.word	0x0000462d

000048ec <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    48f4:	6878      	ldr	r0, [r7, #4]
    48f6:	f001 f90c 	bl	5b12 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    48fa:	4603      	mov	r3, r0
	}
    48fc:	4618      	mov	r0, r3
    48fe:	3708      	adds	r7, #8
    4900:	46bd      	mov	sp, r7
    4902:	bd80      	pop	{r7, pc}

00004904 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    4904:	b480      	push	{r7}
    4906:	b083      	sub	sp, #12
    4908:	af00      	add	r7, sp, #0
    490a:	6078      	str	r0, [r7, #4]
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	ee07 3a90 	vmov	s15, r3
    4914:	eeb0 0a67 	vmov.f32	s0, s15
    4918:	370c      	adds	r7, #12
    491a:	46bd      	mov	sp, r7
    491c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4920:	4770      	bx	lr

00004922 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    4922:	b580      	push	{r7, lr}
    4924:	b084      	sub	sp, #16
    4926:	af00      	add	r7, sp, #0
    4928:	6078      	str	r0, [r7, #4]
    492a:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	4618      	mov	r0, r3
    4930:	f7ff ffe8 	bl	4904 <units::linear_scale<float>::operator()() const>
    4934:	eeb0 7a40 	vmov.f32	s14, s0
    4938:	683b      	ldr	r3, [r7, #0]
    493a:	ee07 3a90 	vmov	s15, r3
    493e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4942:	ee77 7a67 	vsub.f32	s15, s14, s15
    4946:	f107 030c 	add.w	r3, r7, #12
    494a:	eeb0 0a67 	vmov.f32	s0, s15
    494e:	4618      	mov	r0, r3
    4950:	f000 f831 	bl	49b6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4954:	68fb      	ldr	r3, [r7, #12]
	}
    4956:	4618      	mov	r0, r3
    4958:	3710      	adds	r7, #16
    495a:	46bd      	mov	sp, r7
    495c:	bd80      	pop	{r7, pc}

0000495e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    495e:	b580      	push	{r7, lr}
    4960:	ed2d 8b02 	vpush	{d8}
    4964:	b084      	sub	sp, #16
    4966:	af00      	add	r7, sp, #0
    4968:	6078      	str	r0, [r7, #4]
    496a:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	4618      	mov	r0, r3
    4970:	f7ff ffc8 	bl	4904 <units::linear_scale<float>::operator()() const>
    4974:	eeb0 8a40 	vmov.f32	s16, s0
    4978:	683b      	ldr	r3, [r7, #0]
    497a:	4618      	mov	r0, r3
    497c:	f7ff ffc2 	bl	4904 <units::linear_scale<float>::operator()() const>
    4980:	eef0 7a40 	vmov.f32	s15, s0
    4984:	edc7 7a03 	vstr	s15, [r7, #12]
    4988:	f107 030c 	add.w	r3, r7, #12
    498c:	4618      	mov	r0, r3
    498e:	f7ff fdbd 	bl	450c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4992:	eeb0 7a40 	vmov.f32	s14, s0
    4996:	eec8 7a07 	vdiv.f32	s15, s16, s14
    499a:	f107 0308 	add.w	r3, r7, #8
    499e:	eeb0 0a67 	vmov.f32	s0, s15
    49a2:	4618      	mov	r0, r3
    49a4:	f000 f807 	bl	49b6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    49a8:	68bb      	ldr	r3, [r7, #8]
	}
    49aa:	4618      	mov	r0, r3
    49ac:	3710      	adds	r7, #16
    49ae:	46bd      	mov	sp, r7
    49b0:	ecbd 8b02 	vpop	{d8}
    49b4:	bd80      	pop	{r7, pc}

000049b6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    49b6:	b580      	push	{r7, lr}
    49b8:	b082      	sub	sp, #8
    49ba:	af00      	add	r7, sp, #0
    49bc:	6078      	str	r0, [r7, #4]
    49be:	ed87 0a00 	vstr	s0, [r7]
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	463a      	mov	r2, r7
    49c6:	4611      	mov	r1, r2
    49c8:	4618      	mov	r0, r3
    49ca:	f7ff fd5e 	bl	448a <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    49ce:	687b      	ldr	r3, [r7, #4]
    49d0:	4618      	mov	r0, r3
    49d2:	3708      	adds	r7, #8
    49d4:	46bd      	mov	sp, r7
    49d6:	bd80      	pop	{r7, pc}

000049d8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    49d8:	b580      	push	{r7, lr}
    49da:	b082      	sub	sp, #8
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    49e0:	6878      	ldr	r0, [r7, #4]
    49e2:	f000 f805 	bl	49f0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    49e6:	4603      	mov	r3, r0
	}
    49e8:	4618      	mov	r0, r3
    49ea:	3708      	adds	r7, #8
    49ec:	46bd      	mov	sp, r7
    49ee:	bd80      	pop	{r7, pc}

000049f0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    49f0:	b580      	push	{r7, lr}
    49f2:	b082      	sub	sp, #8
    49f4:	af00      	add	r7, sp, #0
    49f6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	4618      	mov	r0, r3
    49fc:	f7ff ff82 	bl	4904 <units::linear_scale<float>::operator()() const>
    4a00:	eef0 7a40 	vmov.f32	s15, s0
    4a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4a08:	ee17 3a90 	vmov	r3, s15
		}
    4a0c:	4618      	mov	r0, r3
    4a0e:	3708      	adds	r7, #8
    4a10:	46bd      	mov	sp, r7
    4a12:	bd80      	pop	{r7, pc}

00004a14 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    4a14:	b590      	push	{r4, r7, lr}
    4a16:	b089      	sub	sp, #36	; 0x24
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
    4a1c:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    4a1e:	f04f 0001 	mov.w	r0, #1
    4a22:	f04f 0100 	mov.w	r1, #0
    4a26:	f7ff fcf3 	bl	4410 <units::literals::operator"" _Hz(unsigned long long)>
    4a2a:	4603      	mov	r3, r0
    4a2c:	60fb      	str	r3, [r7, #12]
    4a2e:	f107 020c 	add.w	r2, r7, #12
    4a32:	463b      	mov	r3, r7
    4a34:	4611      	mov	r1, r2
    4a36:	4618      	mov	r0, r3
    4a38:	f7ff fd88 	bl	454c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4a3c:	4603      	mov	r3, r0
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d002      	beq.n	4a48 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    4a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a46:	e040      	b.n	4aca <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb6>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetSystemFrequency();
    4a48:	f7ff fdbc 	bl	45c4 <sjsu::SystemController::GetPlatformController()>
    4a4c:	4603      	mov	r3, r0
    4a4e:	681a      	ldr	r2, [r3, #0]
    4a50:	320c      	adds	r2, #12
    4a52:	6812      	ldr	r2, [r2, #0]
    4a54:	4618      	mov	r0, r3
    4a56:	4790      	blx	r2
    4a58:	4603      	mov	r3, r0
    4a5a:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    4a5c:	463a      	mov	r2, r7
    4a5e:	f107 0308 	add.w	r3, r7, #8
    4a62:	4611      	mov	r1, r2
    4a64:	4618      	mov	r0, r3
    4a66:	f7ff ff7a 	bl	495e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a6a:	4603      	mov	r3, r0
    4a6c:	617b      	str	r3, [r7, #20]
    4a6e:	f107 0314 	add.w	r3, r7, #20
    4a72:	2101      	movs	r1, #1
    4a74:	4618      	mov	r0, r3
    4a76:	f7ff ff54 	bl	4922 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4a7a:	4603      	mov	r3, r0
    4a7c:	613b      	str	r3, [r7, #16]
    4a7e:	f107 0310 	add.w	r3, r7, #16
    4a82:	4618      	mov	r0, r3
    4a84:	f7ff ff32 	bl	48ec <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a88:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4a8a:	f107 0308 	add.w	r3, r7, #8
    4a8e:	4618      	mov	r0, r3
    4a90:	f7ff ffa2 	bl	49d8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a94:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    4a96:	463b      	mov	r3, r7
    4a98:	4618      	mov	r0, r3
    4a9a:	f7ff ff9d 	bl	49d8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4a9e:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    4aa0:	fbb4 f2f3 	udiv	r2, r4, r3
    4aa4:	fb03 f302 	mul.w	r3, r3, r2
    4aa8:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    4aaa:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    4aac:	69fb      	ldr	r3, [r7, #28]
    4aae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4ab2:	d305      	bcc.n	4ac0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xac>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    4ab4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4ab8:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    4aba:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    4abe:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    4ac0:	4b04      	ldr	r3, [pc, #16]	; (4ad4 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    4ac2:	681b      	ldr	r3, [r3, #0]
    4ac4:	69fa      	ldr	r2, [r7, #28]
    4ac6:	605a      	str	r2, [r3, #4]
    return remainder;
    4ac8:	69bb      	ldr	r3, [r7, #24]
  }
    4aca:	4618      	mov	r0, r3
    4acc:	3724      	adds	r7, #36	; 0x24
    4ace:	46bd      	mov	sp, r7
    4ad0:	bd90      	pop	{r4, r7, pc}
    4ad2:	bf00      	nop
    4ad4:	1000001c 	.word	0x1000001c

00004ad8 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4ad8:	b580      	push	{r7, lr}
    4ada:	b086      	sub	sp, #24
    4adc:	af00      	add	r7, sp, #0
    4ade:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4ae0:	6878      	ldr	r0, [r7, #4]
    4ae2:	f000 f807 	bl	4af4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4ae6:	eef0 7a40 	vmov.f32	s15, s0
	}
    4aea:	eeb0 0a67 	vmov.f32	s0, s15
    4aee:	3718      	adds	r7, #24
    4af0:	46bd      	mov	sp, r7
    4af2:	bd80      	pop	{r7, pc}

00004af4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    4af4:	b480      	push	{r7}
    4af6:	b085      	sub	sp, #20
    4af8:	af00      	add	r7, sp, #0
    4afa:	60f8      	str	r0, [r7, #12]
    4afc:	7239      	strb	r1, [r7, #8]
    4afe:	713a      	strb	r2, [r7, #4]
    4b00:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	edd3 7a00 	vldr	s15, [r3]
    4b08:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4b20 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    4b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    4b10:	eeb0 0a67 	vmov.f32	s0, s15
    4b14:	3714      	adds	r7, #20
    4b16:	46bd      	mov	sp, r7
    4b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1c:	4770      	bx	lr
    4b1e:	bf00      	nop
    4b20:	49742400 	.word	0x49742400

00004b24 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    4b24:	b580      	push	{r7, lr}
    4b26:	b084      	sub	sp, #16
    4b28:	af00      	add	r7, sp, #0
    4b2a:	6078      	str	r0, [r7, #4]
    4b2c:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    4b2e:	2100      	movs	r1, #0
    4b30:	6878      	ldr	r0, [r7, #4]
    4b32:	f000 f8e3 	bl	4cfc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    4b36:	f04f 000c 	mov.w	r0, #12
    4b3a:	f04f 0100 	mov.w	r1, #0
    4b3e:	f7ff fc7d 	bl	443c <units::literals::operator"" _MHz(unsigned long long)>
    4b42:	4603      	mov	r3, r0
    4b44:	60bb      	str	r3, [r7, #8]
    4b46:	f107 0208 	add.w	r2, r7, #8
    4b4a:	463b      	mov	r3, r7
    4b4c:	4611      	mov	r1, r2
    4b4e:	4618      	mov	r0, r3
    4b50:	f000 f982 	bl	4e58 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4b54:	4603      	mov	r3, r0
    4b56:	2b00      	cmp	r3, #0
    4b58:	d00f      	beq.n	4b7a <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    4b5a:	4b16      	ldr	r3, [pc, #88]	; (4bb4 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    4b5c:	683a      	ldr	r2, [r7, #0]
    4b5e:	6819      	ldr	r1, [r3, #0]
    4b60:	6878      	ldr	r0, [r7, #4]
    4b62:	f000 fa95 	bl	5090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    4b66:	2101      	movs	r1, #1
    4b68:	6878      	ldr	r0, [r7, #4]
    4b6a:	f000 f8eb 	bl	4d44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    4b6e:	463b      	mov	r3, r7
    4b70:	4619      	mov	r1, r3
    4b72:	4811      	ldr	r0, [pc, #68]	; (4bb8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4b74:	f000 ffe8 	bl	5b48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4b78:	e007      	b.n	4b8a <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    4b7a:	2100      	movs	r1, #0
    4b7c:	6878      	ldr	r0, [r7, #4]
    4b7e:	f000 f8e1 	bl	4d44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    4b82:	490e      	ldr	r1, [pc, #56]	; (4bbc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    4b84:	480c      	ldr	r0, [pc, #48]	; (4bb8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    4b86:	f000 ffdf 	bl	5b48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    4b8a:	2101      	movs	r1, #1
    4b8c:	6878      	ldr	r0, [r7, #4]
    4b8e:	f000 fae3 	bl	5158 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    4b92:	23ff      	movs	r3, #255	; 0xff
    4b94:	733b      	strb	r3, [r7, #12]
    4b96:	f107 030c 	add.w	r3, r7, #12
    4b9a:	2201      	movs	r2, #1
    4b9c:	4619      	mov	r1, r3
    4b9e:	6878      	ldr	r0, [r7, #4]
    4ba0:	f000 f80e 	bl	4bc0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    4ba4:	2100      	movs	r1, #0
    4ba6:	6878      	ldr	r0, [r7, #4]
    4ba8:	f000 fb14 	bl	51d4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    4bac:	bf00      	nop
    4bae:	3710      	adds	r7, #16
    4bb0:	46bd      	mov	sp, r7
    4bb2:	bd80      	pop	{r7, pc}
    4bb4:	000093cc 	.word	0x000093cc
    4bb8:	1000002c 	.word	0x1000002c
    4bbc:	000093d0 	.word	0x000093d0

00004bc0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b084      	sub	sp, #16
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	60f8      	str	r0, [r7, #12]
    4bc8:	60b9      	str	r1, [r7, #8]
    4bca:	4613      	mov	r3, r2
    4bcc:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    4bce:	79fb      	ldrb	r3, [r7, #7]
    4bd0:	2b04      	cmp	r3, #4
    4bd2:	d90e      	bls.n	4bf2 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x32>
    4bd4:	23b2      	movs	r3, #178	; 0xb2
    4bd6:	4a0b      	ldr	r2, [pc, #44]	; (4c04 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    4bd8:	490b      	ldr	r1, [pc, #44]	; (4c08 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    4bda:	480c      	ldr	r0, [pc, #48]	; (4c0c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    4bdc:	f7ff fb26 	bl	422c <printf>
    4be0:	480b      	ldr	r0, [pc, #44]	; (4c10 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    4be2:	f7fe f9dd 	bl	2fa0 <puts>
    4be6:	2100      	movs	r1, #0
    4be8:	2001      	movs	r0, #1
    4bea:	f7fd ff69 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    4bee:	f7fd ffb3 	bl	2b58 <sjsu::Halt()>
    system_controller->PCLKSEL = peripheral_divider;
    4bf2:	4b08      	ldr	r3, [pc, #32]	; (4c14 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	79fa      	ldrb	r2, [r7, #7]
    4bf8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    4bfc:	bf00      	nop
    4bfe:	3710      	adds	r7, #16
    4c00:	46bd      	mov	sp, r7
    4c02:	bd80      	pop	{r7, pc}
    4c04:	00008d70 	.word	0x00008d70
    4c08:	000093ec 	.word	0x000093ec
    4c0c:	00008df4 	.word	0x00008df4
    4c10:	00008e94 	.word	0x00008e94
    4c14:	10000804 	.word	0x10000804

00004c18 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    4c18:	b480      	push	{r7}
    4c1a:	b083      	sub	sp, #12
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	6078      	str	r0, [r7, #4]
    4c20:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    4c22:	4b05      	ldr	r3, [pc, #20]	; (4c38 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    4c2a:	4618      	mov	r0, r3
    4c2c:	370c      	adds	r7, #12
    4c2e:	46bd      	mov	sp, r7
    4c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c34:	4770      	bx	lr
    4c36:	bf00      	nop
    4c38:	10000804 	.word	0x10000804

00004c3c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    4c3c:	b480      	push	{r7}
    4c3e:	b083      	sub	sp, #12
    4c40:	af00      	add	r7, sp, #0
    4c42:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    4c44:	4b03      	ldr	r3, [pc, #12]	; (4c54 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    4c46:	681b      	ldr	r3, [r3, #0]
  }
    4c48:	4618      	mov	r0, r3
    4c4a:	370c      	adds	r7, #12
    4c4c:	46bd      	mov	sp, r7
    4c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c52:	4770      	bx	lr
    4c54:	1000002c 	.word	0x1000002c

00004c58 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    4c58:	b480      	push	{r7}
    4c5a:	b085      	sub	sp, #20
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
    4c60:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    4c62:	4b0b      	ldr	r3, [pc, #44]	; (4c90 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4c6a:	683a      	ldr	r2, [r7, #0]
    4c6c:	7812      	ldrb	r2, [r2, #0]
    4c6e:	4611      	mov	r1, r2
    4c70:	2201      	movs	r2, #1
    4c72:	408a      	lsls	r2, r1
    4c74:	4013      	ands	r3, r2
    4c76:	2b00      	cmp	r3, #0
    4c78:	bf14      	ite	ne
    4c7a:	2301      	movne	r3, #1
    4c7c:	2300      	moveq	r3, #0
    4c7e:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    4c80:	7bfb      	ldrb	r3, [r7, #15]
  }
    4c82:	4618      	mov	r0, r3
    4c84:	3714      	adds	r7, #20
    4c86:	46bd      	mov	sp, r7
    4c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c8c:	4770      	bx	lr
    4c8e:	bf00      	nop
    4c90:	10000804 	.word	0x10000804

00004c94 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    4c94:	b590      	push	{r4, r7, lr}
    4c96:	b083      	sub	sp, #12
    4c98:	af00      	add	r7, sp, #0
    4c9a:	6078      	str	r0, [r7, #4]
    4c9c:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    4c9e:	4b09      	ldr	r3, [pc, #36]	; (4cc4 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    4ca6:	683b      	ldr	r3, [r7, #0]
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	4619      	mov	r1, r3
    system_controller->PCONP =
    4cac:	4b05      	ldr	r3, [pc, #20]	; (4cc4 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4cae:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    4cb0:	4610      	mov	r0, r2
    4cb2:	f7fd f870 	bl	1d96 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    4cb6:	4603      	mov	r3, r0
    system_controller->PCONP =
    4cb8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    4cbc:	bf00      	nop
    4cbe:	370c      	adds	r7, #12
    4cc0:	46bd      	mov	sp, r7
    4cc2:	bd90      	pop	{r4, r7, pc}
    4cc4:	10000804 	.word	0x10000804

00004cc8 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    4cc8:	b590      	push	{r4, r7, lr}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
    4cd0:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    4cd2:	4b09      	ldr	r3, [pc, #36]	; (4cf8 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    4cda:	683b      	ldr	r3, [r7, #0]
    4cdc:	781b      	ldrb	r3, [r3, #0]
    4cde:	4619      	mov	r1, r3
    system_controller->PCONP =
    4ce0:	4b05      	ldr	r3, [pc, #20]	; (4cf8 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    4ce2:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    4ce4:	4610      	mov	r0, r2
    4ce6:	f7fd f843 	bl	1d70 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    4cea:	4603      	mov	r3, r0
    system_controller->PCONP =
    4cec:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    4cf0:	bf00      	nop
    4cf2:	370c      	adds	r7, #12
    4cf4:	46bd      	mov	sp, r7
    4cf6:	bd90      	pop	{r4, r7, pc}
    4cf8:	10000804 	.word	0x10000804

00004cfc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    4cfc:	b590      	push	{r4, r7, lr}
    4cfe:	b083      	sub	sp, #12
    4d00:	af00      	add	r7, sp, #0
    4d02:	6078      	str	r0, [r7, #4]
    4d04:	460b      	mov	r3, r1
    4d06:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    4d08:	4b0c      	ldr	r3, [pc, #48]	; (4d3c <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    4d10:	8879      	ldrh	r1, [r7, #2]
    4d12:	4b0a      	ldr	r3, [pc, #40]	; (4d3c <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    4d14:	681c      	ldr	r4, [r3, #0]
    4d16:	4b0a      	ldr	r3, [pc, #40]	; (4d40 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    4d18:	781a      	ldrb	r2, [r3, #0]
    4d1a:	785b      	ldrb	r3, [r3, #1]
    4d1c:	021b      	lsls	r3, r3, #8
    4d1e:	431a      	orrs	r2, r3
    4d20:	2300      	movs	r3, #0
    4d22:	f362 030f 	bfi	r3, r2, #0, #16
    4d26:	461a      	mov	r2, r3
    4d28:	f000 ff21 	bl	5b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4d2c:	4603      	mov	r3, r0
    4d2e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    4d32:	bf00      	nop
    4d34:	370c      	adds	r7, #12
    4d36:	46bd      	mov	sp, r7
    4d38:	bd90      	pop	{r4, r7, pc}
    4d3a:	bf00      	nop
    4d3c:	10000804 	.word	0x10000804
    4d40:	000093d4 	.word	0x000093d4

00004d44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    4d44:	b590      	push	{r4, r7, lr}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
    4d4c:	460b      	mov	r3, r1
    4d4e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    4d50:	4b0c      	ldr	r3, [pc, #48]	; (4d84 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    4d52:	681b      	ldr	r3, [r3, #0]
    4d54:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    4d58:	8879      	ldrh	r1, [r7, #2]
    4d5a:	4b0a      	ldr	r3, [pc, #40]	; (4d84 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    4d5c:	681c      	ldr	r4, [r3, #0]
    4d5e:	4b0a      	ldr	r3, [pc, #40]	; (4d88 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    4d60:	781a      	ldrb	r2, [r3, #0]
    4d62:	785b      	ldrb	r3, [r3, #1]
    4d64:	021b      	lsls	r3, r3, #8
    4d66:	431a      	orrs	r2, r3
    4d68:	2300      	movs	r3, #0
    4d6a:	f362 030f 	bfi	r3, r2, #0, #16
    4d6e:	461a      	mov	r2, r3
    4d70:	f000 fefd 	bl	5b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4d74:	4603      	mov	r3, r0
    4d76:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    4d7a:	bf00      	nop
    4d7c:	370c      	adds	r7, #12
    4d7e:	46bd      	mov	sp, r7
    4d80:	bd90      	pop	{r4, r7, pc}
    4d82:	bf00      	nop
    4d84:	10000804 	.word	0x10000804
    4d88:	000093e0 	.word	0x000093e0

00004d8c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    4d8c:	b590      	push	{r4, r7, lr}
    4d8e:	b083      	sub	sp, #12
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
    4d94:	460b      	mov	r3, r1
    4d96:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    4d98:	4b0c      	ldr	r3, [pc, #48]	; (4dcc <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    4da0:	8879      	ldrh	r1, [r7, #2]
    4da2:	4b0a      	ldr	r3, [pc, #40]	; (4dcc <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    4da4:	681c      	ldr	r4, [r3, #0]
    4da6:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    4da8:	781a      	ldrb	r2, [r3, #0]
    4daa:	785b      	ldrb	r3, [r3, #1]
    4dac:	021b      	lsls	r3, r3, #8
    4dae:	431a      	orrs	r2, r3
    4db0:	2300      	movs	r3, #0
    4db2:	f362 030f 	bfi	r3, r2, #0, #16
    4db6:	461a      	mov	r2, r3
    4db8:	f000 fed9 	bl	5b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4dbc:	4603      	mov	r3, r0
    4dbe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    4dc2:	bf00      	nop
    4dc4:	370c      	adds	r7, #12
    4dc6:	46bd      	mov	sp, r7
    4dc8:	bd90      	pop	{r4, r7, pc}
    4dca:	bf00      	nop
    4dcc:	10000804 	.word	0x10000804
    4dd0:	000093e4 	.word	0x000093e4

00004dd4 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    4dd4:	b590      	push	{r4, r7, lr}
    4dd6:	b083      	sub	sp, #12
    4dd8:	af00      	add	r7, sp, #0
    4dda:	6078      	str	r0, [r7, #4]
    4ddc:	460b      	mov	r3, r1
    4dde:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    4de0:	4b0c      	ldr	r3, [pc, #48]	; (4e14 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    4de8:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    4dea:	4b0a      	ldr	r3, [pc, #40]	; (4e14 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    4dec:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    4dee:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    4df0:	781a      	ldrb	r2, [r3, #0]
    4df2:	785b      	ldrb	r3, [r3, #1]
    4df4:	021b      	lsls	r3, r3, #8
    4df6:	431a      	orrs	r2, r3
    4df8:	2300      	movs	r3, #0
    4dfa:	f362 030f 	bfi	r3, r2, #0, #16
    4dfe:	461a      	mov	r2, r3
    4e00:	f000 feb5 	bl	5b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4e04:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    4e06:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    4e0a:	bf00      	nop
    4e0c:	370c      	adds	r7, #12
    4e0e:	46bd      	mov	sp, r7
    4e10:	bd90      	pop	{r4, r7, pc}
    4e12:	bf00      	nop
    4e14:	10000804 	.word	0x10000804
    4e18:	000093e8 	.word	0x000093e8

00004e1c <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4e1c:	b580      	push	{r7, lr}
    4e1e:	ed2d 8b02 	vpush	{d8}
    4e22:	b082      	sub	sp, #8
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    4e28:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	ed93 8a00 	vldr	s16, [r3]
    4e30:	683b      	ldr	r3, [r7, #0]
    4e32:	4618      	mov	r0, r3
    4e34:	f7ff fb39 	bl	44aa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4e38:	eef0 7a40 	vmov.f32	s15, s0
    4e3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e44:	bf4c      	ite	mi
    4e46:	2301      	movmi	r3, #1
    4e48:	2300      	movpl	r3, #0
    4e4a:	b2db      	uxtb	r3, r3
		}
    4e4c:	4618      	mov	r0, r3
    4e4e:	3708      	adds	r7, #8
    4e50:	46bd      	mov	sp, r7
    4e52:	ecbd 8b02 	vpop	{d8}
    4e56:	bd80      	pop	{r7, pc}

00004e58 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4e58:	b580      	push	{r7, lr}
    4e5a:	ed2d 8b02 	vpush	{d8}
    4e5e:	b082      	sub	sp, #8
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
    4e64:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	ed93 8a00 	vldr	s16, [r3]
    4e6c:	683b      	ldr	r3, [r7, #0]
    4e6e:	4618      	mov	r0, r3
    4e70:	f7ff fb1b 	bl	44aa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4e74:	eef0 7a40 	vmov.f32	s15, s0
    4e78:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e80:	bfcc      	ite	gt
    4e82:	2301      	movgt	r3, #1
    4e84:	2300      	movle	r3, #0
    4e86:	b2db      	uxtb	r3, r3
		}
    4e88:	4618      	mov	r0, r3
    4e8a:	3708      	adds	r7, #8
    4e8c:	46bd      	mov	sp, r7
    4e8e:	ecbd 8b02 	vpop	{d8}
    4e92:	bd80      	pop	{r7, pc}

00004e94 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    4e94:	b580      	push	{r7, lr}
    4e96:	b082      	sub	sp, #8
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    4e9c:	6878      	ldr	r0, [r7, #4]
    4e9e:	f000 f805 	bl	4eac <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4ea2:	4603      	mov	r3, r0
		}
    4ea4:	4618      	mov	r0, r3
    4ea6:	3708      	adds	r7, #8
    4ea8:	46bd      	mov	sp, r7
    4eaa:	bd80      	pop	{r7, pc}

00004eac <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4eac:	b580      	push	{r7, lr}
    4eae:	b082      	sub	sp, #8
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	4618      	mov	r0, r3
    4eb8:	f7ff fd24 	bl	4904 <units::linear_scale<float>::operator()() const>
    4ebc:	eef0 7a40 	vmov.f32	s15, s0
    4ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ec4:	ee17 3a90 	vmov	r3, s15
		}
    4ec8:	4618      	mov	r0, r3
    4eca:	3708      	adds	r7, #8
    4ecc:	46bd      	mov	sp, r7
    4ece:	bd80      	pop	{r7, pc}

00004ed0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    4ed0:	b580      	push	{r7, lr}
    4ed2:	b082      	sub	sp, #8
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	4618      	mov	r0, r3
    4edc:	f7ff fd12 	bl	4904 <units::linear_scale<float>::operator()() const>
    4ee0:	eef0 7a40 	vmov.f32	s15, s0
    4ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ee8:	ee17 3a90 	vmov	r3, s15
    4eec:	b29b      	uxth	r3, r3
		}
    4eee:	4618      	mov	r0, r3
    4ef0:	3708      	adds	r7, #8
    4ef2:	46bd      	mov	sp, r7
    4ef4:	bd80      	pop	{r7, pc}
    4ef6:	Address 0x0000000000004ef6 is out of bounds.


00004ef8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    4ef8:	b590      	push	{r4, r7, lr}
    4efa:	b08d      	sub	sp, #52	; 0x34
    4efc:	af00      	add	r7, sp, #0
    4efe:	60f8      	str	r0, [r7, #12]
    4f00:	60b9      	str	r1, [r7, #8]
    4f02:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    4f04:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4f08:	f04f 0100 	mov.w	r1, #0
    4f0c:	f7ff fa96 	bl	443c <units::literals::operator"" _MHz(unsigned long long)>
    4f10:	4603      	mov	r3, r0
    4f12:	613b      	str	r3, [r7, #16]
    4f14:	f107 0210 	add.w	r2, r7, #16
    4f18:	1d3b      	adds	r3, r7, #4
    4f1a:	4611      	mov	r1, r2
    4f1c:	4618      	mov	r0, r3
    4f1e:	f7ff ff7d 	bl	4e1c <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4f22:	4603      	mov	r3, r0
    4f24:	f083 0301 	eor.w	r3, r3, #1
    4f28:	b2db      	uxtb	r3, r3
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d114      	bne.n	4f58 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    4f2e:	f04f 000c 	mov.w	r0, #12
    4f32:	f04f 0100 	mov.w	r1, #0
    4f36:	f7ff fa81 	bl	443c <units::literals::operator"" _MHz(unsigned long long)>
    4f3a:	4603      	mov	r3, r0
    4f3c:	617b      	str	r3, [r7, #20]
    4f3e:	f107 0214 	add.w	r2, r7, #20
    4f42:	1d3b      	adds	r3, r7, #4
    4f44:	4611      	mov	r1, r2
    4f46:	4618      	mov	r0, r3
    4f48:	f7ff ff86 	bl	4e58 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4f4c:	4603      	mov	r3, r0
    4f4e:	f083 0301 	eor.w	r3, r3, #1
    4f52:	b2db      	uxtb	r3, r3
    4f54:	2b00      	cmp	r3, #0
    4f56:	d001      	beq.n	4f5c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    4f58:	2301      	movs	r3, #1
    4f5a:	e000      	b.n	4f5e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    4f5c:	2300      	movs	r3, #0
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d00e      	beq.n	4f80 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x88>
    4f62:	23f4      	movs	r3, #244	; 0xf4
    4f64:	4a44      	ldr	r2, [pc, #272]	; (5078 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    4f66:	4945      	ldr	r1, [pc, #276]	; (507c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    4f68:	4845      	ldr	r0, [pc, #276]	; (5080 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    4f6a:	f7ff f95f 	bl	422c <printf>
    4f6e:	4845      	ldr	r0, [pc, #276]	; (5084 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    4f70:	f7fe f816 	bl	2fa0 <puts>
    4f74:	2100      	movs	r1, #0
    4f76:	2001      	movs	r0, #1
    4f78:	f7fd fda2 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    4f7c:	f7fd fdec 	bl	2b58 <sjsu::Halt()>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    4f80:	2301      	movs	r3, #1
    4f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    4f86:	1d3b      	adds	r3, r7, #4
    4f88:	4618      	mov	r0, r3
    4f8a:	f7ff ff83 	bl	4e94 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4f8e:	4604      	mov	r4, r0
    4f90:	f107 0308 	add.w	r3, r7, #8
    4f94:	4618      	mov	r0, r3
    4f96:	f7ff ff7d 	bl	4e94 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    4f9a:	4603      	mov	r3, r0
    4f9c:	fbb4 f2f3 	udiv	r2, r4, r3
    4fa0:	fb03 f302 	mul.w	r3, r3, r2
    4fa4:	1ae3      	subs	r3, r4, r3
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	bf14      	ite	ne
    4faa:	2301      	movne	r3, #1
    4fac:	2300      	moveq	r3, #0
    4fae:	b2db      	uxtb	r3, r3
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d017      	beq.n	4fe4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xec>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    4fb4:	f107 0208 	add.w	r2, r7, #8
    4fb8:	1d3b      	adds	r3, r7, #4
    4fba:	4611      	mov	r1, r2
    4fbc:	4618      	mov	r0, r3
    4fbe:	f000 fde8 	bl	5b92 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4fc2:	4603      	mov	r3, r0
    4fc4:	61fb      	str	r3, [r7, #28]
    4fc6:	f107 031c 	add.w	r3, r7, #28
    4fca:	2101      	movs	r1, #1
    4fcc:	4618      	mov	r0, r3
    4fce:	f000 fe0c 	bl	5bea <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4fd2:	4603      	mov	r3, r0
    4fd4:	61bb      	str	r3, [r7, #24]
    4fd6:	f107 0318 	add.w	r3, r7, #24
    4fda:	4618      	mov	r0, r3
    4fdc:	f000 fd99 	bl	5b12 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    4fe0:	62b8      	str	r0, [r7, #40]	; 0x28
    4fe2:	e00e      	b.n	5002 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10a>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    4fe4:	f107 0208 	add.w	r2, r7, #8
    4fe8:	1d3b      	adds	r3, r7, #4
    4fea:	4611      	mov	r1, r2
    4fec:	4618      	mov	r0, r3
    4fee:	f000 fdd0 	bl	5b92 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4ff2:	4603      	mov	r3, r0
    4ff4:	623b      	str	r3, [r7, #32]
    4ff6:	f107 0320 	add.w	r3, r7, #32
    4ffa:	4618      	mov	r0, r3
    4ffc:	f000 fd89 	bl	5b12 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5000:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    5002:	2301      	movs	r3, #1
    5004:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    5006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    500a:	2b00      	cmp	r3, #0
    500c:	d02f      	beq.n	506e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x176>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    500e:	f107 0308 	add.w	r3, r7, #8
    5012:	4618      	mov	r0, r3
    5014:	f7ff ff5c 	bl	4ed0 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    5018:	4603      	mov	r3, r0
    501a:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    501e:	b29b      	uxth	r3, r3
    5020:	fb12 f303 	smulbb	r3, r2, r3
    5024:	b29b      	uxth	r3, r3
    5026:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    5028:	fb12 f303 	smulbb	r3, r2, r3
    502c:	b29b      	uxth	r3, r3
    502e:	005b      	lsls	r3, r3, #1
    5030:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    5032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    5034:	2b9b      	cmp	r3, #155	; 0x9b
    5036:	d903      	bls.n	5040 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x148>
      {
        calculating = false;
    5038:	2300      	movs	r3, #0
    503a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    503e:	e7e2      	b.n	5006 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    5040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    5042:	005b      	lsls	r3, r3, #1
    5044:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    5046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    5048:	2b07      	cmp	r3, #7
    504a:	d9dc      	bls.n	5006 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
    504c:	f240 1311 	movw	r3, #273	; 0x111
    5050:	4a09      	ldr	r2, [pc, #36]	; (5078 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    5052:	490d      	ldr	r1, [pc, #52]	; (5088 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    5054:	480d      	ldr	r0, [pc, #52]	; (508c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x194>)
    5056:	f7ff f8e9 	bl	422c <printf>
    505a:	480a      	ldr	r0, [pc, #40]	; (5084 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    505c:	f7fd ffa0 	bl	2fa0 <puts>
    5060:	2100      	movs	r1, #0
    5062:	2001      	movs	r0, #1
    5064:	f7fd fd2c 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    5068:	f7fd fd76 	bl	2b58 <sjsu::Halt()>
    while (calculating)
    506c:	e7cb      	b.n	5006 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    5070:	4618      	mov	r0, r3
    5072:	3734      	adds	r7, #52	; 0x34
    5074:	46bd      	mov	sp, r7
    5076:	bd90      	pop	{r4, r7, pc}
    5078:	00008eac 	.word	0x00008eac
    507c:	00009404 	.word	0x00009404
    5080:	00008f28 	.word	0x00008f28
    5084:	00008e94 	.word	0x00008e94
    5088:	0000941c 	.word	0x0000941c
    508c:	00009018 	.word	0x00009018

00005090 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    5090:	b580      	push	{r7, lr}
    5092:	b086      	sub	sp, #24
    5094:	af00      	add	r7, sp, #0
    5096:	60f8      	str	r0, [r7, #12]
    5098:	60b9      	str	r1, [r7, #8]
    509a:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    509c:	2301      	movs	r3, #1
    509e:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    50a0:	687a      	ldr	r2, [r7, #4]
    50a2:	68b9      	ldr	r1, [r7, #8]
    50a4:	68f8      	ldr	r0, [r7, #12]
    50a6:	f7ff ff27 	bl	4ef8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    50aa:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    50ac:	2100      	movs	r1, #0
    50ae:	68f8      	ldr	r0, [r7, #12]
    50b0:	f7ff fe24 	bl	4cfc <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    50b4:	2100      	movs	r1, #0
    50b6:	68f8      	ldr	r0, [r7, #12]
    50b8:	f7ff fe44 	bl	4d44 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    50bc:	2100      	movs	r1, #0
    50be:	68f8      	ldr	r0, [r7, #12]
    50c0:	f7ff fe64 	bl	4d8c <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    50c4:	2100      	movs	r1, #0
    50c6:	68f8      	ldr	r0, [r7, #12]
    50c8:	f7ff fe84 	bl	4dd4 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    50cc:	4b21      	ldr	r3, [pc, #132]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    50d4:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    50d8:	693b      	ldr	r3, [r7, #16]
    50da:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    50dc:	4b1d      	ldr	r3, [pc, #116]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    50de:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    50e0:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    50e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    50e6:	4b1b      	ldr	r3, [pc, #108]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    50ee:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    50f2:	8afb      	ldrh	r3, [r7, #22]
    50f4:	015b      	lsls	r3, r3, #5
    50f6:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    50f8:	4b16      	ldr	r3, [pc, #88]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    50fa:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    50fc:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    50fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    5102:	4b14      	ldr	r3, [pc, #80]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    510a:	4b12      	ldr	r3, [pc, #72]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	f042 0201 	orr.w	r2, r2, #1
    5112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    5116:	4b0f      	ldr	r3, [pc, #60]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5118:	681b      	ldr	r3, [r3, #0]
    511a:	22aa      	movs	r2, #170	; 0xaa
    511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    5120:	4b0c      	ldr	r3, [pc, #48]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	2255      	movs	r2, #85	; 0x55
    5126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    512a:	4b0a      	ldr	r3, [pc, #40]	; (5154 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    5132:	210a      	movs	r1, #10
    5134:	4618      	mov	r0, r3
    5136:	f7fc fe40 	bl	1dba <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    513a:	4603      	mov	r3, r0
    513c:	f083 0301 	eor.w	r3, r3, #1
    5140:	b2db      	uxtb	r3, r3
    5142:	2b00      	cmp	r3, #0
    5144:	d001      	beq.n	514a <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    5146:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    5148:	e7ef      	b.n	512a <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    514a:	bf00      	nop
    514c:	3718      	adds	r7, #24
    514e:	46bd      	mov	sp, r7
    5150:	bd80      	pop	{r7, pc}
    5152:	bf00      	nop
    5154:	10000804 	.word	0x10000804

00005158 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    5158:	b590      	push	{r4, r7, lr}
    515a:	b083      	sub	sp, #12
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
    5160:	460b      	mov	r3, r1
    5162:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    5164:	78fb      	ldrb	r3, [r7, #3]
    5166:	2b1f      	cmp	r3, #31
    5168:	d90f      	bls.n	518a <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x32>
    516a:	f44f 73a9 	mov.w	r3, #338	; 0x152
    516e:	4a13      	ldr	r2, [pc, #76]	; (51bc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    5170:	4913      	ldr	r1, [pc, #76]	; (51c0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    5172:	4814      	ldr	r0, [pc, #80]	; (51c4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    5174:	f7ff f85a 	bl	422c <printf>
    5178:	4813      	ldr	r0, [pc, #76]	; (51c8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    517a:	f7fd ff11 	bl	2fa0 <puts>
    517e:	2100      	movs	r1, #0
    5180:	2001      	movs	r0, #1
    5182:	f7fd fc9d 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    5186:	f7fd fce7 	bl	2b58 <sjsu::Halt()>

    system_controller->CCLKSEL = bit::Insert(
    518a:	4b10      	ldr	r3, [pc, #64]	; (51cc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    518c:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    518e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    5192:	4b0e      	ldr	r3, [pc, #56]	; (51cc <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    5194:	681c      	ldr	r4, [r3, #0]
    5196:	4b0e      	ldr	r3, [pc, #56]	; (51d0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    5198:	78f9      	ldrb	r1, [r7, #3]
    519a:	781a      	ldrb	r2, [r3, #0]
    519c:	785b      	ldrb	r3, [r3, #1]
    519e:	021b      	lsls	r3, r3, #8
    51a0:	431a      	orrs	r2, r3
    51a2:	2300      	movs	r3, #0
    51a4:	f362 030f 	bfi	r3, r2, #0, #16
    51a8:	461a      	mov	r2, r3
    51aa:	f7fc fc71 	bl	1a90 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    51ae:	4603      	mov	r3, r0
    51b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    51b4:	bf00      	nop
    51b6:	370c      	adds	r7, #12
    51b8:	46bd      	mov	sp, r7
    51ba:	bd90      	pop	{r4, r7, pc}
    51bc:	000090c0 	.word	0x000090c0
    51c0:	00009434 	.word	0x00009434
    51c4:	00009108 	.word	0x00009108
    51c8:	00008e94 	.word	0x00008e94
    51cc:	10000804 	.word	0x10000804
    51d0:	000093dc 	.word	0x000093dc

000051d4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    51d4:	b590      	push	{r4, r7, lr}
    51d6:	b083      	sub	sp, #12
    51d8:	af00      	add	r7, sp, #0
    51da:	6078      	str	r0, [r7, #4]
    51dc:	460b      	mov	r3, r1
    51de:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    51e0:	4b0c      	ldr	r3, [pc, #48]	; (5214 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    51e8:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    51ea:	4b0a      	ldr	r3, [pc, #40]	; (5214 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    51ec:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    51ee:	4b0a      	ldr	r3, [pc, #40]	; (5218 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    51f0:	781a      	ldrb	r2, [r3, #0]
    51f2:	785b      	ldrb	r3, [r3, #1]
    51f4:	021b      	lsls	r3, r3, #8
    51f6:	431a      	orrs	r2, r3
    51f8:	2300      	movs	r3, #0
    51fa:	f362 030f 	bfi	r3, r2, #0, #16
    51fe:	461a      	mov	r2, r3
    5200:	f000 fcb5 	bl	5b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    5204:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    5206:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    520a:	bf00      	nop
    520c:	370c      	adds	r7, #12
    520e:	46bd      	mov	sp, r7
    5210:	bd90      	pop	{r4, r7, pc}
    5212:	bf00      	nop
    5214:	10000804 	.word	0x10000804
    5218:	000093d8 	.word	0x000093d8

0000521c <sjsu::Pin::PullUp() const>:
  void PullUp() const
    521c:	b580      	push	{r7, lr}
    521e:	b082      	sub	sp, #8
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    SetPull(Resistor::kPullUp);
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	681b      	ldr	r3, [r3, #0]
    5228:	3308      	adds	r3, #8
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	2102      	movs	r1, #2
    522e:	6878      	ldr	r0, [r7, #4]
    5230:	4798      	blx	r3
  }
    5232:	bf00      	nop
    5234:	3708      	adds	r7, #8
    5236:	46bd      	mov	sp, r7
    5238:	bd80      	pop	{r7, pc}

0000523a <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    523a:	b580      	push	{r7, lr}
    523c:	b082      	sub	sp, #8
    523e:	af00      	add	r7, sp, #0
    5240:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    5242:	6878      	ldr	r0, [r7, #4]
    5244:	f000 f820 	bl	5288 <sjsu::Uart::PollingFlush() const>
  }
    5248:	bf00      	nop
    524a:	3708      	adds	r7, #8
    524c:	46bd      	mov	sp, r7
    524e:	bd80      	pop	{r7, pc}

00005250 <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    5250:	b580      	push	{r7, lr}
    5252:	b084      	sub	sp, #16
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	330c      	adds	r3, #12
    525e:	681b      	ldr	r3, [r3, #0]
    5260:	f107 010f 	add.w	r1, r7, #15
    5264:	2201      	movs	r2, #1
    5266:	6878      	ldr	r0, [r7, #4]
    5268:	4798      	blx	r3
    526a:	4603      	mov	r3, r0
    526c:	2b00      	cmp	r3, #0
    526e:	bf0c      	ite	eq
    5270:	2301      	moveq	r3, #1
    5272:	2300      	movne	r3, #0
    5274:	b2db      	uxtb	r3, r3
    5276:	2b00      	cmp	r3, #0
    5278:	d001      	beq.n	527e <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    527a:	23ff      	movs	r3, #255	; 0xff
    527c:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    527e:	7bfb      	ldrb	r3, [r7, #15]
  }
    5280:	4618      	mov	r0, r3
    5282:	3710      	adds	r7, #16
    5284:	46bd      	mov	sp, r7
    5286:	bd80      	pop	{r7, pc}

00005288 <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    5288:	b580      	push	{r7, lr}
    528a:	b082      	sub	sp, #8
    528c:	af00      	add	r7, sp, #0
    528e:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	681b      	ldr	r3, [r3, #0]
    5294:	3310      	adds	r3, #16
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	6878      	ldr	r0, [r7, #4]
    529a:	4798      	blx	r3
    529c:	4603      	mov	r3, r0
    529e:	2b00      	cmp	r3, #0
    52a0:	d003      	beq.n	52aa <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    52a2:	6878      	ldr	r0, [r7, #4]
    52a4:	f7ff ffd4 	bl	5250 <sjsu::Uart::Read() const>
    while (HasData())
    52a8:	e7f2      	b.n	5290 <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    52aa:	bf00      	nop
    52ac:	3708      	adds	r7, #8
    52ae:	46bd      	mov	sp, r7
    52b0:	bd80      	pop	{r7, pc}
    52b2:	Address 0x00000000000052b2 is out of bounds.


000052b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    52b4:	b480      	push	{r7}
    52b6:	b089      	sub	sp, #36	; 0x24
    52b8:	af00      	add	r7, sp, #0
    52ba:	6078      	str	r0, [r7, #4]
    52bc:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	2200      	movs	r2, #0
    52c4:	601a      	str	r2, [r3, #0]
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	2200      	movs	r2, #0
    52ca:	605a      	str	r2, [r3, #4]
    52cc:	687b      	ldr	r3, [r7, #4]
    52ce:	2201      	movs	r2, #1
    52d0:	609a      	str	r2, [r3, #8]
  bool finished = false;
    52d2:	2300      	movs	r3, #0
    52d4:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    52d6:	2300      	movs	r3, #0
    52d8:	61bb      	str	r3, [r7, #24]
    52da:	69bb      	ldr	r3, [r7, #24]
    52dc:	2b0e      	cmp	r3, #14
    52de:	dc4f      	bgt.n	5380 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    52e0:	7ffb      	ldrb	r3, [r7, #31]
    52e2:	2b00      	cmp	r3, #0
    52e4:	d14c      	bne.n	5380 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    52e6:	69bb      	ldr	r3, [r7, #24]
    52e8:	3301      	adds	r3, #1
    52ea:	617b      	str	r3, [r7, #20]
    52ec:	697b      	ldr	r3, [r7, #20]
    52ee:	2b0e      	cmp	r3, #14
    52f0:	dc42      	bgt.n	5378 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    52f2:	7ffb      	ldrb	r3, [r7, #31]
    52f4:	2b00      	cmp	r3, #0
    52f6:	d13f      	bne.n	5378 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    52f8:	69bb      	ldr	r3, [r7, #24]
    52fa:	ee07 3a90 	vmov	s15, r3
    52fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5302:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    5306:	697b      	ldr	r3, [r7, #20]
    5308:	ee07 3a90 	vmov	s15, r3
    530c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5310:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    5314:	edd7 6a04 	vldr	s13, [r7, #16]
    5318:	ed97 7a03 	vldr	s14, [r7, #12]
    531c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5324:	ee77 7a87 	vadd.f32	s15, s15, s14
    5328:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    532c:	edd7 7a02 	vldr	s15, [r7, #8]
    5330:	ed9f 7a17 	vldr	s14, [pc, #92]	; 5390 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    5334:	ee77 7a87 	vadd.f32	s15, s15, s14
    5338:	ed97 7a00 	vldr	s14, [r7]
    533c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5344:	d814      	bhi.n	5370 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    5346:	edd7 7a02 	vldr	s15, [r7, #8]
    534a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 5390 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    534e:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    5352:	ed97 7a00 	vldr	s14, [r7]
    5356:	eeb4 7ae7 	vcmpe.f32	s14, s15
    535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    535e:	db07      	blt.n	5370 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    5360:	69ba      	ldr	r2, [r7, #24]
    5362:	687b      	ldr	r3, [r7, #4]
    5364:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    5366:	697a      	ldr	r2, [r7, #20]
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	609a      	str	r2, [r3, #8]
        finished          = true;
    536c:	2301      	movs	r3, #1
    536e:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    5370:	697b      	ldr	r3, [r7, #20]
    5372:	3301      	adds	r3, #1
    5374:	617b      	str	r3, [r7, #20]
    5376:	e7b9      	b.n	52ec <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    5378:	69bb      	ldr	r3, [r7, #24]
    537a:	3301      	adds	r3, #1
    537c:	61bb      	str	r3, [r7, #24]
    537e:	e7ac      	b.n	52da <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    5380:	bf00      	nop
}
    5382:	6878      	ldr	r0, [r7, #4]
    5384:	3724      	adds	r7, #36	; 0x24
    5386:	46bd      	mov	sp, r7
    5388:	f85d 7b04 	ldr.w	r7, [sp], #4
    538c:	4770      	bx	lr
    538e:	bf00      	nop
    5390:	3c23d70a 	.word	0x3c23d70a

00005394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    5394:	b480      	push	{r7}
    5396:	b087      	sub	sp, #28
    5398:	af00      	add	r7, sp, #0
    539a:	ed87 0a03 	vstr	s0, [r7, #12]
    539e:	edc7 0a02 	vstr	s1, [r7, #8]
    53a2:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	ee07 3a90 	vmov	s15, r3
    53aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    53ae:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    53b2:	edd7 7a03 	vldr	s15, [r7, #12]
    53b6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    53ba:	ee27 7a87 	vmul.f32	s14, s15, s14
    53be:	edd7 7a02 	vldr	s15, [r7, #8]
    53c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    53c6:	ed97 7a05 	vldr	s14, [r7, #20]
    53ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
    53ce:	eef0 7a66 	vmov.f32	s15, s13
}
    53d2:	eeb0 0a67 	vmov.f32	s0, s15
    53d6:	371c      	adds	r7, #28
    53d8:	46bd      	mov	sp, r7
    53da:	f85d 7b04 	ldr.w	r7, [sp], #4
    53de:	4770      	bx	lr

000053e0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    53e0:	b480      	push	{r7}
    53e2:	b087      	sub	sp, #28
    53e4:	af00      	add	r7, sp, #0
    53e6:	ed87 0a03 	vstr	s0, [r7, #12]
    53ea:	edc7 0a02 	vstr	s1, [r7, #8]
    53ee:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	ee07 3a90 	vmov	s15, r3
    53f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    53fa:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    53fe:	edd7 7a03 	vldr	s15, [r7, #12]
    5402:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    5406:	ee27 7a87 	vmul.f32	s14, s15, s14
    540a:	edd7 7a02 	vldr	s15, [r7, #8]
    540e:	ee67 7a27 	vmul.f32	s15, s14, s15
    5412:	ed97 7a05 	vldr	s14, [r7, #20]
    5416:	eec7 6a27 	vdiv.f32	s13, s14, s15
    541a:	eef0 7a66 	vmov.f32	s15, s13
}
    541e:	eeb0 0a67 	vmov.f32	s0, s15
    5422:	371c      	adds	r7, #28
    5424:	46bd      	mov	sp, r7
    5426:	f85d 7b04 	ldr.w	r7, [sp], #4
    542a:	4770      	bx	lr

0000542c <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    542c:	b480      	push	{r7}
    542e:	b083      	sub	sp, #12
    5430:	af00      	add	r7, sp, #0
    5432:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    5436:	edd7 7a01 	vldr	s15, [r7, #4]
    543a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    543e:	ee77 7a87 	vadd.f32	s15, s15, s14
    5442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    544a:	eeb0 0a67 	vmov.f32	s0, s15
    544e:	370c      	adds	r7, #12
    5450:	46bd      	mov	sp, r7
    5452:	f85d 7b04 	ldr.w	r7, [sp], #4
    5456:	4770      	bx	lr

00005458 <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    5458:	b580      	push	{r7, lr}
    545a:	b086      	sub	sp, #24
    545c:	af00      	add	r7, sp, #0
    545e:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    5462:	2300      	movs	r3, #0
    5464:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    5466:	ed97 0a01 	vldr	s0, [r7, #4]
    546a:	f7ff ffdf 	bl	542c <sjsu::lpc40xx::uart::RoundFloat(float)>
    546e:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    5472:	ed97 7a01 	vldr	s14, [r7, #4]
    5476:	edd7 7a04 	vldr	s15, [r7, #16]
    547a:	ee77 7a67 	vsub.f32	s15, s14, s15
    547e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    5482:	edd7 7a03 	vldr	s15, [r7, #12]
    5486:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 54b4 <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    548a:	eef4 7ac7 	vcmpe.f32	s15, s14
    548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5492:	db0a      	blt.n	54aa <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    5494:	edd7 7a03 	vldr	s15, [r7, #12]
    5498:	ed9f 7a07 	vldr	s14, [pc, #28]	; 54b8 <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    549c:	eef4 7ac7 	vcmpe.f32	s15, s14
    54a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54a4:	d801      	bhi.n	54aa <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    54a6:	2301      	movs	r3, #1
    54a8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    54aa:	7dfb      	ldrb	r3, [r7, #23]
}
    54ac:	4618      	mov	r0, r3
    54ae:	3718      	adds	r7, #24
    54b0:	46bd      	mov	sp, r7
    54b2:	bd80      	pop	{r7, pc}
    54b4:	bc23d70a 	.word	0xbc23d70a
    54b8:	3c23d70a 	.word	0x3c23d70a

000054bc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @param peripheral_frequency - input clock source frequency
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    54bc:	b590      	push	{r4, r7, lr}
    54be:	b091      	sub	sp, #68	; 0x44
    54c0:	af00      	add	r7, sp, #0
    54c2:	61f8      	str	r0, [r7, #28]
    54c4:	61b9      	str	r1, [r7, #24]
    54c6:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    54c8:	f107 0314 	add.w	r3, r7, #20
    54cc:	4618      	mov	r0, r3
    54ce:	f7ff fa83 	bl	49d8 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    54d2:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    54d4:	2300      	movs	r3, #0
    54d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    54d8:	69fb      	ldr	r3, [r7, #28]
    54da:	2200      	movs	r2, #0
    54dc:	601a      	str	r2, [r3, #0]
    54de:	69fb      	ldr	r3, [r7, #28]
    54e0:	2200      	movs	r2, #0
    54e2:	605a      	str	r2, [r3, #4]
    54e4:	69fb      	ldr	r3, [r7, #28]
    54e6:	2201      	movs	r2, #1
    54e8:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    54ea:	69bb      	ldr	r3, [r7, #24]
    54ec:	ee07 3a90 	vmov	s15, r3
    54f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    54f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    54f8:	f04f 0300 	mov.w	r3, #0
    54fc:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    54fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    5502:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    5504:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    5508:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    550a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    550e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    5510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5512:	2b04      	cmp	r3, #4
    5514:	f000 80be 	beq.w	5694 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    5518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    551a:	2b03      	cmp	r3, #3
    551c:	f200 80b8 	bhi.w	5690 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    5520:	a201      	add	r2, pc, #4	; (adr r2, 5528 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    5522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5526:	bf00      	nop
    5528:	00005539 	.word	0x00005539
    552c:	00005593 	.word	0x00005593
    5530:	000055f3 	.word	0x000055f3
    5534:	00005663 	.word	0x00005663
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    5538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    553a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    553e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    5542:	f7ff ff27 	bl	5394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5546:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    554a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    554e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5552:	eef4 7ac7 	vcmpe.f32	s15, s14
    5556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    555a:	d505      	bpl.n	5568 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    555c:	69fb      	ldr	r3, [r7, #28]
    555e:	2200      	movs	r2, #0
    5560:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    5562:	2304      	movs	r3, #4
    5564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    5566:	e094      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    5568:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    556c:	f7ff ff74 	bl	5458 <sjsu::lpc40xx::uart::IsDecimal(float)>
    5570:	4603      	mov	r3, r0
    5572:	2b00      	cmp	r3, #0
    5574:	d00a      	beq.n	558c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    5576:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    557a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    557e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    5582:	69fb      	ldr	r3, [r7, #28]
    5584:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    5586:	2304      	movs	r3, #4
    5588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    558a:	e082      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    558c:	2301      	movs	r3, #1
    558e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5590:	e07f      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    5592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5594:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    5598:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    559c:	f7ff fefa 	bl	5394 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    55a0:	eef0 7a40 	vmov.f32	s15, s0
    55a4:	eeb0 0a67 	vmov.f32	s0, s15
    55a8:	f7ff ff40 	bl	542c <sjsu::lpc40xx::uart::RoundFloat(float)>
    55ac:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    55b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    55b2:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    55b6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    55ba:	f7ff ff11 	bl	53e0 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    55be:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    55c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    55c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 56a0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    55ca:	eef4 7ac7 	vcmpe.f32	s15, s14
    55ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55d2:	db0b      	blt.n	55ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    55d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    55d8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 56a4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    55dc:	eef4 7ac7 	vcmpe.f32	s15, s14
    55e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55e4:	d802      	bhi.n	55ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    55e6:	2303      	movs	r3, #3
    55e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    55ea:	e052      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    55ec:	2302      	movs	r3, #2
    55ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    55f0:	e04f      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    55f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    55f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    55fa:	ee77 7a87 	vadd.f32	s15, s15, s14
    55fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    5602:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5606:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    560a:	eef4 7ac7 	vcmpe.f32	s15, s14
    560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5612:	dd02      	ble.n	561a <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    5614:	2304      	movs	r3, #4
    5616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    5618:	e03b      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    561a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    561e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    5622:	eef4 7ac7 	vcmpe.f32	s15, s14
    5626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    562a:	dd0f      	ble.n	564c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    562c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5634:	ee77 7a87 	vadd.f32	s15, s15, s14
    5638:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    563c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    5640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5644:	ee77 7a87 	vadd.f32	s15, s15, s14
    5648:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    564c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    5650:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    5654:	eec6 7a87 	vdiv.f32	s15, s13, s14
    5658:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    565c:	2301      	movs	r3, #1
    565e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5660:	e017      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    5662:	69fc      	ldr	r4, [r7, #28]
    5664:	463b      	mov	r3, r7
    5666:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    566a:	4618      	mov	r0, r3
    566c:	f7ff fe22 	bl	52b4 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    5670:	463b      	mov	r3, r7
    5672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    567a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    567e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5682:	ee17 2a90 	vmov	r2, s15
    5686:	69fb      	ldr	r3, [r7, #28]
    5688:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    568a:	2304      	movs	r3, #4
    568c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    568e:	e000      	b.n	5692 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    5690:	bf00      	nop
  while (state != States::kDone)
    5692:	e73d      	b.n	5510 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    5694:	bf00      	nop
}
    5696:	69f8      	ldr	r0, [r7, #28]
    5698:	3744      	adds	r7, #68	; 0x44
    569a:	46bd      	mov	sp, r7
    569c:	bd90      	pop	{r4, r7, pc}
    569e:	bf00      	nop
    56a0:	3f8ccccd 	.word	0x3f8ccccd
    56a4:	3ff33333 	.word	0x3ff33333

000056a8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    56a8:	b580      	push	{r7, lr}
    56aa:	b084      	sub	sp, #16
    56ac:	af00      	add	r7, sp, #0
    56ae:	6078      	str	r0, [r7, #4]
    56b0:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    56b2:	2307      	movs	r3, #7
    56b4:	73fb      	strb	r3, [r7, #15]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    56b6:	f7fe ff85 	bl	45c4 <sjsu::SystemController::GetPlatformController()>
    56ba:	4603      	mov	r3, r0
        port_.power_on_id);
    56bc:	681a      	ldr	r2, [r3, #0]
    56be:	3214      	adds	r2, #20
    56c0:	6812      	ldr	r2, [r2, #0]
    56c2:	6879      	ldr	r1, [r7, #4]
    56c4:	6849      	ldr	r1, [r1, #4]
    56c6:	3104      	adds	r1, #4
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    56c8:	4618      	mov	r0, r3
    56ca:	4790      	blx	r2

    SetBaudRate(baud_rate);
    56cc:	6839      	ldr	r1, [r7, #0]
    56ce:	6878      	ldr	r0, [r7, #4]
    56d0:	f000 f83f 	bl	5752 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	685b      	ldr	r3, [r3, #4]
    56d8:	68db      	ldr	r3, [r3, #12]
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	3304      	adds	r3, #4
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	687a      	ldr	r2, [r7, #4]
    56e2:	6852      	ldr	r2, [r2, #4]
    56e4:	68d0      	ldr	r0, [r2, #12]
    56e6:	687a      	ldr	r2, [r7, #4]
    56e8:	6852      	ldr	r2, [r2, #4]
    56ea:	7c12      	ldrb	r2, [r2, #16]
    56ec:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    56f0:	b2d2      	uxtb	r2, r2
    56f2:	4611      	mov	r1, r2
    56f4:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    56f6:	687b      	ldr	r3, [r7, #4]
    56f8:	685b      	ldr	r3, [r3, #4]
    56fa:	689b      	ldr	r3, [r3, #8]
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	3304      	adds	r3, #4
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	687a      	ldr	r2, [r7, #4]
    5704:	6852      	ldr	r2, [r2, #4]
    5706:	6890      	ldr	r0, [r2, #8]
    5708:	687a      	ldr	r2, [r7, #4]
    570a:	6852      	ldr	r2, [r2, #4]
    570c:	7c12      	ldrb	r2, [r2, #16]
    570e:	f3c2 0202 	ubfx	r2, r2, #0, #3
    5712:	b2d2      	uxtb	r2, r2
    5714:	4611      	mov	r1, r2
    5716:	4798      	blx	r3
    port_.rx.PullUp();
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	685b      	ldr	r3, [r3, #4]
    571c:	68db      	ldr	r3, [r3, #12]
    571e:	4618      	mov	r0, r3
    5720:	f7ff fd7c 	bl	521c <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	685b      	ldr	r3, [r3, #4]
    5728:	689b      	ldr	r3, [r3, #8]
    572a:	4618      	mov	r0, r3
    572c:	f7ff fd76 	bl	521c <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	685b      	ldr	r3, [r3, #4]
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	7a1b      	ldrb	r3, [r3, #8]
    5738:	b2da      	uxtb	r2, r3
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	685b      	ldr	r3, [r3, #4]
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	f042 0207 	orr.w	r2, r2, #7
    5744:	b2d2      	uxtb	r2, r2
    5746:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    5748:	2300      	movs	r3, #0
  }
    574a:	4618      	mov	r0, r3
    574c:	3710      	adds	r7, #16
    574e:	46bd      	mov	sp, r7
    5750:	bd80      	pop	{r7, pc}

00005752 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    5752:	b580      	push	{r7, lr}
    5754:	b088      	sub	sp, #32
    5756:	af00      	add	r7, sp, #0
    5758:	6078      	str	r0, [r7, #4]
    575a:	6039      	str	r1, [r7, #0]
  {
    auto peripheral_frequency =
        sjsu::SystemController::GetPlatformController().GetPeripheralFrequency(
    575c:	f7fe ff32 	bl	45c4 <sjsu::SystemController::GetPlatformController()>
    5760:	4602      	mov	r2, r0
            port_.power_on_id);
    5762:	687b      	ldr	r3, [r7, #4]
    5764:	685b      	ldr	r3, [r3, #4]
    5766:	3304      	adds	r3, #4
    5768:	4619      	mov	r1, r3
    576a:	4610      	mov	r0, r2
    576c:	f7fe ff36 	bl	45dc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    5770:	4603      	mov	r3, r0
    5772:	61bb      	str	r3, [r7, #24]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    5774:	f107 030c 	add.w	r3, r7, #12
    5778:	69ba      	ldr	r2, [r7, #24]
    577a:	6839      	ldr	r1, [r7, #0]
    577c:	4618      	mov	r0, r3
    577e:	f7ff fe9d 	bl	54bc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    5782:	2380      	movs	r3, #128	; 0x80
    5784:	77fb      	strb	r3, [r7, #31]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    5786:	68fb      	ldr	r3, [r7, #12]
    5788:	0a1b      	lsrs	r3, r3, #8
    578a:	77bb      	strb	r3, [r7, #30]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    578c:	68fb      	ldr	r3, [r7, #12]
    578e:	777b      	strb	r3, [r7, #29]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5790:	697b      	ldr	r3, [r7, #20]
    5792:	b2db      	uxtb	r3, r3
    5794:	011b      	lsls	r3, r3, #4
    5796:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    5798:	693b      	ldr	r3, [r7, #16]
    579a:	b2db      	uxtb	r3, r3
    579c:	f003 030f 	and.w	r3, r3, #15
    57a0:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    57a2:	4313      	orrs	r3, r2
    57a4:	773b      	strb	r3, [r7, #28]

    port_.registers->LCR = kDlabBit;
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	685b      	ldr	r3, [r3, #4]
    57aa:	681b      	ldr	r3, [r3, #0]
    57ac:	2280      	movs	r2, #128	; 0x80
    57ae:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	685b      	ldr	r3, [r3, #4]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	7fba      	ldrb	r2, [r7, #30]
    57b8:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	685b      	ldr	r3, [r3, #4]
    57be:	681b      	ldr	r3, [r3, #0]
    57c0:	7f7a      	ldrb	r2, [r7, #29]
    57c2:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	685b      	ldr	r3, [r3, #4]
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	7f3a      	ldrb	r2, [r7, #28]
    57cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	685b      	ldr	r3, [r3, #4]
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	2203      	movs	r2, #3
    57d8:	731a      	strb	r2, [r3, #12]
    return true;
    57da:	2301      	movs	r3, #1
  }
    57dc:	4618      	mov	r0, r3
    57de:	3720      	adds	r7, #32
    57e0:	46bd      	mov	sp, r7
    57e2:	bd80      	pop	{r7, pc}

000057e4 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    57e4:	b580      	push	{r7, lr}
    57e6:	b086      	sub	sp, #24
    57e8:	af00      	add	r7, sp, #0
    57ea:	60f8      	str	r0, [r7, #12]
    57ec:	60b9      	str	r1, [r7, #8]
    57ee:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    57f0:	68bb      	ldr	r3, [r7, #8]
    57f2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    57f4:	2300      	movs	r3, #0
    57f6:	617b      	str	r3, [r7, #20]
    57f8:	697a      	ldr	r2, [r7, #20]
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	429a      	cmp	r2, r3
    57fe:	d216      	bcs.n	582e <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    5800:	693a      	ldr	r2, [r7, #16]
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	441a      	add	r2, r3
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	685b      	ldr	r3, [r3, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	7812      	ldrb	r2, [r2, #0]
    580e:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    5810:	68f8      	ldr	r0, [r7, #12]
    5812:	f000 f843 	bl	589c <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    5816:	4603      	mov	r3, r0
    5818:	f083 0301 	eor.w	r3, r3, #1
    581c:	b2db      	uxtb	r3, r3
    581e:	2b00      	cmp	r3, #0
    5820:	d001      	beq.n	5826 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    5822:	bf00      	nop
      while (!TransmissionComplete())
    5824:	e7f4      	b.n	5810 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    5826:	697b      	ldr	r3, [r7, #20]
    5828:	3301      	adds	r3, #1
    582a:	617b      	str	r3, [r7, #20]
    582c:	e7e4      	b.n	57f8 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    582e:	bf00      	nop
    5830:	3718      	adds	r7, #24
    5832:	46bd      	mov	sp, r7
    5834:	bd80      	pop	{r7, pc}

00005836 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    5836:	b580      	push	{r7, lr}
    5838:	b086      	sub	sp, #24
    583a:	af00      	add	r7, sp, #0
    583c:	60f8      	str	r0, [r7, #12]
    583e:	60b9      	str	r1, [r7, #8]
    5840:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    5842:	68bb      	ldr	r3, [r7, #8]
    5844:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    5846:	2300      	movs	r3, #0
    5848:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    584a:	68f8      	ldr	r0, [r7, #12]
    584c:	f000 f838 	bl	58c0 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5850:	4603      	mov	r3, r0
    5852:	2b00      	cmp	r3, #0
    5854:	d011      	beq.n	587a <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    5856:	697a      	ldr	r2, [r7, #20]
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	429a      	cmp	r2, r3
    585c:	d20c      	bcs.n	5878 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    585e:	68fb      	ldr	r3, [r7, #12]
    5860:	685b      	ldr	r3, [r3, #4]
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	b2d9      	uxtb	r1, r3
    5868:	697b      	ldr	r3, [r7, #20]
    586a:	1c5a      	adds	r2, r3, #1
    586c:	617a      	str	r2, [r7, #20]
    586e:	693a      	ldr	r2, [r7, #16]
    5870:	4413      	add	r3, r2
    5872:	460a      	mov	r2, r1
    5874:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    5876:	e7e8      	b.n	584a <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    5878:	bf00      	nop
    }
    return index;
    587a:	697b      	ldr	r3, [r7, #20]
  }
    587c:	4618      	mov	r0, r3
    587e:	3718      	adds	r7, #24
    5880:	46bd      	mov	sp, r7
    5882:	bd80      	pop	{r7, pc}

00005884 <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    5884:	b580      	push	{r7, lr}
    5886:	b082      	sub	sp, #8
    5888:	af00      	add	r7, sp, #0
    588a:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    588c:	6878      	ldr	r0, [r7, #4]
    588e:	f000 f817 	bl	58c0 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5892:	4603      	mov	r3, r0
  }
    5894:	4618      	mov	r0, r3
    5896:	3708      	adds	r7, #8
    5898:	46bd      	mov	sp, r7
    589a:	bd80      	pop	{r7, pc}

0000589c <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    589c:	b580      	push	{r7, lr}
    589e:	b082      	sub	sp, #8
    58a0:	af00      	add	r7, sp, #0
    58a2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    58a4:	687b      	ldr	r3, [r7, #4]
    58a6:	685b      	ldr	r3, [r3, #4]
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	7d1b      	ldrb	r3, [r3, #20]
    58ac:	b2db      	uxtb	r3, r3
    58ae:	2105      	movs	r1, #5
    58b0:	4618      	mov	r0, r3
    58b2:	f000 f9b8 	bl	5c26 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    58b6:	4603      	mov	r3, r0
  }
    58b8:	4618      	mov	r0, r3
    58ba:	3708      	adds	r7, #8
    58bc:	46bd      	mov	sp, r7
    58be:	bd80      	pop	{r7, pc}

000058c0 <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    58c0:	b580      	push	{r7, lr}
    58c2:	b082      	sub	sp, #8
    58c4:	af00      	add	r7, sp, #0
    58c6:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	685b      	ldr	r3, [r3, #4]
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	7d1b      	ldrb	r3, [r3, #20]
    58d0:	b2db      	uxtb	r3, r3
    58d2:	2100      	movs	r1, #0
    58d4:	4618      	mov	r0, r3
    58d6:	f000 f9a6 	bl	5c26 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    58da:	4603      	mov	r3, r0
  }
    58dc:	4618      	mov	r0, r3
    58de:	3708      	adds	r7, #8
    58e0:	46bd      	mov	sp, r7
    58e2:	bd80      	pop	{r7, pc}

000058e4 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    58e4:	b580      	push	{r7, lr}
    58e6:	b082      	sub	sp, #8
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    58ee:	683a      	ldr	r2, [r7, #0]
    58f0:	6879      	ldr	r1, [r7, #4]
    58f2:	4804      	ldr	r0, [pc, #16]	; (5904 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    58f4:	f7ff ff76 	bl	57e4 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    58f8:	683b      	ldr	r3, [r7, #0]
}
    58fa:	4618      	mov	r0, r3
    58fc:	3708      	adds	r7, #8
    58fe:	46bd      	mov	sp, r7
    5900:	bd80      	pop	{r7, pc}
    5902:	bf00      	nop
    5904:	10000070 	.word	0x10000070

00005908 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    5908:	b580      	push	{r7, lr}
    590a:	b082      	sub	sp, #8
    590c:	af00      	add	r7, sp, #0
    590e:	6078      	str	r0, [r7, #4]
    5910:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    5912:	480a      	ldr	r0, [pc, #40]	; (593c <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    5914:	f7ff ffb6 	bl	5884 <sjsu::lpc40xx::Uart::HasData() const>
    5918:	4603      	mov	r3, r0
    591a:	f083 0301 	eor.w	r3, r3, #1
    591e:	b2db      	uxtb	r3, r3
    5920:	2b00      	cmp	r3, #0
    5922:	d001      	beq.n	5928 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    5924:	bf00      	nop
  while (!uart0.HasData())
    5926:	e7f4      	b.n	5912 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    5928:	683a      	ldr	r2, [r7, #0]
    592a:	6879      	ldr	r1, [r7, #4]
    592c:	4803      	ldr	r0, [pc, #12]	; (593c <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    592e:	f7ff ff82 	bl	5836 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    5932:	683b      	ldr	r3, [r7, #0]
}
    5934:	4618      	mov	r0, r3
    5936:	3708      	adds	r7, #8
    5938:	46bd      	mov	sp, r7
    593a:	bd80      	pop	{r7, pc}
    593c:	10000070 	.word	0x10000070

00005940 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    5940:	b580      	push	{r7, lr}
    5942:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    5944:	4802      	ldr	r0, [pc, #8]	; (5950 <ThreadRuntimeCounter+0x10>)
    5946:	f7fe fd2f 	bl	43a8 <sjsu::cortex::DwtCounter::GetCount()>
    594a:	4603      	mov	r3, r0
}
    594c:	4618      	mov	r0, r3
    594e:	bd80      	pop	{r7, pc}
    5950:	10000808 	.word	0x10000808

00005954 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    5954:	b580      	push	{r7, lr}
    5956:	b086      	sub	sp, #24
    5958:	af00      	add	r7, sp, #0
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    595a:	f7fe fd35 	bl	43c8 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    595e:	4828      	ldr	r0, [pc, #160]	; (5a00 <sjsu::InitializePlatform()+0xac>)
    5960:	f7fe fd46 	bl	43f0 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    5964:	4827      	ldr	r0, [pc, #156]	; (5a04 <sjsu::InitializePlatform()+0xb0>)
    5966:	f7fe fe1d 	bl	45a4 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    596a:	4b27      	ldr	r3, [pc, #156]	; (5a08 <sjsu::InitializePlatform()+0xb4>)
    596c:	6819      	ldr	r1, [r3, #0]
    596e:	4825      	ldr	r0, [pc, #148]	; (5a04 <sjsu::InitializePlatform()+0xb0>)
    5970:	f7ff f8d8 	bl	4b24 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    5974:	23ff      	movs	r3, #255	; 0xff
    5976:	703b      	strb	r3, [r7, #0]
    5978:	463b      	mov	r3, r7
    597a:	2201      	movs	r2, #1
    597c:	4619      	mov	r1, r3
    597e:	4821      	ldr	r0, [pc, #132]	; (5a04 <sjsu::InitializePlatform()+0xb0>)
    5980:	f7ff f91e 	bl	4bc0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5984:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    5988:	4820      	ldr	r0, [pc, #128]	; (5a0c <sjsu::InitializePlatform()+0xb8>)
    598a:	f7ff fe8d 	bl	56a8 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    598e:	4820      	ldr	r0, [pc, #128]	; (5a10 <sjsu::InitializePlatform()+0xbc>)
    5990:	f000 fd82 	bl	6498 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    5994:	481f      	ldr	r0, [pc, #124]	; (5a14 <sjsu::InitializePlatform()+0xc0>)
    5996:	f000 fd8f 	bl	64b8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    599a:	481f      	ldr	r0, [pc, #124]	; (5a18 <sjsu::InitializePlatform()+0xc4>)
    599c:	f7fe ff08 	bl	47b0 <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    59a0:	4b1e      	ldr	r3, [pc, #120]	; (5a1c <sjsu::InitializePlatform()+0xc8>)
    59a2:	6819      	ldr	r1, [r3, #0]
    59a4:	481c      	ldr	r0, [pc, #112]	; (5a18 <sjsu::InitializePlatform()+0xc4>)
    59a6:	f7ff f835 	bl	4a14 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    59aa:	481b      	ldr	r0, [pc, #108]	; (5a18 <sjsu::InitializePlatform()+0xc4>)
    59ac:	f7fe ff58 	bl	4860 <sjsu::cortex::SystemTimer::StartTimer() const>
    59b0:	6178      	str	r0, [r7, #20]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    59b2:	697b      	ldr	r3, [r7, #20]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d00e      	beq.n	59d6 <sjsu::InitializePlatform()+0x82>
    59b8:	23ba      	movs	r3, #186	; 0xba
    59ba:	4a19      	ldr	r2, [pc, #100]	; (5a20 <sjsu::InitializePlatform()+0xcc>)
    59bc:	4919      	ldr	r1, [pc, #100]	; (5a24 <sjsu::InitializePlatform()+0xd0>)
    59be:	481a      	ldr	r0, [pc, #104]	; (5a28 <sjsu::InitializePlatform()+0xd4>)
    59c0:	f7fe fc34 	bl	422c <printf>
    59c4:	4819      	ldr	r0, [pc, #100]	; (5a2c <sjsu::InitializePlatform()+0xd8>)
    59c6:	f7fd faeb 	bl	2fa0 <puts>
    59ca:	2100      	movs	r1, #0
    59cc:	2001      	movs	r0, #1
    59ce:	f7fd f877 	bl	2ac0 <sjsu::debug::PrintBacktrace(bool, void*)>
    59d2:	f7fd f8c1 	bl	2b58 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    59d6:	4816      	ldr	r0, [pc, #88]	; (5a30 <sjsu::InitializePlatform()+0xdc>)
    59d8:	f7fe fcc4 	bl	4364 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    59dc:	1d3b      	adds	r3, r7, #4
    59de:	4915      	ldr	r1, [pc, #84]	; (5a34 <sjsu::InitializePlatform()+0xe0>)
    59e0:	4618      	mov	r0, r3
    59e2:	f7fc f88f 	bl	1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    59e6:	1d3b      	adds	r3, r7, #4
    59e8:	4618      	mov	r0, r3
    59ea:	f7fe fdcd 	bl	4588 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    59ee:	1d3b      	adds	r3, r7, #4
    59f0:	4618      	mov	r0, r3
    59f2:	f7fa ff15 	bl	820 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    59f6:	bf00      	nop
    59f8:	3718      	adds	r7, #24
    59fa:	46bd      	mov	sp, r7
    59fc:	bd80      	pop	{r7, pc}
    59fe:	bf00      	nop
    5a00:	1000008c 	.word	0x1000008c
    5a04:	1000006c 	.word	0x1000006c
    5a08:	00008c80 	.word	0x00008c80
    5a0c:	10000070 	.word	0x10000070
    5a10:	000058e5 	.word	0x000058e5
    5a14:	00005909 	.word	0x00005909
    5a18:	10000078 	.word	0x10000078
    5a1c:	00008c84 	.word	0x00008c84
    5a20:	000091a4 	.word	0x000091a4
    5a24:	000094a0 	.word	0x000094a0
    5a28:	000091c4 	.word	0x000091c4
    5a2c:	00008e94 	.word	0x00008e94
    5a30:	10000808 	.word	0x10000808
    5a34:	00004739 	.word	0x00004739

00005a38 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    5a38:	b580      	push	{r7, lr}
    5a3a:	b086      	sub	sp, #24
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
    5a40:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    5a42:	f107 0308 	add.w	r3, r7, #8
    5a46:	6839      	ldr	r1, [r7, #0]
    5a48:	4618      	mov	r0, r3
    5a4a:	f000 f943 	bl	5cd4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    5a4e:	f107 0308 	add.w	r3, r7, #8
    5a52:	6879      	ldr	r1, [r7, #4]
    5a54:	4618      	mov	r0, r3
    5a56:	f000 f95f 	bl	5d18 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    5a5a:	f107 0308 	add.w	r3, r7, #8
    5a5e:	4618      	mov	r0, r3
    5a60:	f7fa fede 	bl	820 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    5a64:	687b      	ldr	r3, [r7, #4]
      }
    5a66:	4618      	mov	r0, r3
    5a68:	3718      	adds	r7, #24
    5a6a:	46bd      	mov	sp, r7
    5a6c:	bd80      	pop	{r7, pc}

00005a6e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    5a6e:	b580      	push	{r7, lr}
    5a70:	b084      	sub	sp, #16
    5a72:	af00      	add	r7, sp, #0
    5a74:	6078      	str	r0, [r7, #4]
    5a76:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	4618      	mov	r0, r3
    5a7c:	f7fe ff42 	bl	4904 <units::linear_scale<float>::operator()() const>
    5a80:	eef0 6a40 	vmov.f32	s13, s0
    5a84:	683b      	ldr	r3, [r7, #0]
    5a86:	ee07 3a90 	vmov	s15, r3
    5a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    5a92:	f107 030c 	add.w	r3, r7, #12
    5a96:	eeb0 0a47 	vmov.f32	s0, s14
    5a9a:	4618      	mov	r0, r3
    5a9c:	f7fe fd25 	bl	44ea <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5aa0:	68fb      	ldr	r3, [r7, #12]
	}
    5aa2:	4618      	mov	r0, r3
    5aa4:	3710      	adds	r7, #16
    5aa6:	46bd      	mov	sp, r7
    5aa8:	bd80      	pop	{r7, pc}

00005aaa <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    5aaa:	b580      	push	{r7, lr}
    5aac:	b082      	sub	sp, #8
    5aae:	af00      	add	r7, sp, #0
    5ab0:	6078      	str	r0, [r7, #4]
    5ab2:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	4618      	mov	r0, r3
    5ab8:	f7fa fc86 	bl	3c8 <std::_Function_base::_Function_base()>
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	4618      	mov	r0, r3
    5ac0:	3708      	adds	r7, #8
    5ac2:	46bd      	mov	sp, r7
    5ac4:	bd80      	pop	{r7, pc}

00005ac6 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    5ac6:	b580      	push	{r7, lr}
    5ac8:	b082      	sub	sp, #8
    5aca:	af00      	add	r7, sp, #0
    5acc:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	4618      	mov	r0, r3
    5ad2:	f000 f942 	bl	5d5a <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    5ad6:	bf00      	nop
    5ad8:	6878      	ldr	r0, [r7, #4]
    5ada:	3708      	adds	r7, #8
    5adc:	46bd      	mov	sp, r7
    5ade:	bd80      	pop	{r7, pc}

00005ae0 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b082      	sub	sp, #8
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    5ae8:	6878      	ldr	r0, [r7, #4]
    5aea:	f7fe ff81 	bl	49f0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    5aee:	4603      	mov	r3, r0
		}
    5af0:	4618      	mov	r0, r3
    5af2:	3708      	adds	r7, #8
    5af4:	46bd      	mov	sp, r7
    5af6:	bd80      	pop	{r7, pc}

00005af8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      operator""ns()
    5af8:	b580      	push	{r7, lr}
    5afa:	b082      	sub	sp, #8
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	4618      	mov	r0, r3
    5b04:	f000 f940 	bl	5d88 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    5b08:	bf00      	nop
    5b0a:	6878      	ldr	r0, [r7, #4]
    5b0c:	3708      	adds	r7, #8
    5b0e:	46bd      	mov	sp, r7
    5b10:	bd80      	pop	{r7, pc}

00005b12 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    5b12:	b580      	push	{r7, lr}
    5b14:	b084      	sub	sp, #16
    5b16:	af00      	add	r7, sp, #0
    5b18:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	4618      	mov	r0, r3
    5b1e:	f7fe fef1 	bl	4904 <units::linear_scale<float>::operator()() const>
    5b22:	eef0 7a40 	vmov.f32	s15, s0
    5b26:	edc7 7a03 	vstr	s15, [r7, #12]
    5b2a:	f107 030c 	add.w	r3, r7, #12
    5b2e:	4618      	mov	r0, r3
    5b30:	f000 f942 	bl	5db8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5b34:	eef0 7a40 	vmov.f32	s15, s0
    5b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5b3c:	ee17 3a90 	vmov	r3, s15
		}
    5b40:	4618      	mov	r0, r3
    5b42:	3710      	adds	r7, #16
    5b44:	46bd      	mov	sp, r7
    5b46:	bd80      	pop	{r7, pc}

00005b48 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    5b48:	b580      	push	{r7, lr}
    5b4a:	b082      	sub	sp, #8
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
    5b50:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    5b52:	683b      	ldr	r3, [r7, #0]
    5b54:	4618      	mov	r0, r3
    5b56:	f7fe ffbf 	bl	4ad8 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5b5a:	eef0 7a40 	vmov.f32	s15, s0
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    5b64:	687b      	ldr	r3, [r7, #4]
		}
    5b66:	4618      	mov	r0, r3
    5b68:	3708      	adds	r7, #8
    5b6a:	46bd      	mov	sp, r7
    5b6c:	bd80      	pop	{r7, pc}

00005b6e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5b6e:	b580      	push	{r7, lr}
    5b70:	b084      	sub	sp, #16
    5b72:	af00      	add	r7, sp, #0
    5b74:	60f8      	str	r0, [r7, #12]
    5b76:	60b9      	str	r1, [r7, #8]
    5b78:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    5b7a:	793b      	ldrb	r3, [r7, #4]
    5b7c:	461a      	mov	r2, r3
    5b7e:	797b      	ldrb	r3, [r7, #5]
    5b80:	68b9      	ldr	r1, [r7, #8]
    5b82:	68f8      	ldr	r0, [r7, #12]
    5b84:	f000 f926 	bl	5dd4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    5b88:	4603      	mov	r3, r0
}
    5b8a:	4618      	mov	r0, r3
    5b8c:	3710      	adds	r7, #16
    5b8e:	46bd      	mov	sp, r7
    5b90:	bd80      	pop	{r7, pc}

00005b92 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    5b92:	b580      	push	{r7, lr}
    5b94:	ed2d 8b02 	vpush	{d8}
    5b98:	b084      	sub	sp, #16
    5b9a:	af00      	add	r7, sp, #0
    5b9c:	6078      	str	r0, [r7, #4]
    5b9e:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	4618      	mov	r0, r3
    5ba4:	f7fe feae 	bl	4904 <units::linear_scale<float>::operator()() const>
    5ba8:	eeb0 8a40 	vmov.f32	s16, s0
    5bac:	683b      	ldr	r3, [r7, #0]
    5bae:	4618      	mov	r0, r3
    5bb0:	f7fe fea8 	bl	4904 <units::linear_scale<float>::operator()() const>
    5bb4:	eef0 7a40 	vmov.f32	s15, s0
    5bb8:	edc7 7a03 	vstr	s15, [r7, #12]
    5bbc:	f107 030c 	add.w	r3, r7, #12
    5bc0:	4618      	mov	r0, r3
    5bc2:	f7fe fc72 	bl	44aa <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5bc6:	eeb0 7a40 	vmov.f32	s14, s0
    5bca:	eec8 7a07 	vdiv.f32	s15, s16, s14
    5bce:	f107 0308 	add.w	r3, r7, #8
    5bd2:	eeb0 0a67 	vmov.f32	s0, s15
    5bd6:	4618      	mov	r0, r3
    5bd8:	f7fe feed 	bl	49b6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5bdc:	68bb      	ldr	r3, [r7, #8]
	}
    5bde:	4618      	mov	r0, r3
    5be0:	3710      	adds	r7, #16
    5be2:	46bd      	mov	sp, r7
    5be4:	ecbd 8b02 	vpop	{d8}
    5be8:	bd80      	pop	{r7, pc}

00005bea <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    5bea:	b580      	push	{r7, lr}
    5bec:	b084      	sub	sp, #16
    5bee:	af00      	add	r7, sp, #0
    5bf0:	6078      	str	r0, [r7, #4]
    5bf2:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	4618      	mov	r0, r3
    5bf8:	f7fe fe84 	bl	4904 <units::linear_scale<float>::operator()() const>
    5bfc:	eeb0 7a40 	vmov.f32	s14, s0
    5c00:	683b      	ldr	r3, [r7, #0]
    5c02:	ee07 3a90 	vmov	s15, r3
    5c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
    5c0e:	f107 030c 	add.w	r3, r7, #12
    5c12:	eeb0 0a67 	vmov.f32	s0, s15
    5c16:	4618      	mov	r0, r3
    5c18:	f7fe fecd 	bl	49b6 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5c1c:	68fb      	ldr	r3, [r7, #12]
	}
    5c1e:	4618      	mov	r0, r3
    5c20:	3710      	adds	r7, #16
    5c22:	46bd      	mov	sp, r7
    5c24:	bd80      	pop	{r7, pc}

00005c26 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    5c26:	b480      	push	{r7}
    5c28:	b083      	sub	sp, #12
    5c2a:	af00      	add	r7, sp, #0
    5c2c:	4603      	mov	r3, r0
    5c2e:	6039      	str	r1, [r7, #0]
    5c30:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    5c32:	79fa      	ldrb	r2, [r7, #7]
    5c34:	683b      	ldr	r3, [r7, #0]
    5c36:	fa42 f303 	asr.w	r3, r2, r3
    5c3a:	f003 0301 	and.w	r3, r3, #1
    5c3e:	2b00      	cmp	r3, #0
    5c40:	bf14      	ite	ne
    5c42:	2301      	movne	r3, #1
    5c44:	2300      	moveq	r3, #0
    5c46:	b2db      	uxtb	r3, r3
}
    5c48:	4618      	mov	r0, r3
    5c4a:	370c      	adds	r7, #12
    5c4c:	46bd      	mov	sp, r7
    5c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c52:	4770      	bx	lr

00005c54 <std::array<std::function<void ()>, 59u>::array()>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
    5c54:	b5b0      	push	{r4, r5, r7, lr}
    5c56:	b082      	sub	sp, #8
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	243a      	movs	r4, #58	; 0x3a
    5c60:	461d      	mov	r5, r3
    5c62:	2c00      	cmp	r4, #0
    5c64:	db05      	blt.n	5c72 <std::array<std::function<void ()>, 59u>::array()+0x1e>
    5c66:	4628      	mov	r0, r5
    5c68:	f7fc f85f 	bl	1d2a <std::function<void ()>::function()>
    5c6c:	3510      	adds	r5, #16
    5c6e:	3c01      	subs	r4, #1
    5c70:	e7f7      	b.n	5c62 <std::array<std::function<void ()>, 59u>::array()+0xe>
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	4618      	mov	r0, r3
    5c76:	3708      	adds	r7, #8
    5c78:	46bd      	mov	sp, r7
    5c7a:	bdb0      	pop	{r4, r5, r7, pc}

00005c7c <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    5c7c:	b580      	push	{r7, lr}
    5c7e:	b086      	sub	sp, #24
    5c80:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    5c82:	4b11      	ldr	r3, [pc, #68]	; (5cc8 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    5c84:	681b      	ldr	r3, [r3, #0]
    5c86:	685b      	ldr	r3, [r3, #4]
    5c88:	b2db      	uxtb	r3, r3
    5c8a:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    5c8c:	6978      	ldr	r0, [r7, #20]
    5c8e:	f000 f8cd 	bl	5e2c <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    5c92:	4603      	mov	r3, r0
    5c94:	4a0d      	ldr	r2, [pc, #52]	; (5ccc <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    5c96:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    5c98:	697b      	ldr	r3, [r7, #20]
    5c9a:	4619      	mov	r1, r3
    5c9c:	480c      	ldr	r0, [pc, #48]	; (5cd0 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    5c9e:	f000 f8d1 	bl	5e44 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    5ca2:	4602      	mov	r2, r0
    5ca4:	1d3b      	adds	r3, r7, #4
    5ca6:	4611      	mov	r1, r2
    5ca8:	4618      	mov	r0, r3
    5caa:	f7fc fadc 	bl	2266 <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    5cae:	1d3b      	adds	r3, r7, #4
    5cb0:	4618      	mov	r0, r3
    5cb2:	f7fc f847 	bl	1d44 <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    5cb6:	1d3b      	adds	r3, r7, #4
    5cb8:	4618      	mov	r0, r3
    5cba:	f7fb f906 	bl	eca <std::function<void ()>::~function()>
  }
    5cbe:	bf00      	nop
    5cc0:	3718      	adds	r7, #24
    5cc2:	46bd      	mov	sp, r7
    5cc4:	bd80      	pop	{r7, pc}
    5cc6:	bf00      	nop
    5cc8:	10000080 	.word	0x10000080
    5ccc:	10000088 	.word	0x10000088
    5cd0:	1000080c 	.word	0x1000080c

00005cd4 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b082      	sub	sp, #8
    5cd8:	af00      	add	r7, sp, #0
    5cda:	6078      	str	r0, [r7, #4]
    5cdc:	6039      	str	r1, [r7, #0]
    : _Function_base()
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	4618      	mov	r0, r3
    5ce2:	f7fa fb71 	bl	3c8 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    5ce6:	6838      	ldr	r0, [r7, #0]
    5ce8:	f000 f8bb 	bl	5e62 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    5cec:	4603      	mov	r3, r0
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d00d      	beq.n	5d0e <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    5cf2:	683b      	ldr	r3, [r7, #0]
    5cf4:	689b      	ldr	r3, [r3, #8]
    5cf6:	6878      	ldr	r0, [r7, #4]
    5cf8:	6839      	ldr	r1, [r7, #0]
    5cfa:	2202      	movs	r2, #2
    5cfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    5cfe:	683b      	ldr	r3, [r7, #0]
    5d00:	68da      	ldr	r2, [r3, #12]
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    5d06:	683b      	ldr	r3, [r7, #0]
    5d08:	689a      	ldr	r2, [r3, #8]
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	609a      	str	r2, [r3, #8]
    }
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	4618      	mov	r0, r3
    5d12:	3708      	adds	r7, #8
    5d14:	46bd      	mov	sp, r7
    5d16:	bd80      	pop	{r7, pc}

00005d18 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    5d18:	b580      	push	{r7, lr}
    5d1a:	b082      	sub	sp, #8
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
    5d20:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	683a      	ldr	r2, [r7, #0]
    5d26:	4611      	mov	r1, r2
    5d28:	4618      	mov	r0, r3
    5d2a:	f7fc fbc1 	bl	24b0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	f103 0208 	add.w	r2, r3, #8
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	3308      	adds	r3, #8
    5d38:	4619      	mov	r1, r3
    5d3a:	4610      	mov	r0, r2
    5d3c:	f7fc fbea 	bl	2514 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	f103 020c 	add.w	r2, r3, #12
    5d46:	683b      	ldr	r3, [r7, #0]
    5d48:	330c      	adds	r3, #12
    5d4a:	4619      	mov	r1, r3
    5d4c:	4610      	mov	r0, r2
    5d4e:	f000 f8a3 	bl	5e98 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    5d52:	bf00      	nop
    5d54:	3708      	adds	r7, #8
    5d56:	46bd      	mov	sp, r7
    5d58:	bd80      	pop	{r7, pc}

00005d5a <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    5d5a:	b580      	push	{r7, lr}
    5d5c:	b084      	sub	sp, #16
    5d5e:	af00      	add	r7, sp, #0
    5d60:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5d62:	f04f 0201 	mov.w	r2, #1
    5d66:	f04f 0300 	mov.w	r3, #0
    5d6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5d6e:	f107 0308 	add.w	r3, r7, #8
    5d72:	4619      	mov	r1, r3
    5d74:	6878      	ldr	r0, [r7, #4]
    5d76:	f7fa fce5 	bl	744 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    5d7a:	6878      	ldr	r0, [r7, #4]
    5d7c:	3710      	adds	r7, #16
    5d7e:	46bd      	mov	sp, r7
    5d80:	bd80      	pop	{r7, pc}
    5d82:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    5d86:	Address 0x0000000000005d86 is out of bounds.


00005d88 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    5d88:	b580      	push	{r7, lr}
    5d8a:	b084      	sub	sp, #16
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5d90:	a307      	add	r3, pc, #28	; (adr r3, 5db0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    5d92:	e9d3 2300 	ldrd	r2, r3, [r3]
    5d96:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5d9a:	f107 0308 	add.w	r3, r7, #8
    5d9e:	4619      	mov	r1, r3
    5da0:	6878      	ldr	r0, [r7, #4]
    5da2:	f7fa fcbd 	bl	720 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    5da6:	6878      	ldr	r0, [r7, #4]
    5da8:	3710      	adds	r7, #16
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	bf00      	nop
    5db0:	3b9aca00 	.word	0x3b9aca00
    5db4:	00000000 	.word	0x00000000

00005db8 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5db8:	b580      	push	{r7, lr}
    5dba:	b086      	sub	sp, #24
    5dbc:	af00      	add	r7, sp, #0
    5dbe:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5dc0:	6878      	ldr	r0, [r7, #4]
    5dc2:	f000 f888 	bl	5ed6 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5dc6:	eef0 7a40 	vmov.f32	s15, s0
	}
    5dca:	eeb0 0a67 	vmov.f32	s0, s15
    5dce:	3718      	adds	r7, #24
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}

00005dd4 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    5dd4:	b480      	push	{r7}
    5dd6:	b089      	sub	sp, #36	; 0x24
    5dd8:	af00      	add	r7, sp, #0
    5dda:	60f8      	str	r0, [r7, #12]
    5ddc:	60b9      	str	r1, [r7, #8]
    5dde:	607a      	str	r2, [r7, #4]
    5de0:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    5de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5de6:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    5de8:	2320      	movs	r3, #32
    5dea:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    5dec:	683b      	ldr	r3, [r7, #0]
    5dee:	f1c3 0320 	rsb	r3, r3, #32
    5df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5df6:	fa22 f303 	lsr.w	r3, r2, r3
    5dfa:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    5dfc:	697a      	ldr	r2, [r7, #20]
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	fa02 f303 	lsl.w	r3, r2, r3
    5e04:	43db      	mvns	r3, r3
    5e06:	68fa      	ldr	r2, [r7, #12]
    5e08:	4013      	ands	r3, r2
    5e0a:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    5e0c:	68ba      	ldr	r2, [r7, #8]
    5e0e:	697b      	ldr	r3, [r7, #20]
    5e10:	401a      	ands	r2, r3
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	fa02 f303 	lsl.w	r3, r2, r3
    5e18:	68fa      	ldr	r2, [r7, #12]
    5e1a:	4313      	orrs	r3, r2
    5e1c:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    5e1e:	68fb      	ldr	r3, [r7, #12]
}
    5e20:	4618      	mov	r0, r3
    5e22:	3724      	adds	r7, #36	; 0x24
    5e24:	46bd      	mov	sp, r7
    5e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e2a:	4770      	bx	lr

00005e2c <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    5e2c:	b480      	push	{r7}
    5e2e:	b083      	sub	sp, #12
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	3b10      	subs	r3, #16
  }
    5e38:	4618      	mov	r0, r3
    5e3a:	370c      	adds	r7, #12
    5e3c:	46bd      	mov	sp, r7
    5e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e42:	4770      	bx	lr

00005e44 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
    5e44:	b580      	push	{r7, lr}
    5e46:	b082      	sub	sp, #8
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    5e4e:	687b      	ldr	r3, [r7, #4]
    5e50:	6839      	ldr	r1, [r7, #0]
    5e52:	4618      	mov	r0, r3
    5e54:	f000 f851 	bl	5efa <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    5e58:	4603      	mov	r3, r0
    5e5a:	4618      	mov	r0, r3
    5e5c:	3708      	adds	r7, #8
    5e5e:	46bd      	mov	sp, r7
    5e60:	bd80      	pop	{r7, pc}

00005e62 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    5e62:	b580      	push	{r7, lr}
    5e64:	b082      	sub	sp, #8
    5e66:	af00      	add	r7, sp, #0
    5e68:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	4618      	mov	r0, r3
    5e6e:	f7fa facc 	bl	40a <std::_Function_base::_M_empty() const>
    5e72:	4603      	mov	r3, r0
    5e74:	f083 0301 	eor.w	r3, r3, #1
    5e78:	b2db      	uxtb	r3, r3
    5e7a:	4618      	mov	r0, r3
    5e7c:	3708      	adds	r7, #8
    5e7e:	46bd      	mov	sp, r7
    5e80:	bd80      	pop	{r7, pc}

00005e82 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    5e82:	b480      	push	{r7}
    5e84:	b083      	sub	sp, #12
    5e86:	af00      	add	r7, sp, #0
    5e88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    5e8a:	687b      	ldr	r3, [r7, #4]
    5e8c:	4618      	mov	r0, r3
    5e8e:	370c      	adds	r7, #12
    5e90:	46bd      	mov	sp, r7
    5e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e96:	4770      	bx	lr

00005e98 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    5e98:	b580      	push	{r7, lr}
    5e9a:	b084      	sub	sp, #16
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
    5ea0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    5ea2:	6878      	ldr	r0, [r7, #4]
    5ea4:	f7ff ffed 	bl	5e82 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5ea8:	4603      	mov	r3, r0
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    5eae:	6838      	ldr	r0, [r7, #0]
    5eb0:	f7ff ffe7 	bl	5e82 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5eb4:	4603      	mov	r3, r0
    5eb6:	681a      	ldr	r2, [r3, #0]
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    5ebc:	f107 030c 	add.w	r3, r7, #12
    5ec0:	4618      	mov	r0, r3
    5ec2:	f7ff ffde 	bl	5e82 <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    5ec6:	4603      	mov	r3, r0
    5ec8:	681a      	ldr	r2, [r3, #0]
    5eca:	683b      	ldr	r3, [r7, #0]
    5ecc:	601a      	str	r2, [r3, #0]
    }
    5ece:	bf00      	nop
    5ed0:	3710      	adds	r7, #16
    5ed2:	46bd      	mov	sp, r7
    5ed4:	bd80      	pop	{r7, pc}

00005ed6 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    5ed6:	b480      	push	{r7}
    5ed8:	b085      	sub	sp, #20
    5eda:	af00      	add	r7, sp, #0
    5edc:	60f8      	str	r0, [r7, #12]
    5ede:	7239      	strb	r1, [r7, #8]
    5ee0:	713a      	strb	r2, [r7, #4]
    5ee2:	703b      	strb	r3, [r7, #0]
			return value;
    5ee4:	68fb      	ldr	r3, [r7, #12]
    5ee6:	681b      	ldr	r3, [r3, #0]
    5ee8:	ee07 3a90 	vmov	s15, r3
		}
    5eec:	eeb0 0a67 	vmov.f32	s0, s15
    5ef0:	3714      	adds	r7, #20
    5ef2:	46bd      	mov	sp, r7
    5ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef8:	4770      	bx	lr

00005efa <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    5efa:	b480      	push	{r7}
    5efc:	b083      	sub	sp, #12
    5efe:	af00      	add	r7, sp, #0
    5f00:	6078      	str	r0, [r7, #4]
    5f02:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    5f04:	683b      	ldr	r3, [r7, #0]
    5f06:	011b      	lsls	r3, r3, #4
    5f08:	687a      	ldr	r2, [r7, #4]
    5f0a:	4413      	add	r3, r2
    5f0c:	4618      	mov	r0, r3
    5f0e:	370c      	adds	r7, #12
    5f10:	46bd      	mov	sp, r7
    5f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f16:	4770      	bx	lr

00005f18 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    5f18:	b590      	push	{r4, r7, lr}
    5f1a:	b083      	sub	sp, #12
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	6078      	str	r0, [r7, #4]
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d00a      	beq.n	5f3c <std::array<std::function<void ()>, 59u>::~array()+0x24>
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	429c      	cmp	r4, r3
    5f30:	d004      	beq.n	5f3c <std::array<std::function<void ()>, 59u>::~array()+0x24>
    5f32:	3c10      	subs	r4, #16
    5f34:	4620      	mov	r0, r4
    5f36:	f7fa ffc8 	bl	eca <std::function<void ()>::~function()>
    5f3a:	e7f7      	b.n	5f2c <std::array<std::function<void ()>, 59u>::~array()+0x14>
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	4618      	mov	r0, r3
    5f40:	370c      	adds	r7, #12
    5f42:	46bd      	mov	sp, r7
    5f44:	bd90      	pop	{r4, r7, pc}
    5f46:	Address 0x0000000000005f46 is out of bounds.


00005f48 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
    5f50:	6039      	str	r1, [r7, #0]
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	2b01      	cmp	r3, #1
    5f56:	d175      	bne.n	6044 <__static_initialization_and_destruction_0(int, int)+0xfc>
    5f58:	683b      	ldr	r3, [r7, #0]
    5f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5f5e:	4293      	cmp	r3, r2
    5f60:	d170      	bne.n	6044 <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    5f62:	4b3a      	ldr	r3, [pc, #232]	; (604c <__static_initialization_and_destruction_0(int, int)+0x104>)
    5f64:	681b      	ldr	r3, [r3, #0]
    5f66:	f003 0301 	and.w	r3, r3, #1
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d10b      	bne.n	5f86 <__static_initialization_and_destruction_0(int, int)+0x3e>
    5f6e:	4b37      	ldr	r3, [pc, #220]	; (604c <__static_initialization_and_destruction_0(int, int)+0x104>)
    5f70:	2201      	movs	r2, #1
    5f72:	601a      	str	r2, [r3, #0]
    5f74:	4936      	ldr	r1, [pc, #216]	; (6050 <__static_initialization_and_destruction_0(int, int)+0x108>)
    5f76:	4837      	ldr	r0, [pc, #220]	; (6054 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5f78:	f7fb fdc4 	bl	1b04 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    5f7c:	4a36      	ldr	r2, [pc, #216]	; (6058 <__static_initialization_and_destruction_0(int, int)+0x110>)
    5f7e:	4937      	ldr	r1, [pc, #220]	; (605c <__static_initialization_and_destruction_0(int, int)+0x114>)
    5f80:	4834      	ldr	r0, [pc, #208]	; (6054 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    5f82:	f000 faa9 	bl	64d8 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    5f86:	4b36      	ldr	r3, [pc, #216]	; (6060 <__static_initialization_and_destruction_0(int, int)+0x118>)
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	f003 0301 	and.w	r3, r3, #1
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d10b      	bne.n	5faa <__static_initialization_and_destruction_0(int, int)+0x62>
    5f92:	4b33      	ldr	r3, [pc, #204]	; (6060 <__static_initialization_and_destruction_0(int, int)+0x118>)
    5f94:	2201      	movs	r2, #1
    5f96:	601a      	str	r2, [r3, #0]
    5f98:	2100      	movs	r1, #0
    5f9a:	4832      	ldr	r0, [pc, #200]	; (6064 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    5f9c:	f7ff fd85 	bl	5aaa <std::function<void ()>::function(decltype(nullptr))>
    5fa0:	4a2d      	ldr	r2, [pc, #180]	; (6058 <__static_initialization_and_destruction_0(int, int)+0x110>)
    5fa2:	4931      	ldr	r1, [pc, #196]	; (6068 <__static_initialization_and_destruction_0(int, int)+0x120>)
    5fa4:	482f      	ldr	r0, [pc, #188]	; (6064 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    5fa6:	f000 fa97 	bl	64d8 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    5faa:	4b30      	ldr	r3, [pc, #192]	; (606c <__static_initialization_and_destruction_0(int, int)+0x124>)
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	f003 0301 	and.w	r3, r3, #1
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	d105      	bne.n	5fc2 <__static_initialization_and_destruction_0(int, int)+0x7a>
    5fb6:	4b2d      	ldr	r3, [pc, #180]	; (606c <__static_initialization_and_destruction_0(int, int)+0x124>)
    5fb8:	2201      	movs	r2, #1
    5fba:	601a      	str	r2, [r3, #0]
    5fbc:	4a2c      	ldr	r2, [pc, #176]	; (6070 <__static_initialization_and_destruction_0(int, int)+0x128>)
    5fbe:	4b2d      	ldr	r3, [pc, #180]	; (6074 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    5fc0:	601a      	str	r2, [r3, #0]
    5fc2:	4b2d      	ldr	r3, [pc, #180]	; (6078 <__static_initialization_and_destruction_0(int, int)+0x130>)
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	f003 0301 	and.w	r3, r3, #1
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d105      	bne.n	5fda <__static_initialization_and_destruction_0(int, int)+0x92>
    5fce:	4b2a      	ldr	r3, [pc, #168]	; (6078 <__static_initialization_and_destruction_0(int, int)+0x130>)
    5fd0:	2201      	movs	r2, #1
    5fd2:	601a      	str	r2, [r3, #0]
    5fd4:	4a29      	ldr	r2, [pc, #164]	; (607c <__static_initialization_and_destruction_0(int, int)+0x134>)
    5fd6:	4b2a      	ldr	r3, [pc, #168]	; (6080 <__static_initialization_and_destruction_0(int, int)+0x138>)
    5fd8:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    5fda:	4b2a      	ldr	r3, [pc, #168]	; (6084 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    5fdc:	681b      	ldr	r3, [r3, #0]
    5fde:	f003 0301 	and.w	r3, r3, #1
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d105      	bne.n	5ff2 <__static_initialization_and_destruction_0(int, int)+0xaa>
    5fe6:	4b27      	ldr	r3, [pc, #156]	; (6084 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    5fe8:	2201      	movs	r2, #1
    5fea:	601a      	str	r2, [r3, #0]
    };
    5fec:	4a26      	ldr	r2, [pc, #152]	; (6088 <__static_initialization_and_destruction_0(int, int)+0x140>)
    5fee:	4b27      	ldr	r3, [pc, #156]	; (608c <__static_initialization_and_destruction_0(int, int)+0x144>)
    5ff0:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    5ff2:	4b27      	ldr	r3, [pc, #156]	; (6090 <__static_initialization_and_destruction_0(int, int)+0x148>)
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	f003 0301 	and.w	r3, r3, #1
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d105      	bne.n	600a <__static_initialization_and_destruction_0(int, int)+0xc2>
    5ffe:	4b24      	ldr	r3, [pc, #144]	; (6090 <__static_initialization_and_destruction_0(int, int)+0x148>)
    6000:	2201      	movs	r2, #1
    6002:	601a      	str	r2, [r3, #0]
    };
    6004:	4a23      	ldr	r2, [pc, #140]	; (6094 <__static_initialization_and_destruction_0(int, int)+0x14c>)
    6006:	4b24      	ldr	r3, [pc, #144]	; (6098 <__static_initialization_and_destruction_0(int, int)+0x150>)
    6008:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    600a:	4b24      	ldr	r3, [pc, #144]	; (609c <__static_initialization_and_destruction_0(int, int)+0x154>)
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	f003 0301 	and.w	r3, r3, #1
    6012:	2b00      	cmp	r3, #0
    6014:	d105      	bne.n	6022 <__static_initialization_and_destruction_0(int, int)+0xda>
    6016:	4b21      	ldr	r3, [pc, #132]	; (609c <__static_initialization_and_destruction_0(int, int)+0x154>)
    6018:	2201      	movs	r2, #1
    601a:	601a      	str	r2, [r3, #0]
    };
    601c:	4a20      	ldr	r2, [pc, #128]	; (60a0 <__static_initialization_and_destruction_0(int, int)+0x158>)
    601e:	4b21      	ldr	r3, [pc, #132]	; (60a4 <__static_initialization_and_destruction_0(int, int)+0x15c>)
    6020:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    6022:	4b21      	ldr	r3, [pc, #132]	; (60a8 <__static_initialization_and_destruction_0(int, int)+0x160>)
    6024:	681b      	ldr	r3, [r3, #0]
    6026:	f003 0301 	and.w	r3, r3, #1
    602a:	2b00      	cmp	r3, #0
    602c:	d10a      	bne.n	6044 <__static_initialization_and_destruction_0(int, int)+0xfc>
    602e:	4b1e      	ldr	r3, [pc, #120]	; (60a8 <__static_initialization_and_destruction_0(int, int)+0x160>)
    6030:	2201      	movs	r2, #1
    6032:	601a      	str	r2, [r3, #0]
    6034:	481d      	ldr	r0, [pc, #116]	; (60ac <__static_initialization_and_destruction_0(int, int)+0x164>)
    6036:	f7ff fe0d 	bl	5c54 <std::array<std::function<void ()>, 59u>::array()>
    603a:	4a07      	ldr	r2, [pc, #28]	; (6058 <__static_initialization_and_destruction_0(int, int)+0x110>)
    603c:	491c      	ldr	r1, [pc, #112]	; (60b0 <__static_initialization_and_destruction_0(int, int)+0x168>)
    603e:	481b      	ldr	r0, [pc, #108]	; (60ac <__static_initialization_and_destruction_0(int, int)+0x164>)
    6040:	f000 fa4a 	bl	64d8 <__aeabi_atexit>
    6044:	bf00      	nop
    6046:	3708      	adds	r7, #8
    6048:	46bd      	mov	sp, r7
    604a:	bd80      	pop	{r7, pc}
    604c:	10000750 	.word	0x10000750
    6050:	000007d9 	.word	0x000007d9
    6054:	10000128 	.word	0x10000128
    6058:	10000000 	.word	0x10000000
    605c:	00000821 	.word	0x00000821
    6060:	10000bbc 	.word	0x10000bbc
    6064:	100007e8 	.word	0x100007e8
    6068:	00000ecb 	.word	0x00000ecb
    606c:	10000bc0 	.word	0x10000bc0
    6070:	400fc000 	.word	0x400fc000
    6074:	10000804 	.word	0x10000804
    6078:	1000074c 	.word	0x1000074c
    607c:	4002c000 	.word	0x4002c000
    6080:	10000118 	.word	0x10000118
    6084:	10000bc4 	.word	0x10000bc4
    6088:	40098000 	.word	0x40098000
    608c:	10000030 	.word	0x10000030
    6090:	10000bc8 	.word	0x10000bc8
    6094:	4009c000 	.word	0x4009c000
    6098:	10000044 	.word	0x10000044
    609c:	10000bcc 	.word	0x10000bcc
    60a0:	400a4000 	.word	0x400a4000
    60a4:	10000058 	.word	0x10000058
    60a8:	10000bd0 	.word	0x10000bd0
    60ac:	1000080c 	.word	0x1000080c
    60b0:	00005f19 	.word	0x00005f19

000060b4 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    60b4:	b590      	push	{r4, r7, lr}
    60b6:	b083      	sub	sp, #12
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
    60bc:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    60be:	4808      	ldr	r0, [pc, #32]	; (60e0 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    60c0:	f000 f85e 	bl	6180 <std::array<std::function<void ()>, 59u>::begin()>
    60c4:	4604      	mov	r4, r0
    60c6:	4806      	ldr	r0, [pc, #24]	; (60e0 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    60c8:	f000 f866 	bl	6198 <std::array<std::function<void ()>, 59u>::end()>
    60cc:	4603      	mov	r3, r0
    60ce:	683a      	ldr	r2, [r7, #0]
    60d0:	4619      	mov	r1, r3
    60d2:	4620      	mov	r0, r4
    60d4:	f000 f86e 	bl	61b4 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    60d8:	bf00      	nop
    60da:	370c      	adds	r7, #12
    60dc:	46bd      	mov	sp, r7
    60de:	bd90      	pop	{r4, r7, pc}
    60e0:	1000080c 	.word	0x1000080c

000060e4 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b085      	sub	sp, #20
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
    60ec:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    60ee:	683b      	ldr	r3, [r7, #0]
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    60f4:	683b      	ldr	r3, [r7, #0]
    60f6:	1d1c      	adds	r4, r3, #4
    60f8:	68f8      	ldr	r0, [r7, #12]
    60fa:	f000 f872 	bl	61e2 <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    60fe:	4603      	mov	r3, r0
    6100:	4619      	mov	r1, r3
    6102:	480e      	ldr	r0, [pc, #56]	; (613c <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    6104:	f7ff fe9e 	bl	5e44 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6108:	4603      	mov	r3, r0
    610a:	4621      	mov	r1, r4
    610c:	4618      	mov	r0, r3
    610e:	f7fb fe95 	bl	1e3c <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    6112:	68fb      	ldr	r3, [r7, #12]
    6114:	2b00      	cmp	r3, #0
    6116:	db02      	blt.n	611e <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    6118:	68f8      	ldr	r0, [r7, #12]
    611a:	f000 f86f 	bl	61fc <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    611e:	683b      	ldr	r3, [r7, #0]
    6120:	695b      	ldr	r3, [r3, #20]
    6122:	2b00      	cmp	r3, #0
    6124:	db05      	blt.n	6132 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    6126:	683b      	ldr	r3, [r7, #0]
    6128:	695b      	ldr	r3, [r3, #20]
    612a:	4619      	mov	r1, r3
    612c:	68f8      	ldr	r0, [r7, #12]
    612e:	f000 f87d 	bl	622c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    6132:	bf00      	nop
    6134:	3714      	adds	r7, #20
    6136:	46bd      	mov	sp, r7
    6138:	bd90      	pop	{r4, r7, pc}
    613a:	bf00      	nop
    613c:	1000080c 	.word	0x1000080c

00006140 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    6140:	b580      	push	{r7, lr}
    6142:	b082      	sub	sp, #8
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
    6148:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    614a:	683b      	ldr	r3, [r7, #0]
    614c:	2b00      	cmp	r3, #0
    614e:	db02      	blt.n	6156 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    6150:	6838      	ldr	r0, [r7, #0]
    6152:	f000 f897 	bl	6284 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    6156:	6838      	ldr	r0, [r7, #0]
    6158:	f000 f843 	bl	61e2 <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    615c:	4603      	mov	r3, r0
    615e:	4619      	mov	r1, r3
    6160:	4805      	ldr	r0, [pc, #20]	; (6178 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    6162:	f7ff fe6f 	bl	5e44 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    6166:	4603      	mov	r3, r0
    6168:	4904      	ldr	r1, [pc, #16]	; (617c <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    616a:	4618      	mov	r0, r3
    616c:	f000 f8c4 	bl	62f8 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    6170:	bf00      	nop
    6172:	3708      	adds	r7, #8
    6174:	46bd      	mov	sp, r7
    6176:	bd80      	pop	{r7, pc}
    6178:	1000080c 	.word	0x1000080c
    617c:	000062b9 	.word	0x000062b9

00006180 <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    6180:	b580      	push	{r7, lr}
    6182:	b082      	sub	sp, #8
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6188:	6878      	ldr	r0, [r7, #4]
    618a:	f000 f8d4 	bl	6336 <std::array<std::function<void ()>, 59u>::data()>
    618e:	4603      	mov	r3, r0
    6190:	4618      	mov	r0, r3
    6192:	3708      	adds	r7, #8
    6194:	46bd      	mov	sp, r7
    6196:	bd80      	pop	{r7, pc}

00006198 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    6198:	b580      	push	{r7, lr}
    619a:	b082      	sub	sp, #8
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    61a0:	6878      	ldr	r0, [r7, #4]
    61a2:	f000 f8c8 	bl	6336 <std::array<std::function<void ()>, 59u>::data()>
    61a6:	4603      	mov	r3, r0
    61a8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    61ac:	4618      	mov	r0, r3
    61ae:	3708      	adds	r7, #8
    61b0:	46bd      	mov	sp, r7
    61b2:	bd80      	pop	{r7, pc}

000061b4 <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    61b4:	b590      	push	{r4, r7, lr}
    61b6:	b085      	sub	sp, #20
    61b8:	af00      	add	r7, sp, #0
    61ba:	60f8      	str	r0, [r7, #12]
    61bc:	60b9      	str	r1, [r7, #8]
    61be:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    61c0:	68f8      	ldr	r0, [r7, #12]
    61c2:	f000 f8c5 	bl	6350 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    61c6:	4604      	mov	r4, r0
    61c8:	68b8      	ldr	r0, [r7, #8]
    61ca:	f000 f8c1 	bl	6350 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    61ce:	4603      	mov	r3, r0
    61d0:	687a      	ldr	r2, [r7, #4]
    61d2:	4619      	mov	r1, r3
    61d4:	4620      	mov	r0, r4
    61d6:	f000 f8c6 	bl	6366 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    61da:	bf00      	nop
    61dc:	3714      	adds	r7, #20
    61de:	46bd      	mov	sp, r7
    61e0:	bd90      	pop	{r4, r7, pc}

000061e2 <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    61e2:	b480      	push	{r7}
    61e4:	b083      	sub	sp, #12
    61e6:	af00      	add	r7, sp, #0
    61e8:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	3310      	adds	r3, #16
  }
    61ee:	4618      	mov	r0, r3
    61f0:	370c      	adds	r7, #12
    61f2:	46bd      	mov	sp, r7
    61f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f8:	4770      	bx	lr
    61fa:	Address 0x00000000000061fa is out of bounds.


000061fc <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    61fc:	b480      	push	{r7}
    61fe:	b083      	sub	sp, #12
    6200:	af00      	add	r7, sp, #0
    6202:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	f003 031f 	and.w	r3, r3, #31
    620a:	2201      	movs	r2, #1
    620c:	fa02 f103 	lsl.w	r1, r2, r3
    6210:	4b05      	ldr	r3, [pc, #20]	; (6228 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    6212:	681b      	ldr	r3, [r3, #0]
    6214:	687a      	ldr	r2, [r7, #4]
    6216:	1152      	asrs	r2, r2, #5
    6218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    621c:	bf00      	nop
    621e:	370c      	adds	r7, #12
    6220:	46bd      	mov	sp, r7
    6222:	f85d 7b04 	ldr.w	r7, [sp], #4
    6226:	4770      	bx	lr
    6228:	10000084 	.word	0x10000084

0000622c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    622c:	b480      	push	{r7}
    622e:	b085      	sub	sp, #20
    6230:	af00      	add	r7, sp, #0
    6232:	6078      	str	r0, [r7, #4]
    6234:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    6236:	683b      	ldr	r3, [r7, #0]
    6238:	00db      	lsls	r3, r3, #3
    623a:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	2b00      	cmp	r3, #0
    6240:	da0b      	bge.n	625a <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    6242:	4b0e      	ldr	r3, [pc, #56]	; (627c <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    6244:	681a      	ldr	r2, [r3, #0]
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	f003 030f 	and.w	r3, r3, #15
    624c:	3b04      	subs	r3, #4
    624e:	68f9      	ldr	r1, [r7, #12]
    6250:	b2c9      	uxtb	r1, r1
    6252:	4413      	add	r3, r2
    6254:	460a      	mov	r2, r1
    6256:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    6258:	e009      	b.n	626e <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    625a:	4b09      	ldr	r3, [pc, #36]	; (6280 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    625c:	681a      	ldr	r2, [r3, #0]
    625e:	68fb      	ldr	r3, [r7, #12]
    6260:	b2d9      	uxtb	r1, r3
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	4413      	add	r3, r2
    6266:	f503 7340 	add.w	r3, r3, #768	; 0x300
    626a:	460a      	mov	r2, r1
    626c:	701a      	strb	r2, [r3, #0]
  }
    626e:	bf00      	nop
    6270:	3714      	adds	r7, #20
    6272:	46bd      	mov	sp, r7
    6274:	f85d 7b04 	ldr.w	r7, [sp], #4
    6278:	4770      	bx	lr
    627a:	bf00      	nop
    627c:	10000080 	.word	0x10000080
    6280:	10000084 	.word	0x10000084

00006284 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    6284:	b480      	push	{r7}
    6286:	b083      	sub	sp, #12
    6288:	af00      	add	r7, sp, #0
    628a:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	f003 031f 	and.w	r3, r3, #31
    6292:	2201      	movs	r2, #1
    6294:	fa02 f103 	lsl.w	r1, r2, r3
    6298:	4b06      	ldr	r3, [pc, #24]	; (62b4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    629a:	681b      	ldr	r3, [r3, #0]
    629c:	687a      	ldr	r2, [r7, #4]
    629e:	1152      	asrs	r2, r2, #5
    62a0:	3220      	adds	r2, #32
    62a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    62a6:	bf00      	nop
    62a8:	370c      	adds	r7, #12
    62aa:	46bd      	mov	sp, r7
    62ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b0:	4770      	bx	lr
    62b2:	bf00      	nop
    62b4:	10000084 	.word	0x10000084

000062b8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    62b8:	b580      	push	{r7, lr}
    62ba:	b082      	sub	sp, #8
    62bc:	af02      	add	r7, sp, #8
  {
    LOG_DEBUG("No interrupt handler found. Disabling interrupt request %d!",
    62be:	4b0a      	ldr	r3, [pc, #40]	; (62e8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	9300      	str	r3, [sp, #0]
    62c4:	2385      	movs	r3, #133	; 0x85
    62c6:	4a09      	ldr	r2, [pc, #36]	; (62ec <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x34>)
    62c8:	4909      	ldr	r1, [pc, #36]	; (62f0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x38>)
    62ca:	480a      	ldr	r0, [pc, #40]	; (62f4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>)
    62cc:	f7fd ffae 	bl	422c <printf>
              current_vector);
    if (current_vector >= 0)
    62d0:	4b05      	ldr	r3, [pc, #20]	; (62e8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	2b00      	cmp	r3, #0
    62d6:	db04      	blt.n	62e2 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x2a>
    {
      NvicDisableIRQ(current_vector);
    62d8:	4b03      	ldr	r3, [pc, #12]	; (62e8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x30>)
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	4618      	mov	r0, r3
    62de:	f7ff ffd1 	bl	6284 <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    62e2:	bf00      	nop
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	10000088 	.word	0x10000088
    62ec:	00009294 	.word	0x00009294
    62f0:	0000951c 	.word	0x0000951c
    62f4:	00009358 	.word	0x00009358

000062f8 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    62f8:	b580      	push	{r7, lr}
    62fa:	b086      	sub	sp, #24
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
    6300:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    6302:	6838      	ldr	r0, [r7, #0]
    6304:	f000 f845 	bl	6392 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    6308:	4602      	mov	r2, r0
    630a:	f107 0308 	add.w	r3, r7, #8
    630e:	4611      	mov	r1, r2
    6310:	4618      	mov	r0, r3
    6312:	f7fb fd69 	bl	1de8 <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    6316:	f107 0308 	add.w	r3, r7, #8
    631a:	6879      	ldr	r1, [r7, #4]
    631c:	4618      	mov	r0, r3
    631e:	f7fb ffc4 	bl	22aa <std::function<void ()>::swap(std::function<void ()>&)>
    6322:	f107 0308 	add.w	r3, r7, #8
    6326:	4618      	mov	r0, r3
    6328:	f7fa fdcf 	bl	eca <std::function<void ()>::~function()>
	  return *this;
    632c:	687b      	ldr	r3, [r7, #4]
	}
    632e:	4618      	mov	r0, r3
    6330:	3718      	adds	r7, #24
    6332:	46bd      	mov	sp, r7
    6334:	bd80      	pop	{r7, pc}

00006336 <std::array<std::function<void ()>, 59u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
    6336:	b580      	push	{r7, lr}
    6338:	b082      	sub	sp, #8
    633a:	af00      	add	r7, sp, #0
    633c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	4618      	mov	r0, r3
    6342:	f000 f831 	bl	63a8 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    6346:	4603      	mov	r3, r0
    6348:	4618      	mov	r0, r3
    634a:	3708      	adds	r7, #8
    634c:	46bd      	mov	sp, r7
    634e:	bd80      	pop	{r7, pc}

00006350 <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    6350:	b480      	push	{r7}
    6352:	b083      	sub	sp, #12
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
    { return __it; }
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	4618      	mov	r0, r3
    635c:	370c      	adds	r7, #12
    635e:	46bd      	mov	sp, r7
    6360:	f85d 7b04 	ldr.w	r7, [sp], #4
    6364:	4770      	bx	lr

00006366 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6366:	b580      	push	{r7, lr}
    6368:	b084      	sub	sp, #16
    636a:	af00      	add	r7, sp, #0
    636c:	60f8      	str	r0, [r7, #12]
    636e:	60b9      	str	r1, [r7, #8]
    6370:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    6372:	68fa      	ldr	r2, [r7, #12]
    6374:	68bb      	ldr	r3, [r7, #8]
    6376:	429a      	cmp	r2, r3
    6378:	d007      	beq.n	638a <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    637a:	6879      	ldr	r1, [r7, #4]
    637c:	68f8      	ldr	r0, [r7, #12]
    637e:	f7fb fd5d 	bl	1e3c <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	3310      	adds	r3, #16
    6386:	60fb      	str	r3, [r7, #12]
    6388:	e7f3      	b.n	6372 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    638a:	bf00      	nop
    638c:	3710      	adds	r7, #16
    638e:	46bd      	mov	sp, r7
    6390:	bd80      	pop	{r7, pc}

00006392 <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    6392:	b480      	push	{r7}
    6394:	b083      	sub	sp, #12
    6396:	af00      	add	r7, sp, #0
    6398:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	4618      	mov	r0, r3
    639e:	370c      	adds	r7, #12
    63a0:	46bd      	mov	sp, r7
    63a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a6:	4770      	bx	lr

000063a8 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    63a8:	b480      	push	{r7}
    63aa:	b083      	sub	sp, #12
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	4618      	mov	r0, r3
    63b4:	370c      	adds	r7, #12
    63b6:	46bd      	mov	sp, r7
    63b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63bc:	4770      	bx	lr

000063be <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    63be:	b580      	push	{r7, lr}
    63c0:	af00      	add	r7, sp, #0
    63c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63c6:	2001      	movs	r0, #1
    63c8:	f7ff fdbe 	bl	5f48 <__static_initialization_and_destruction_0(int, int)>
    63cc:	bd80      	pop	{r7, pc}
    63ce:	Address 0x00000000000063ce is out of bounds.


000063d0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    63d0:	4b07      	ldr	r3, [pc, #28]	; (63f0 <pxCurrentTCBConst2>)
    63d2:	6819      	ldr	r1, [r3, #0]
    63d4:	6808      	ldr	r0, [r1, #0]
    63d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63da:	f380 8809 	msr	PSP, r0
    63de:	f3bf 8f6f 	isb	sy
    63e2:	f04f 0000 	mov.w	r0, #0
    63e6:	f380 8811 	msr	BASEPRI, r0
    63ea:	4770      	bx	lr
    63ec:	f3af 8000 	nop.w

000063f0 <pxCurrentTCBConst2>:
    63f0:	10000764 	.word	0x10000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    63f4:	bf00      	nop
    63f6:	bf00      	nop
    63f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    63fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00006400 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6400:	f3ef 8009 	mrs	r0, PSP
    6404:	f3bf 8f6f 	isb	sy
    6408:	4b15      	ldr	r3, [pc, #84]	; (6460 <pxCurrentTCBConst>)
    640a:	681a      	ldr	r2, [r3, #0]
    640c:	f01e 0f10 	tst.w	lr, #16
    6410:	bf08      	it	eq
    6412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    6416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    641a:	6010      	str	r0, [r2, #0]
    641c:	e92d 0009 	stmdb	sp!, {r0, r3}
    6420:	f04f 0028 	mov.w	r0, #40	; 0x28
    6424:	f380 8811 	msr	BASEPRI, r0
    6428:	f3bf 8f4f 	dsb	sy
    642c:	f3bf 8f6f 	isb	sy
    6430:	f7fc fd26 	bl	2e80 <vTaskSwitchContext>
    6434:	f04f 0000 	mov.w	r0, #0
    6438:	f380 8811 	msr	BASEPRI, r0
    643c:	bc09      	pop	{r0, r3}
    643e:	6819      	ldr	r1, [r3, #0]
    6440:	6808      	ldr	r0, [r1, #0]
    6442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6446:	f01e 0f10 	tst.w	lr, #16
    644a:	bf08      	it	eq
    644c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6450:	f380 8809 	msr	PSP, r0
    6454:	f3bf 8f6f 	isb	sy
    6458:	4770      	bx	lr
    645a:	bf00      	nop
    645c:	f3af 8000 	nop.w

00006460 <pxCurrentTCBConst>:
    6460:	10000764 	.word	0x10000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6464:	bf00      	nop
    6466:	bf00      	nop

00006468 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6468:	b480      	push	{r7}
    646a:	b083      	sub	sp, #12
    646c:	af00      	add	r7, sp, #0
    646e:	6078      	str	r0, [r7, #4]
    6470:	6039      	str	r1, [r7, #0]
  return 1;
    6472:	2301      	movs	r3, #1
}
    6474:	4618      	mov	r0, r3
    6476:	370c      	adds	r7, #12
    6478:	46bd      	mov	sp, r7
    647a:	f85d 7b04 	ldr.w	r7, [sp], #4
    647e:	4770      	bx	lr

00006480 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6480:	b480      	push	{r7}
    6482:	b083      	sub	sp, #12
    6484:	af00      	add	r7, sp, #0
    6486:	6078      	str	r0, [r7, #4]
    6488:	6039      	str	r1, [r7, #0]
  return 0;
    648a:	2300      	movs	r3, #0
}
    648c:	4618      	mov	r0, r3
    648e:	370c      	adds	r7, #12
    6490:	46bd      	mov	sp, r7
    6492:	f85d 7b04 	ldr.w	r7, [sp], #4
    6496:	4770      	bx	lr

00006498 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6498:	b480      	push	{r7}
    649a:	b083      	sub	sp, #12
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    64a0:	4a04      	ldr	r2, [pc, #16]	; (64b4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	6013      	str	r3, [r2, #0]
}
    64a6:	bf00      	nop
    64a8:	370c      	adds	r7, #12
    64aa:	46bd      	mov	sp, r7
    64ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    64b0:	4770      	bx	lr
    64b2:	bf00      	nop
    64b4:	1000000c 	.word	0x1000000c

000064b8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    64b8:	b480      	push	{r7}
    64ba:	b083      	sub	sp, #12
    64bc:	af00      	add	r7, sp, #0
    64be:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    64c0:	4a04      	ldr	r2, [pc, #16]	; (64d4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    64c2:	687b      	ldr	r3, [r7, #4]
    64c4:	6013      	str	r3, [r2, #0]
}
    64c6:	bf00      	nop
    64c8:	370c      	adds	r7, #12
    64ca:	46bd      	mov	sp, r7
    64cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    64d0:	4770      	bx	lr
    64d2:	bf00      	nop
    64d4:	10000010 	.word	0x10000010

000064d8 <__aeabi_atexit>:
    64d8:	460b      	mov	r3, r1
    64da:	4601      	mov	r1, r0
    64dc:	4618      	mov	r0, r3
    64de:	f001 ba9d 	b.w	7a1c <__cxa_atexit>

000064e2 <__cxa_pure_virtual>:
    64e2:	b508      	push	{r3, lr}
    64e4:	f000 f810 	bl	6508 <std::terminate()>

000064e8 <std::__throw_bad_function_call()>:
    64e8:	b508      	push	{r3, lr}
    64ea:	f001 fa8f 	bl	7a0c <abort>

000064ee <__cxxabiv1::__terminate(void (*)())>:
    64ee:	b508      	push	{r3, lr}
    64f0:	4780      	blx	r0
    64f2:	f001 fa8b 	bl	7a0c <abort>
    64f6:	Address 0x00000000000064f6 is out of bounds.


000064f8 <std::get_terminate()>:
    64f8:	4b02      	ldr	r3, [pc, #8]	; (6504 <std::get_terminate()+0xc>)
    64fa:	6818      	ldr	r0, [r3, #0]
    64fc:	f3bf 8f5b 	dmb	ish
    6500:	4770      	bx	lr
    6502:	bf00      	nop
    6504:	10000090 	.word	0x10000090

00006508 <std::terminate()>:
    6508:	b508      	push	{r3, lr}
    650a:	f7ff fff5 	bl	64f8 <std::get_terminate()>
    650e:	f7ff ffee 	bl	64ee <__cxxabiv1::__terminate(void (*)())>
    6512:	Address 0x0000000000006512 is out of bounds.


00006514 <__aeabi_d2f>:
    6514:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6518:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    651c:	bf24      	itt	cs
    651e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    6522:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    6526:	d90d      	bls.n	6544 <__aeabi_d2f+0x30>
    6528:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    652c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6530:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    6534:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6538:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    653c:	bf08      	it	eq
    653e:	f020 0001 	biceq.w	r0, r0, #1
    6542:	4770      	bx	lr
    6544:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6548:	d121      	bne.n	658e <__aeabi_d2f+0x7a>
    654a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    654e:	bfbc      	itt	lt
    6550:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6554:	4770      	bxlt	lr
    6556:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    655a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    655e:	f1c2 0218 	rsb	r2, r2, #24
    6562:	f1c2 0c20 	rsb	ip, r2, #32
    6566:	fa10 f30c 	lsls.w	r3, r0, ip
    656a:	fa20 f002 	lsr.w	r0, r0, r2
    656e:	bf18      	it	ne
    6570:	f040 0001 	orrne.w	r0, r0, #1
    6574:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6578:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    657c:	fa03 fc0c 	lsl.w	ip, r3, ip
    6580:	ea40 000c 	orr.w	r0, r0, ip
    6584:	fa23 f302 	lsr.w	r3, r3, r2
    6588:	ea4f 0343 	mov.w	r3, r3, lsl #1
    658c:	e7cc      	b.n	6528 <__aeabi_d2f+0x14>
    658e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6592:	d107      	bne.n	65a4 <__aeabi_d2f+0x90>
    6594:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6598:	bf1e      	ittt	ne
    659a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    659e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    65a2:	4770      	bxne	lr
    65a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    65a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    65ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    65b0:	4770      	bx	lr
    65b2:	bf00      	nop

000065b4 <__aeabi_frsub>:
    65b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    65b8:	e002      	b.n	65c0 <__addsf3>
    65ba:	bf00      	nop

000065bc <__aeabi_fsub>:
    65bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000065c0 <__addsf3>:
    65c0:	0042      	lsls	r2, r0, #1
    65c2:	bf1f      	itttt	ne
    65c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    65c8:	ea92 0f03 	teqne	r2, r3
    65cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    65d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    65d4:	d06a      	beq.n	66ac <__addsf3+0xec>
    65d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    65da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    65de:	bfc1      	itttt	gt
    65e0:	18d2      	addgt	r2, r2, r3
    65e2:	4041      	eorgt	r1, r0
    65e4:	4048      	eorgt	r0, r1
    65e6:	4041      	eorgt	r1, r0
    65e8:	bfb8      	it	lt
    65ea:	425b      	neglt	r3, r3
    65ec:	2b19      	cmp	r3, #25
    65ee:	bf88      	it	hi
    65f0:	4770      	bxhi	lr
    65f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    65f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    65fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    65fe:	bf18      	it	ne
    6600:	4240      	negne	r0, r0
    6602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6606:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    660a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    660e:	bf18      	it	ne
    6610:	4249      	negne	r1, r1
    6612:	ea92 0f03 	teq	r2, r3
    6616:	d03f      	beq.n	6698 <__addsf3+0xd8>
    6618:	f1a2 0201 	sub.w	r2, r2, #1
    661c:	fa41 fc03 	asr.w	ip, r1, r3
    6620:	eb10 000c 	adds.w	r0, r0, ip
    6624:	f1c3 0320 	rsb	r3, r3, #32
    6628:	fa01 f103 	lsl.w	r1, r1, r3
    662c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6630:	d502      	bpl.n	6638 <__addsf3+0x78>
    6632:	4249      	negs	r1, r1
    6634:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6638:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    663c:	d313      	bcc.n	6666 <__addsf3+0xa6>
    663e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6642:	d306      	bcc.n	6652 <__addsf3+0x92>
    6644:	0840      	lsrs	r0, r0, #1
    6646:	ea4f 0131 	mov.w	r1, r1, rrx
    664a:	f102 0201 	add.w	r2, r2, #1
    664e:	2afe      	cmp	r2, #254	; 0xfe
    6650:	d251      	bcs.n	66f6 <__addsf3+0x136>
    6652:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6656:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    665a:	bf08      	it	eq
    665c:	f020 0001 	biceq.w	r0, r0, #1
    6660:	ea40 0003 	orr.w	r0, r0, r3
    6664:	4770      	bx	lr
    6666:	0049      	lsls	r1, r1, #1
    6668:	eb40 0000 	adc.w	r0, r0, r0
    666c:	3a01      	subs	r2, #1
    666e:	bf28      	it	cs
    6670:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6674:	d2ed      	bcs.n	6652 <__addsf3+0x92>
    6676:	fab0 fc80 	clz	ip, r0
    667a:	f1ac 0c08 	sub.w	ip, ip, #8
    667e:	ebb2 020c 	subs.w	r2, r2, ip
    6682:	fa00 f00c 	lsl.w	r0, r0, ip
    6686:	bfaa      	itet	ge
    6688:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    668c:	4252      	neglt	r2, r2
    668e:	4318      	orrge	r0, r3
    6690:	bfbc      	itt	lt
    6692:	40d0      	lsrlt	r0, r2
    6694:	4318      	orrlt	r0, r3
    6696:	4770      	bx	lr
    6698:	f092 0f00 	teq	r2, #0
    669c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    66a0:	bf06      	itte	eq
    66a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    66a6:	3201      	addeq	r2, #1
    66a8:	3b01      	subne	r3, #1
    66aa:	e7b5      	b.n	6618 <__addsf3+0x58>
    66ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
    66b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    66b4:	bf18      	it	ne
    66b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    66ba:	d021      	beq.n	6700 <__addsf3+0x140>
    66bc:	ea92 0f03 	teq	r2, r3
    66c0:	d004      	beq.n	66cc <__addsf3+0x10c>
    66c2:	f092 0f00 	teq	r2, #0
    66c6:	bf08      	it	eq
    66c8:	4608      	moveq	r0, r1
    66ca:	4770      	bx	lr
    66cc:	ea90 0f01 	teq	r0, r1
    66d0:	bf1c      	itt	ne
    66d2:	2000      	movne	r0, #0
    66d4:	4770      	bxne	lr
    66d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    66da:	d104      	bne.n	66e6 <__addsf3+0x126>
    66dc:	0040      	lsls	r0, r0, #1
    66de:	bf28      	it	cs
    66e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    66e4:	4770      	bx	lr
    66e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    66ea:	bf3c      	itt	cc
    66ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    66f0:	4770      	bxcc	lr
    66f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    66f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    66fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    66fe:	4770      	bx	lr
    6700:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6704:	bf16      	itet	ne
    6706:	4608      	movne	r0, r1
    6708:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    670c:	4601      	movne	r1, r0
    670e:	0242      	lsls	r2, r0, #9
    6710:	bf06      	itte	eq
    6712:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6716:	ea90 0f01 	teqeq	r0, r1
    671a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    671e:	4770      	bx	lr

00006720 <__aeabi_ui2f>:
    6720:	f04f 0300 	mov.w	r3, #0
    6724:	e004      	b.n	6730 <__aeabi_i2f+0x8>
    6726:	bf00      	nop

00006728 <__aeabi_i2f>:
    6728:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    672c:	bf48      	it	mi
    672e:	4240      	negmi	r0, r0
    6730:	ea5f 0c00 	movs.w	ip, r0
    6734:	bf08      	it	eq
    6736:	4770      	bxeq	lr
    6738:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    673c:	4601      	mov	r1, r0
    673e:	f04f 0000 	mov.w	r0, #0
    6742:	e01c      	b.n	677e <__aeabi_l2f+0x2a>

00006744 <__aeabi_ul2f>:
    6744:	ea50 0201 	orrs.w	r2, r0, r1
    6748:	bf08      	it	eq
    674a:	4770      	bxeq	lr
    674c:	f04f 0300 	mov.w	r3, #0
    6750:	e00a      	b.n	6768 <__aeabi_l2f+0x14>
    6752:	bf00      	nop

00006754 <__aeabi_l2f>:
    6754:	ea50 0201 	orrs.w	r2, r0, r1
    6758:	bf08      	it	eq
    675a:	4770      	bxeq	lr
    675c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6760:	d502      	bpl.n	6768 <__aeabi_l2f+0x14>
    6762:	4240      	negs	r0, r0
    6764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6768:	ea5f 0c01 	movs.w	ip, r1
    676c:	bf02      	ittt	eq
    676e:	4684      	moveq	ip, r0
    6770:	4601      	moveq	r1, r0
    6772:	2000      	moveq	r0, #0
    6774:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6778:	bf08      	it	eq
    677a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    677e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6782:	fabc f28c 	clz	r2, ip
    6786:	3a08      	subs	r2, #8
    6788:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    678c:	db10      	blt.n	67b0 <__aeabi_l2f+0x5c>
    678e:	fa01 fc02 	lsl.w	ip, r1, r2
    6792:	4463      	add	r3, ip
    6794:	fa00 fc02 	lsl.w	ip, r0, r2
    6798:	f1c2 0220 	rsb	r2, r2, #32
    679c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    67a0:	fa20 f202 	lsr.w	r2, r0, r2
    67a4:	eb43 0002 	adc.w	r0, r3, r2
    67a8:	bf08      	it	eq
    67aa:	f020 0001 	biceq.w	r0, r0, #1
    67ae:	4770      	bx	lr
    67b0:	f102 0220 	add.w	r2, r2, #32
    67b4:	fa01 fc02 	lsl.w	ip, r1, r2
    67b8:	f1c2 0220 	rsb	r2, r2, #32
    67bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    67c0:	fa21 f202 	lsr.w	r2, r1, r2
    67c4:	eb43 0002 	adc.w	r0, r3, r2
    67c8:	bf08      	it	eq
    67ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    67ce:	4770      	bx	lr

000067d0 <__aeabi_ldivmod>:
    67d0:	b97b      	cbnz	r3, 67f2 <__aeabi_ldivmod+0x22>
    67d2:	b972      	cbnz	r2, 67f2 <__aeabi_ldivmod+0x22>
    67d4:	2900      	cmp	r1, #0
    67d6:	bfbe      	ittt	lt
    67d8:	2000      	movlt	r0, #0
    67da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    67de:	e006      	blt.n	67ee <__aeabi_ldivmod+0x1e>
    67e0:	bf08      	it	eq
    67e2:	2800      	cmpeq	r0, #0
    67e4:	bf1c      	itt	ne
    67e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    67ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    67ee:	f001 b90b 	b.w	7a08 <__aeabi_idiv0>
    67f2:	f1ad 0c08 	sub.w	ip, sp, #8
    67f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    67fa:	2900      	cmp	r1, #0
    67fc:	db09      	blt.n	6812 <__aeabi_ldivmod+0x42>
    67fe:	2b00      	cmp	r3, #0
    6800:	db1a      	blt.n	6838 <__aeabi_ldivmod+0x68>
    6802:	f000 f84d 	bl	68a0 <__udivmoddi4>
    6806:	f8dd e004 	ldr.w	lr, [sp, #4]
    680a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    680e:	b004      	add	sp, #16
    6810:	4770      	bx	lr
    6812:	4240      	negs	r0, r0
    6814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6818:	2b00      	cmp	r3, #0
    681a:	db1b      	blt.n	6854 <__aeabi_ldivmod+0x84>
    681c:	f000 f840 	bl	68a0 <__udivmoddi4>
    6820:	f8dd e004 	ldr.w	lr, [sp, #4]
    6824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6828:	b004      	add	sp, #16
    682a:	4240      	negs	r0, r0
    682c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6830:	4252      	negs	r2, r2
    6832:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6836:	4770      	bx	lr
    6838:	4252      	negs	r2, r2
    683a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    683e:	f000 f82f 	bl	68a0 <__udivmoddi4>
    6842:	f8dd e004 	ldr.w	lr, [sp, #4]
    6846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    684a:	b004      	add	sp, #16
    684c:	4240      	negs	r0, r0
    684e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6852:	4770      	bx	lr
    6854:	4252      	negs	r2, r2
    6856:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    685a:	f000 f821 	bl	68a0 <__udivmoddi4>
    685e:	f8dd e004 	ldr.w	lr, [sp, #4]
    6862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6866:	b004      	add	sp, #16
    6868:	4252      	negs	r2, r2
    686a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    686e:	4770      	bx	lr

00006870 <__aeabi_uldivmod>:
    6870:	b953      	cbnz	r3, 6888 <__aeabi_uldivmod+0x18>
    6872:	b94a      	cbnz	r2, 6888 <__aeabi_uldivmod+0x18>
    6874:	2900      	cmp	r1, #0
    6876:	bf08      	it	eq
    6878:	2800      	cmpeq	r0, #0
    687a:	bf1c      	itt	ne
    687c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6880:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6884:	f001 b8c0 	b.w	7a08 <__aeabi_idiv0>
    6888:	f1ad 0c08 	sub.w	ip, sp, #8
    688c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6890:	f000 f806 	bl	68a0 <__udivmoddi4>
    6894:	f8dd e004 	ldr.w	lr, [sp, #4]
    6898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    689c:	b004      	add	sp, #16
    689e:	4770      	bx	lr

000068a0 <__udivmoddi4>:
    68a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68a4:	9d08      	ldr	r5, [sp, #32]
    68a6:	4604      	mov	r4, r0
    68a8:	468c      	mov	ip, r1
    68aa:	2b00      	cmp	r3, #0
    68ac:	f040 8083 	bne.w	69b6 <__udivmoddi4+0x116>
    68b0:	428a      	cmp	r2, r1
    68b2:	4617      	mov	r7, r2
    68b4:	d947      	bls.n	6946 <__udivmoddi4+0xa6>
    68b6:	fab2 f282 	clz	r2, r2
    68ba:	b142      	cbz	r2, 68ce <__udivmoddi4+0x2e>
    68bc:	f1c2 0020 	rsb	r0, r2, #32
    68c0:	fa24 f000 	lsr.w	r0, r4, r0
    68c4:	4091      	lsls	r1, r2
    68c6:	4097      	lsls	r7, r2
    68c8:	ea40 0c01 	orr.w	ip, r0, r1
    68cc:	4094      	lsls	r4, r2
    68ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
    68d2:	0c23      	lsrs	r3, r4, #16
    68d4:	fbbc f6f8 	udiv	r6, ip, r8
    68d8:	fa1f fe87 	uxth.w	lr, r7
    68dc:	fb08 c116 	mls	r1, r8, r6, ip
    68e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    68e4:	fb06 f10e 	mul.w	r1, r6, lr
    68e8:	4299      	cmp	r1, r3
    68ea:	d909      	bls.n	6900 <__udivmoddi4+0x60>
    68ec:	18fb      	adds	r3, r7, r3
    68ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    68f2:	f080 8119 	bcs.w	6b28 <__udivmoddi4+0x288>
    68f6:	4299      	cmp	r1, r3
    68f8:	f240 8116 	bls.w	6b28 <__udivmoddi4+0x288>
    68fc:	3e02      	subs	r6, #2
    68fe:	443b      	add	r3, r7
    6900:	1a5b      	subs	r3, r3, r1
    6902:	b2a4      	uxth	r4, r4
    6904:	fbb3 f0f8 	udiv	r0, r3, r8
    6908:	fb08 3310 	mls	r3, r8, r0, r3
    690c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6910:	fb00 fe0e 	mul.w	lr, r0, lr
    6914:	45a6      	cmp	lr, r4
    6916:	d909      	bls.n	692c <__udivmoddi4+0x8c>
    6918:	193c      	adds	r4, r7, r4
    691a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    691e:	f080 8105 	bcs.w	6b2c <__udivmoddi4+0x28c>
    6922:	45a6      	cmp	lr, r4
    6924:	f240 8102 	bls.w	6b2c <__udivmoddi4+0x28c>
    6928:	3802      	subs	r0, #2
    692a:	443c      	add	r4, r7
    692c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6930:	eba4 040e 	sub.w	r4, r4, lr
    6934:	2600      	movs	r6, #0
    6936:	b11d      	cbz	r5, 6940 <__udivmoddi4+0xa0>
    6938:	40d4      	lsrs	r4, r2
    693a:	2300      	movs	r3, #0
    693c:	e9c5 4300 	strd	r4, r3, [r5]
    6940:	4631      	mov	r1, r6
    6942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6946:	b902      	cbnz	r2, 694a <__udivmoddi4+0xaa>
    6948:	deff      	udf	#255	; 0xff
    694a:	fab2 f282 	clz	r2, r2
    694e:	2a00      	cmp	r2, #0
    6950:	d150      	bne.n	69f4 <__udivmoddi4+0x154>
    6952:	1bcb      	subs	r3, r1, r7
    6954:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6958:	fa1f f887 	uxth.w	r8, r7
    695c:	2601      	movs	r6, #1
    695e:	fbb3 fcfe 	udiv	ip, r3, lr
    6962:	0c21      	lsrs	r1, r4, #16
    6964:	fb0e 331c 	mls	r3, lr, ip, r3
    6968:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    696c:	fb08 f30c 	mul.w	r3, r8, ip
    6970:	428b      	cmp	r3, r1
    6972:	d907      	bls.n	6984 <__udivmoddi4+0xe4>
    6974:	1879      	adds	r1, r7, r1
    6976:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    697a:	d202      	bcs.n	6982 <__udivmoddi4+0xe2>
    697c:	428b      	cmp	r3, r1
    697e:	f200 80e9 	bhi.w	6b54 <__udivmoddi4+0x2b4>
    6982:	4684      	mov	ip, r0
    6984:	1ac9      	subs	r1, r1, r3
    6986:	b2a3      	uxth	r3, r4
    6988:	fbb1 f0fe 	udiv	r0, r1, lr
    698c:	fb0e 1110 	mls	r1, lr, r0, r1
    6990:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    6994:	fb08 f800 	mul.w	r8, r8, r0
    6998:	45a0      	cmp	r8, r4
    699a:	d907      	bls.n	69ac <__udivmoddi4+0x10c>
    699c:	193c      	adds	r4, r7, r4
    699e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    69a2:	d202      	bcs.n	69aa <__udivmoddi4+0x10a>
    69a4:	45a0      	cmp	r8, r4
    69a6:	f200 80d9 	bhi.w	6b5c <__udivmoddi4+0x2bc>
    69aa:	4618      	mov	r0, r3
    69ac:	eba4 0408 	sub.w	r4, r4, r8
    69b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    69b4:	e7bf      	b.n	6936 <__udivmoddi4+0x96>
    69b6:	428b      	cmp	r3, r1
    69b8:	d909      	bls.n	69ce <__udivmoddi4+0x12e>
    69ba:	2d00      	cmp	r5, #0
    69bc:	f000 80b1 	beq.w	6b22 <__udivmoddi4+0x282>
    69c0:	2600      	movs	r6, #0
    69c2:	e9c5 0100 	strd	r0, r1, [r5]
    69c6:	4630      	mov	r0, r6
    69c8:	4631      	mov	r1, r6
    69ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69ce:	fab3 f683 	clz	r6, r3
    69d2:	2e00      	cmp	r6, #0
    69d4:	d14a      	bne.n	6a6c <__udivmoddi4+0x1cc>
    69d6:	428b      	cmp	r3, r1
    69d8:	d302      	bcc.n	69e0 <__udivmoddi4+0x140>
    69da:	4282      	cmp	r2, r0
    69dc:	f200 80b8 	bhi.w	6b50 <__udivmoddi4+0x2b0>
    69e0:	1a84      	subs	r4, r0, r2
    69e2:	eb61 0103 	sbc.w	r1, r1, r3
    69e6:	2001      	movs	r0, #1
    69e8:	468c      	mov	ip, r1
    69ea:	2d00      	cmp	r5, #0
    69ec:	d0a8      	beq.n	6940 <__udivmoddi4+0xa0>
    69ee:	e9c5 4c00 	strd	r4, ip, [r5]
    69f2:	e7a5      	b.n	6940 <__udivmoddi4+0xa0>
    69f4:	f1c2 0320 	rsb	r3, r2, #32
    69f8:	fa20 f603 	lsr.w	r6, r0, r3
    69fc:	4097      	lsls	r7, r2
    69fe:	fa01 f002 	lsl.w	r0, r1, r2
    6a02:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6a06:	40d9      	lsrs	r1, r3
    6a08:	4330      	orrs	r0, r6
    6a0a:	0c03      	lsrs	r3, r0, #16
    6a0c:	fbb1 f6fe 	udiv	r6, r1, lr
    6a10:	fa1f f887 	uxth.w	r8, r7
    6a14:	fb0e 1116 	mls	r1, lr, r6, r1
    6a18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6a1c:	fb06 f108 	mul.w	r1, r6, r8
    6a20:	4299      	cmp	r1, r3
    6a22:	fa04 f402 	lsl.w	r4, r4, r2
    6a26:	d909      	bls.n	6a3c <__udivmoddi4+0x19c>
    6a28:	18fb      	adds	r3, r7, r3
    6a2a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    6a2e:	f080 808d 	bcs.w	6b4c <__udivmoddi4+0x2ac>
    6a32:	4299      	cmp	r1, r3
    6a34:	f240 808a 	bls.w	6b4c <__udivmoddi4+0x2ac>
    6a38:	3e02      	subs	r6, #2
    6a3a:	443b      	add	r3, r7
    6a3c:	1a5b      	subs	r3, r3, r1
    6a3e:	b281      	uxth	r1, r0
    6a40:	fbb3 f0fe 	udiv	r0, r3, lr
    6a44:	fb0e 3310 	mls	r3, lr, r0, r3
    6a48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6a4c:	fb00 f308 	mul.w	r3, r0, r8
    6a50:	428b      	cmp	r3, r1
    6a52:	d907      	bls.n	6a64 <__udivmoddi4+0x1c4>
    6a54:	1879      	adds	r1, r7, r1
    6a56:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6a5a:	d273      	bcs.n	6b44 <__udivmoddi4+0x2a4>
    6a5c:	428b      	cmp	r3, r1
    6a5e:	d971      	bls.n	6b44 <__udivmoddi4+0x2a4>
    6a60:	3802      	subs	r0, #2
    6a62:	4439      	add	r1, r7
    6a64:	1acb      	subs	r3, r1, r3
    6a66:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    6a6a:	e778      	b.n	695e <__udivmoddi4+0xbe>
    6a6c:	f1c6 0c20 	rsb	ip, r6, #32
    6a70:	fa03 f406 	lsl.w	r4, r3, r6
    6a74:	fa22 f30c 	lsr.w	r3, r2, ip
    6a78:	431c      	orrs	r4, r3
    6a7a:	fa20 f70c 	lsr.w	r7, r0, ip
    6a7e:	fa01 f306 	lsl.w	r3, r1, r6
    6a82:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    6a86:	fa21 f10c 	lsr.w	r1, r1, ip
    6a8a:	431f      	orrs	r7, r3
    6a8c:	0c3b      	lsrs	r3, r7, #16
    6a8e:	fbb1 f9fe 	udiv	r9, r1, lr
    6a92:	fa1f f884 	uxth.w	r8, r4
    6a96:	fb0e 1119 	mls	r1, lr, r9, r1
    6a9a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6a9e:	fb09 fa08 	mul.w	sl, r9, r8
    6aa2:	458a      	cmp	sl, r1
    6aa4:	fa02 f206 	lsl.w	r2, r2, r6
    6aa8:	fa00 f306 	lsl.w	r3, r0, r6
    6aac:	d908      	bls.n	6ac0 <__udivmoddi4+0x220>
    6aae:	1861      	adds	r1, r4, r1
    6ab0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6ab4:	d248      	bcs.n	6b48 <__udivmoddi4+0x2a8>
    6ab6:	458a      	cmp	sl, r1
    6ab8:	d946      	bls.n	6b48 <__udivmoddi4+0x2a8>
    6aba:	f1a9 0902 	sub.w	r9, r9, #2
    6abe:	4421      	add	r1, r4
    6ac0:	eba1 010a 	sub.w	r1, r1, sl
    6ac4:	b2bf      	uxth	r7, r7
    6ac6:	fbb1 f0fe 	udiv	r0, r1, lr
    6aca:	fb0e 1110 	mls	r1, lr, r0, r1
    6ace:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    6ad2:	fb00 f808 	mul.w	r8, r0, r8
    6ad6:	45b8      	cmp	r8, r7
    6ad8:	d907      	bls.n	6aea <__udivmoddi4+0x24a>
    6ada:	19e7      	adds	r7, r4, r7
    6adc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    6ae0:	d22e      	bcs.n	6b40 <__udivmoddi4+0x2a0>
    6ae2:	45b8      	cmp	r8, r7
    6ae4:	d92c      	bls.n	6b40 <__udivmoddi4+0x2a0>
    6ae6:	3802      	subs	r0, #2
    6ae8:	4427      	add	r7, r4
    6aea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6aee:	eba7 0708 	sub.w	r7, r7, r8
    6af2:	fba0 8902 	umull	r8, r9, r0, r2
    6af6:	454f      	cmp	r7, r9
    6af8:	46c6      	mov	lr, r8
    6afa:	4649      	mov	r1, r9
    6afc:	d31a      	bcc.n	6b34 <__udivmoddi4+0x294>
    6afe:	d017      	beq.n	6b30 <__udivmoddi4+0x290>
    6b00:	b15d      	cbz	r5, 6b1a <__udivmoddi4+0x27a>
    6b02:	ebb3 020e 	subs.w	r2, r3, lr
    6b06:	eb67 0701 	sbc.w	r7, r7, r1
    6b0a:	fa07 fc0c 	lsl.w	ip, r7, ip
    6b0e:	40f2      	lsrs	r2, r6
    6b10:	ea4c 0202 	orr.w	r2, ip, r2
    6b14:	40f7      	lsrs	r7, r6
    6b16:	e9c5 2700 	strd	r2, r7, [r5]
    6b1a:	2600      	movs	r6, #0
    6b1c:	4631      	mov	r1, r6
    6b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b22:	462e      	mov	r6, r5
    6b24:	4628      	mov	r0, r5
    6b26:	e70b      	b.n	6940 <__udivmoddi4+0xa0>
    6b28:	4606      	mov	r6, r0
    6b2a:	e6e9      	b.n	6900 <__udivmoddi4+0x60>
    6b2c:	4618      	mov	r0, r3
    6b2e:	e6fd      	b.n	692c <__udivmoddi4+0x8c>
    6b30:	4543      	cmp	r3, r8
    6b32:	d2e5      	bcs.n	6b00 <__udivmoddi4+0x260>
    6b34:	ebb8 0e02 	subs.w	lr, r8, r2
    6b38:	eb69 0104 	sbc.w	r1, r9, r4
    6b3c:	3801      	subs	r0, #1
    6b3e:	e7df      	b.n	6b00 <__udivmoddi4+0x260>
    6b40:	4608      	mov	r0, r1
    6b42:	e7d2      	b.n	6aea <__udivmoddi4+0x24a>
    6b44:	4660      	mov	r0, ip
    6b46:	e78d      	b.n	6a64 <__udivmoddi4+0x1c4>
    6b48:	4681      	mov	r9, r0
    6b4a:	e7b9      	b.n	6ac0 <__udivmoddi4+0x220>
    6b4c:	4666      	mov	r6, ip
    6b4e:	e775      	b.n	6a3c <__udivmoddi4+0x19c>
    6b50:	4630      	mov	r0, r6
    6b52:	e74a      	b.n	69ea <__udivmoddi4+0x14a>
    6b54:	f1ac 0c02 	sub.w	ip, ip, #2
    6b58:	4439      	add	r1, r7
    6b5a:	e713      	b.n	6984 <__udivmoddi4+0xe4>
    6b5c:	3802      	subs	r0, #2
    6b5e:	443c      	add	r4, r7
    6b60:	e724      	b.n	69ac <__udivmoddi4+0x10c>
    6b62:	bf00      	nop

00006b64 <selfrel_offset31>:
    6b64:	6803      	ldr	r3, [r0, #0]
    6b66:	005a      	lsls	r2, r3, #1
    6b68:	bf4c      	ite	mi
    6b6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    6b6e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    6b72:	4418      	add	r0, r3
    6b74:	4770      	bx	lr
    6b76:	bf00      	nop

00006b78 <search_EIT_table>:
    6b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b7c:	b329      	cbz	r1, 6bca <search_EIT_table+0x52>
    6b7e:	1e4f      	subs	r7, r1, #1
    6b80:	4604      	mov	r4, r0
    6b82:	4615      	mov	r5, r2
    6b84:	463e      	mov	r6, r7
    6b86:	f04f 0800 	mov.w	r8, #0
    6b8a:	eb08 0106 	add.w	r1, r8, r6
    6b8e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    6b92:	1049      	asrs	r1, r1, #1
    6b94:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    6b98:	4648      	mov	r0, r9
    6b9a:	f7ff ffe3 	bl	6b64 <selfrel_offset31>
    6b9e:	4603      	mov	r3, r0
    6ba0:	00c8      	lsls	r0, r1, #3
    6ba2:	3008      	adds	r0, #8
    6ba4:	428f      	cmp	r7, r1
    6ba6:	4420      	add	r0, r4
    6ba8:	d009      	beq.n	6bbe <search_EIT_table+0x46>
    6baa:	42ab      	cmp	r3, r5
    6bac:	d809      	bhi.n	6bc2 <search_EIT_table+0x4a>
    6bae:	f7ff ffd9 	bl	6b64 <selfrel_offset31>
    6bb2:	3801      	subs	r0, #1
    6bb4:	42a8      	cmp	r0, r5
    6bb6:	d20a      	bcs.n	6bce <search_EIT_table+0x56>
    6bb8:	f101 0801 	add.w	r8, r1, #1
    6bbc:	e7e5      	b.n	6b8a <search_EIT_table+0x12>
    6bbe:	42ab      	cmp	r3, r5
    6bc0:	d905      	bls.n	6bce <search_EIT_table+0x56>
    6bc2:	4588      	cmp	r8, r1
    6bc4:	d001      	beq.n	6bca <search_EIT_table+0x52>
    6bc6:	1e4e      	subs	r6, r1, #1
    6bc8:	e7df      	b.n	6b8a <search_EIT_table+0x12>
    6bca:	f04f 0900 	mov.w	r9, #0
    6bce:	4648      	mov	r0, r9
    6bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006bd4 <__gnu_unwind_get_pr_addr>:
    6bd4:	2801      	cmp	r0, #1
    6bd6:	d007      	beq.n	6be8 <__gnu_unwind_get_pr_addr+0x14>
    6bd8:	2802      	cmp	r0, #2
    6bda:	d007      	beq.n	6bec <__gnu_unwind_get_pr_addr+0x18>
    6bdc:	4b04      	ldr	r3, [pc, #16]	; (6bf0 <__gnu_unwind_get_pr_addr+0x1c>)
    6bde:	2800      	cmp	r0, #0
    6be0:	bf0c      	ite	eq
    6be2:	4618      	moveq	r0, r3
    6be4:	2000      	movne	r0, #0
    6be6:	4770      	bx	lr
    6be8:	4802      	ldr	r0, [pc, #8]	; (6bf4 <__gnu_unwind_get_pr_addr+0x20>)
    6bea:	4770      	bx	lr
    6bec:	4802      	ldr	r0, [pc, #8]	; (6bf8 <__gnu_unwind_get_pr_addr+0x24>)
    6bee:	4770      	bx	lr
    6bf0:	00007299 	.word	0x00007299
    6bf4:	0000729d 	.word	0x0000729d
    6bf8:	000072a1 	.word	0x000072a1

00006bfc <get_eit_entry>:
    6bfc:	b530      	push	{r4, r5, lr}
    6bfe:	4b23      	ldr	r3, [pc, #140]	; (6c8c <get_eit_entry+0x90>)
    6c00:	b083      	sub	sp, #12
    6c02:	4604      	mov	r4, r0
    6c04:	1e8d      	subs	r5, r1, #2
    6c06:	b33b      	cbz	r3, 6c58 <get_eit_entry+0x5c>
    6c08:	a901      	add	r1, sp, #4
    6c0a:	4628      	mov	r0, r5
    6c0c:	f3af 8000 	nop.w
    6c10:	b1e8      	cbz	r0, 6c4e <get_eit_entry+0x52>
    6c12:	9901      	ldr	r1, [sp, #4]
    6c14:	462a      	mov	r2, r5
    6c16:	f7ff ffaf 	bl	6b78 <search_EIT_table>
    6c1a:	4601      	mov	r1, r0
    6c1c:	b1b8      	cbz	r0, 6c4e <get_eit_entry+0x52>
    6c1e:	f7ff ffa1 	bl	6b64 <selfrel_offset31>
    6c22:	684b      	ldr	r3, [r1, #4]
    6c24:	64a0      	str	r0, [r4, #72]	; 0x48
    6c26:	2b01      	cmp	r3, #1
    6c28:	d02b      	beq.n	6c82 <get_eit_entry+0x86>
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	f101 0004 	add.w	r0, r1, #4
    6c30:	db23      	blt.n	6c7a <get_eit_entry+0x7e>
    6c32:	f7ff ff97 	bl	6b64 <selfrel_offset31>
    6c36:	2300      	movs	r3, #0
    6c38:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6c3c:	6803      	ldr	r3, [r0, #0]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	db10      	blt.n	6c64 <get_eit_entry+0x68>
    6c42:	f7ff ff8f 	bl	6b64 <selfrel_offset31>
    6c46:	6120      	str	r0, [r4, #16]
    6c48:	2000      	movs	r0, #0
    6c4a:	b003      	add	sp, #12
    6c4c:	bd30      	pop	{r4, r5, pc}
    6c4e:	2300      	movs	r3, #0
    6c50:	2009      	movs	r0, #9
    6c52:	6123      	str	r3, [r4, #16]
    6c54:	b003      	add	sp, #12
    6c56:	bd30      	pop	{r4, r5, pc}
    6c58:	490d      	ldr	r1, [pc, #52]	; (6c90 <get_eit_entry+0x94>)
    6c5a:	480e      	ldr	r0, [pc, #56]	; (6c94 <get_eit_entry+0x98>)
    6c5c:	1a09      	subs	r1, r1, r0
    6c5e:	10c9      	asrs	r1, r1, #3
    6c60:	9101      	str	r1, [sp, #4]
    6c62:	e7d7      	b.n	6c14 <get_eit_entry+0x18>
    6c64:	f3c3 6003 	ubfx	r0, r3, #24, #4
    6c68:	f7ff ffb4 	bl	6bd4 <__gnu_unwind_get_pr_addr>
    6c6c:	2800      	cmp	r0, #0
    6c6e:	6120      	str	r0, [r4, #16]
    6c70:	bf14      	ite	ne
    6c72:	2000      	movne	r0, #0
    6c74:	2009      	moveq	r0, #9
    6c76:	b003      	add	sp, #12
    6c78:	bd30      	pop	{r4, r5, pc}
    6c7a:	2301      	movs	r3, #1
    6c7c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    6c80:	e7dc      	b.n	6c3c <get_eit_entry+0x40>
    6c82:	2300      	movs	r3, #0
    6c84:	6123      	str	r3, [r4, #16]
    6c86:	2005      	movs	r0, #5
    6c88:	e7df      	b.n	6c4a <get_eit_entry+0x4e>
    6c8a:	bf00      	nop
    6c8c:	00000000 	.word	0x00000000
    6c90:	0000965c 	.word	0x0000965c
    6c94:	000095a4 	.word	0x000095a4

00006c98 <restore_non_core_regs>:
    6c98:	6803      	ldr	r3, [r0, #0]
    6c9a:	07da      	lsls	r2, r3, #31
    6c9c:	b510      	push	{r4, lr}
    6c9e:	4604      	mov	r4, r0
    6ca0:	d406      	bmi.n	6cb0 <restore_non_core_regs+0x18>
    6ca2:	079b      	lsls	r3, r3, #30
    6ca4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    6ca8:	d509      	bpl.n	6cbe <restore_non_core_regs+0x26>
    6caa:	f000 fc4b 	bl	7544 <__gnu_Unwind_Restore_VFP_D>
    6cae:	6823      	ldr	r3, [r4, #0]
    6cb0:	0759      	lsls	r1, r3, #29
    6cb2:	d509      	bpl.n	6cc8 <restore_non_core_regs+0x30>
    6cb4:	071a      	lsls	r2, r3, #28
    6cb6:	d50e      	bpl.n	6cd6 <restore_non_core_regs+0x3e>
    6cb8:	06db      	lsls	r3, r3, #27
    6cba:	d513      	bpl.n	6ce4 <restore_non_core_regs+0x4c>
    6cbc:	bd10      	pop	{r4, pc}
    6cbe:	f000 fc39 	bl	7534 <__gnu_Unwind_Restore_VFP>
    6cc2:	6823      	ldr	r3, [r4, #0]
    6cc4:	0759      	lsls	r1, r3, #29
    6cc6:	d4f5      	bmi.n	6cb4 <restore_non_core_regs+0x1c>
    6cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    6ccc:	f000 fc42 	bl	7554 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    6cd0:	6823      	ldr	r3, [r4, #0]
    6cd2:	071a      	lsls	r2, r3, #28
    6cd4:	d4f0      	bmi.n	6cb8 <restore_non_core_regs+0x20>
    6cd6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    6cda:	f000 fc43 	bl	7564 <__gnu_Unwind_Restore_WMMXD>
    6cde:	6823      	ldr	r3, [r4, #0]
    6ce0:	06db      	lsls	r3, r3, #27
    6ce2:	d4eb      	bmi.n	6cbc <restore_non_core_regs+0x24>
    6ce4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    6ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cec:	f000 bc7e 	b.w	75ec <__gnu_Unwind_Restore_WMMXC>

00006cf0 <_Unwind_decode_typeinfo_ptr.isra.0>:
    6cf0:	4603      	mov	r3, r0
    6cf2:	6800      	ldr	r0, [r0, #0]
    6cf4:	b100      	cbz	r0, 6cf8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    6cf6:	4418      	add	r0, r3
    6cf8:	4770      	bx	lr
    6cfa:	bf00      	nop

00006cfc <__gnu_unwind_24bit.isra.0>:
    6cfc:	2009      	movs	r0, #9
    6cfe:	4770      	bx	lr

00006d00 <_Unwind_DebugHook>:
    6d00:	4770      	bx	lr
    6d02:	bf00      	nop

00006d04 <unwind_phase2>:
    6d04:	b570      	push	{r4, r5, r6, lr}
    6d06:	4604      	mov	r4, r0
    6d08:	460e      	mov	r6, r1
    6d0a:	6c31      	ldr	r1, [r6, #64]	; 0x40
    6d0c:	4620      	mov	r0, r4
    6d0e:	f7ff ff75 	bl	6bfc <get_eit_entry>
    6d12:	4605      	mov	r5, r0
    6d14:	b988      	cbnz	r0, 6d3a <unwind_phase2+0x36>
    6d16:	6c33      	ldr	r3, [r6, #64]	; 0x40
    6d18:	6163      	str	r3, [r4, #20]
    6d1a:	4632      	mov	r2, r6
    6d1c:	6923      	ldr	r3, [r4, #16]
    6d1e:	4621      	mov	r1, r4
    6d20:	2001      	movs	r0, #1
    6d22:	4798      	blx	r3
    6d24:	2808      	cmp	r0, #8
    6d26:	d0f0      	beq.n	6d0a <unwind_phase2+0x6>
    6d28:	2807      	cmp	r0, #7
    6d2a:	d106      	bne.n	6d3a <unwind_phase2+0x36>
    6d2c:	4628      	mov	r0, r5
    6d2e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    6d30:	f7ff ffe6 	bl	6d00 <_Unwind_DebugHook>
    6d34:	1d30      	adds	r0, r6, #4
    6d36:	f000 fbf1 	bl	751c <__restore_core_regs>
    6d3a:	f000 fe67 	bl	7a0c <abort>
    6d3e:	bf00      	nop

00006d40 <unwind_phase2_forced>:
    6d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d44:	1d0d      	adds	r5, r1, #4
    6d46:	4606      	mov	r6, r0
    6d48:	4614      	mov	r4, r2
    6d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d4c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    6d50:	f10d 0c0c 	add.w	ip, sp, #12
    6d54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6d60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6d68:	ad02      	add	r5, sp, #8
    6d6a:	68f7      	ldr	r7, [r6, #12]
    6d6c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    6d70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    6d74:	2300      	movs	r3, #0
    6d76:	602b      	str	r3, [r5, #0]
    6d78:	e021      	b.n	6dbe <unwind_phase2_forced+0x7e>
    6d7a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    6d7c:	6173      	str	r3, [r6, #20]
    6d7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6d82:	4629      	mov	r1, r5
    6d84:	a87a      	add	r0, sp, #488	; 0x1e8
    6d86:	f000 fe7b 	bl	7a80 <memcpy>
    6d8a:	6933      	ldr	r3, [r6, #16]
    6d8c:	aa7a      	add	r2, sp, #488	; 0x1e8
    6d8e:	4631      	mov	r1, r6
    6d90:	4650      	mov	r0, sl
    6d92:	4798      	blx	r3
    6d94:	9b88      	ldr	r3, [sp, #544]	; 0x220
    6d96:	e9cd 5800 	strd	r5, r8, [sp]
    6d9a:	4621      	mov	r1, r4
    6d9c:	646b      	str	r3, [r5, #68]	; 0x44
    6d9e:	4681      	mov	r9, r0
    6da0:	4633      	mov	r3, r6
    6da2:	4632      	mov	r2, r6
    6da4:	2001      	movs	r0, #1
    6da6:	47b8      	blx	r7
    6da8:	4604      	mov	r4, r0
    6daa:	b9e8      	cbnz	r0, 6de8 <unwind_phase2_forced+0xa8>
    6dac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6db0:	a97a      	add	r1, sp, #488	; 0x1e8
    6db2:	4628      	mov	r0, r5
    6db4:	f000 fe64 	bl	7a80 <memcpy>
    6db8:	f1b9 0f08 	cmp.w	r9, #8
    6dbc:	d11b      	bne.n	6df6 <unwind_phase2_forced+0xb6>
    6dbe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6dc0:	4630      	mov	r0, r6
    6dc2:	f7ff ff1b 	bl	6bfc <get_eit_entry>
    6dc6:	3409      	adds	r4, #9
    6dc8:	fa5f fa84 	uxtb.w	sl, r4
    6dcc:	4681      	mov	r9, r0
    6dce:	2800      	cmp	r0, #0
    6dd0:	d0d3      	beq.n	6d7a <unwind_phase2_forced+0x3a>
    6dd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6dd4:	f04a 0110 	orr.w	r1, sl, #16
    6dd8:	e9cd 5800 	strd	r5, r8, [sp]
    6ddc:	4632      	mov	r2, r6
    6dde:	646b      	str	r3, [r5, #68]	; 0x44
    6de0:	2001      	movs	r0, #1
    6de2:	4633      	mov	r3, r6
    6de4:	47b8      	blx	r7
    6de6:	b108      	cbz	r0, 6dec <unwind_phase2_forced+0xac>
    6de8:	f04f 0909 	mov.w	r9, #9
    6dec:	4648      	mov	r0, r9
    6dee:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    6df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6df6:	f1b9 0f07 	cmp.w	r9, #7
    6dfa:	d1f5      	bne.n	6de8 <unwind_phase2_forced+0xa8>
    6dfc:	4620      	mov	r0, r4
    6dfe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6e00:	f7ff ff7e 	bl	6d00 <_Unwind_DebugHook>
    6e04:	a803      	add	r0, sp, #12
    6e06:	f000 fb89 	bl	751c <__restore_core_regs>
    6e0a:	bf00      	nop

00006e0c <_Unwind_GetCFA>:
    6e0c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6e0e:	4770      	bx	lr

00006e10 <__gnu_Unwind_RaiseException>:
    6e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e12:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6e14:	640b      	str	r3, [r1, #64]	; 0x40
    6e16:	1d0e      	adds	r6, r1, #4
    6e18:	460f      	mov	r7, r1
    6e1a:	4605      	mov	r5, r0
    6e1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e1e:	b0f9      	sub	sp, #484	; 0x1e4
    6e20:	ac01      	add	r4, sp, #4
    6e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6e2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    6e30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    6e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6e38:	9600      	str	r6, [sp, #0]
    6e3a:	e006      	b.n	6e4a <__gnu_Unwind_RaiseException+0x3a>
    6e3c:	692b      	ldr	r3, [r5, #16]
    6e3e:	466a      	mov	r2, sp
    6e40:	4629      	mov	r1, r5
    6e42:	4798      	blx	r3
    6e44:	2808      	cmp	r0, #8
    6e46:	4604      	mov	r4, r0
    6e48:	d108      	bne.n	6e5c <__gnu_Unwind_RaiseException+0x4c>
    6e4a:	9910      	ldr	r1, [sp, #64]	; 0x40
    6e4c:	4628      	mov	r0, r5
    6e4e:	f7ff fed5 	bl	6bfc <get_eit_entry>
    6e52:	2800      	cmp	r0, #0
    6e54:	d0f2      	beq.n	6e3c <__gnu_Unwind_RaiseException+0x2c>
    6e56:	2009      	movs	r0, #9
    6e58:	b079      	add	sp, #484	; 0x1e4
    6e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e5c:	4668      	mov	r0, sp
    6e5e:	f7ff ff1b 	bl	6c98 <restore_non_core_regs>
    6e62:	2c06      	cmp	r4, #6
    6e64:	d1f7      	bne.n	6e56 <__gnu_Unwind_RaiseException+0x46>
    6e66:	4639      	mov	r1, r7
    6e68:	4628      	mov	r0, r5
    6e6a:	f7ff ff4b 	bl	6d04 <unwind_phase2>
    6e6e:	bf00      	nop

00006e70 <__gnu_Unwind_ForcedUnwind>:
    6e70:	b430      	push	{r4, r5}
    6e72:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    6e74:	60c1      	str	r1, [r0, #12]
    6e76:	6182      	str	r2, [r0, #24]
    6e78:	4619      	mov	r1, r3
    6e7a:	641d      	str	r5, [r3, #64]	; 0x40
    6e7c:	2200      	movs	r2, #0
    6e7e:	bc30      	pop	{r4, r5}
    6e80:	e75e      	b.n	6d40 <unwind_phase2_forced>
    6e82:	bf00      	nop

00006e84 <__gnu_Unwind_Resume>:
    6e84:	b570      	push	{r4, r5, r6, lr}
    6e86:	68c6      	ldr	r6, [r0, #12]
    6e88:	6943      	ldr	r3, [r0, #20]
    6e8a:	640b      	str	r3, [r1, #64]	; 0x40
    6e8c:	b9ae      	cbnz	r6, 6eba <__gnu_Unwind_Resume+0x36>
    6e8e:	6903      	ldr	r3, [r0, #16]
    6e90:	460a      	mov	r2, r1
    6e92:	4604      	mov	r4, r0
    6e94:	460d      	mov	r5, r1
    6e96:	4601      	mov	r1, r0
    6e98:	2002      	movs	r0, #2
    6e9a:	4798      	blx	r3
    6e9c:	2807      	cmp	r0, #7
    6e9e:	d005      	beq.n	6eac <__gnu_Unwind_Resume+0x28>
    6ea0:	2808      	cmp	r0, #8
    6ea2:	d10f      	bne.n	6ec4 <__gnu_Unwind_Resume+0x40>
    6ea4:	4629      	mov	r1, r5
    6ea6:	4620      	mov	r0, r4
    6ea8:	f7ff ff2c 	bl	6d04 <unwind_phase2>
    6eac:	4630      	mov	r0, r6
    6eae:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6eb0:	f7ff ff26 	bl	6d00 <_Unwind_DebugHook>
    6eb4:	1d28      	adds	r0, r5, #4
    6eb6:	f000 fb31 	bl	751c <__restore_core_regs>
    6eba:	2201      	movs	r2, #1
    6ebc:	f7ff ff40 	bl	6d40 <unwind_phase2_forced>
    6ec0:	f000 fda4 	bl	7a0c <abort>
    6ec4:	f000 fda2 	bl	7a0c <abort>

00006ec8 <__gnu_Unwind_Resume_or_Rethrow>:
    6ec8:	68c2      	ldr	r2, [r0, #12]
    6eca:	b11a      	cbz	r2, 6ed4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    6ecc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6ece:	640a      	str	r2, [r1, #64]	; 0x40
    6ed0:	2200      	movs	r2, #0
    6ed2:	e735      	b.n	6d40 <unwind_phase2_forced>
    6ed4:	e79c      	b.n	6e10 <__gnu_Unwind_RaiseException>
    6ed6:	bf00      	nop

00006ed8 <_Unwind_Complete>:
    6ed8:	4770      	bx	lr
    6eda:	bf00      	nop

00006edc <_Unwind_DeleteException>:
    6edc:	6883      	ldr	r3, [r0, #8]
    6ede:	4601      	mov	r1, r0
    6ee0:	b10b      	cbz	r3, 6ee6 <_Unwind_DeleteException+0xa>
    6ee2:	2001      	movs	r0, #1
    6ee4:	4718      	bx	r3
    6ee6:	4770      	bx	lr

00006ee8 <_Unwind_VRS_Get>:
    6ee8:	2901      	cmp	r1, #1
    6eea:	d012      	beq.n	6f12 <_Unwind_VRS_Get+0x2a>
    6eec:	d809      	bhi.n	6f02 <_Unwind_VRS_Get+0x1a>
    6eee:	b973      	cbnz	r3, 6f0e <_Unwind_VRS_Get+0x26>
    6ef0:	2a0f      	cmp	r2, #15
    6ef2:	d80c      	bhi.n	6f0e <_Unwind_VRS_Get+0x26>
    6ef4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6ef8:	4618      	mov	r0, r3
    6efa:	6853      	ldr	r3, [r2, #4]
    6efc:	9a00      	ldr	r2, [sp, #0]
    6efe:	6013      	str	r3, [r2, #0]
    6f00:	4770      	bx	lr
    6f02:	3903      	subs	r1, #3
    6f04:	2901      	cmp	r1, #1
    6f06:	bf94      	ite	ls
    6f08:	2001      	movls	r0, #1
    6f0a:	2002      	movhi	r0, #2
    6f0c:	4770      	bx	lr
    6f0e:	2002      	movs	r0, #2
    6f10:	4770      	bx	lr
    6f12:	4608      	mov	r0, r1
    6f14:	4770      	bx	lr
    6f16:	bf00      	nop

00006f18 <_Unwind_GetGR>:
    6f18:	b510      	push	{r4, lr}
    6f1a:	b084      	sub	sp, #16
    6f1c:	2300      	movs	r3, #0
    6f1e:	ac03      	add	r4, sp, #12
    6f20:	460a      	mov	r2, r1
    6f22:	9400      	str	r4, [sp, #0]
    6f24:	4619      	mov	r1, r3
    6f26:	f7ff ffdf 	bl	6ee8 <_Unwind_VRS_Get>
    6f2a:	9803      	ldr	r0, [sp, #12]
    6f2c:	b004      	add	sp, #16
    6f2e:	bd10      	pop	{r4, pc}

00006f30 <_Unwind_VRS_Set>:
    6f30:	2901      	cmp	r1, #1
    6f32:	d012      	beq.n	6f5a <_Unwind_VRS_Set+0x2a>
    6f34:	d809      	bhi.n	6f4a <_Unwind_VRS_Set+0x1a>
    6f36:	b973      	cbnz	r3, 6f56 <_Unwind_VRS_Set+0x26>
    6f38:	2a0f      	cmp	r2, #15
    6f3a:	d80c      	bhi.n	6f56 <_Unwind_VRS_Set+0x26>
    6f3c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6f40:	9a00      	ldr	r2, [sp, #0]
    6f42:	6812      	ldr	r2, [r2, #0]
    6f44:	6042      	str	r2, [r0, #4]
    6f46:	4618      	mov	r0, r3
    6f48:	4770      	bx	lr
    6f4a:	3903      	subs	r1, #3
    6f4c:	2901      	cmp	r1, #1
    6f4e:	bf94      	ite	ls
    6f50:	2001      	movls	r0, #1
    6f52:	2002      	movhi	r0, #2
    6f54:	4770      	bx	lr
    6f56:	2002      	movs	r0, #2
    6f58:	4770      	bx	lr
    6f5a:	4608      	mov	r0, r1
    6f5c:	4770      	bx	lr
    6f5e:	bf00      	nop

00006f60 <_Unwind_SetGR>:
    6f60:	b510      	push	{r4, lr}
    6f62:	b084      	sub	sp, #16
    6f64:	2300      	movs	r3, #0
    6f66:	ac03      	add	r4, sp, #12
    6f68:	9203      	str	r2, [sp, #12]
    6f6a:	9400      	str	r4, [sp, #0]
    6f6c:	460a      	mov	r2, r1
    6f6e:	4619      	mov	r1, r3
    6f70:	f7ff ffde 	bl	6f30 <_Unwind_VRS_Set>
    6f74:	b004      	add	sp, #16
    6f76:	bd10      	pop	{r4, pc}

00006f78 <__gnu_Unwind_Backtrace>:
    6f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f7a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6f7c:	6413      	str	r3, [r2, #64]	; 0x40
    6f7e:	1d15      	adds	r5, r2, #4
    6f80:	468c      	mov	ip, r1
    6f82:	4606      	mov	r6, r0
    6f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6f86:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    6f8a:	ac17      	add	r4, sp, #92	; 0x5c
    6f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6f96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6f9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    6fa2:	4665      	mov	r5, ip
    6fa4:	9716      	str	r7, [sp, #88]	; 0x58
    6fa6:	e010      	b.n	6fca <__gnu_Unwind_Backtrace+0x52>
    6fa8:	f7ff ffda 	bl	6f60 <_Unwind_SetGR>
    6fac:	4629      	mov	r1, r5
    6fae:	a816      	add	r0, sp, #88	; 0x58
    6fb0:	47b0      	blx	r6
    6fb2:	4603      	mov	r3, r0
    6fb4:	aa16      	add	r2, sp, #88	; 0x58
    6fb6:	4669      	mov	r1, sp
    6fb8:	2008      	movs	r0, #8
    6fba:	b983      	cbnz	r3, 6fde <__gnu_Unwind_Backtrace+0x66>
    6fbc:	9b04      	ldr	r3, [sp, #16]
    6fbe:	4798      	blx	r3
    6fc0:	2805      	cmp	r0, #5
    6fc2:	4604      	mov	r4, r0
    6fc4:	d00c      	beq.n	6fe0 <__gnu_Unwind_Backtrace+0x68>
    6fc6:	2809      	cmp	r0, #9
    6fc8:	d009      	beq.n	6fde <__gnu_Unwind_Backtrace+0x66>
    6fca:	9926      	ldr	r1, [sp, #152]	; 0x98
    6fcc:	4668      	mov	r0, sp
    6fce:	f7ff fe15 	bl	6bfc <get_eit_entry>
    6fd2:	4603      	mov	r3, r0
    6fd4:	466a      	mov	r2, sp
    6fd6:	210c      	movs	r1, #12
    6fd8:	a816      	add	r0, sp, #88	; 0x58
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d0e4      	beq.n	6fa8 <__gnu_Unwind_Backtrace+0x30>
    6fde:	2409      	movs	r4, #9
    6fe0:	a816      	add	r0, sp, #88	; 0x58
    6fe2:	f7ff fe59 	bl	6c98 <restore_non_core_regs>
    6fe6:	4620      	mov	r0, r4
    6fe8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    6fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fee:	bf00      	nop

00006ff0 <__gnu_unwind_pr_common>:
    6ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ff4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    6ff6:	b089      	sub	sp, #36	; 0x24
    6ff8:	460d      	mov	r5, r1
    6ffa:	f854 1b04 	ldr.w	r1, [r4], #4
    6ffe:	9406      	str	r4, [sp, #24]
    7000:	4617      	mov	r7, r2
    7002:	f000 0803 	and.w	r8, r0, #3
    7006:	461e      	mov	r6, r3
    7008:	2b00      	cmp	r3, #0
    700a:	d079      	beq.n	7100 <__gnu_unwind_pr_common+0x110>
    700c:	0c0b      	lsrs	r3, r1, #16
    700e:	b2da      	uxtb	r2, r3
    7010:	0409      	lsls	r1, r1, #16
    7012:	f88d 301d 	strb.w	r3, [sp, #29]
    7016:	2302      	movs	r3, #2
    7018:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    701c:	9105      	str	r1, [sp, #20]
    701e:	f88d 301c 	strb.w	r3, [sp, #28]
    7022:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7024:	f1b8 0f02 	cmp.w	r8, #2
    7028:	bf08      	it	eq
    702a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    702c:	f013 0301 	ands.w	r3, r3, #1
    7030:	d00c      	beq.n	704c <__gnu_unwind_pr_common+0x5c>
    7032:	4638      	mov	r0, r7
    7034:	a905      	add	r1, sp, #20
    7036:	f000 fb73 	bl	7720 <__gnu_unwind_execute>
    703a:	b918      	cbnz	r0, 7044 <__gnu_unwind_pr_common+0x54>
    703c:	2008      	movs	r0, #8
    703e:	b009      	add	sp, #36	; 0x24
    7040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7044:	2009      	movs	r0, #9
    7046:	b009      	add	sp, #36	; 0x24
    7048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    704c:	f8d4 a000 	ldr.w	sl, [r4]
    7050:	f1ba 0f00 	cmp.w	sl, #0
    7054:	d0ed      	beq.n	7032 <__gnu_unwind_pr_common+0x42>
    7056:	9301      	str	r3, [sp, #4]
    7058:	f000 0308 	and.w	r3, r0, #8
    705c:	9302      	str	r3, [sp, #8]
    705e:	2e02      	cmp	r6, #2
    7060:	d04a      	beq.n	70f8 <__gnu_unwind_pr_common+0x108>
    7062:	f8b4 a000 	ldrh.w	sl, [r4]
    7066:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    706a:	3404      	adds	r4, #4
    706c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    706e:	f029 0b01 	bic.w	fp, r9, #1
    7072:	210f      	movs	r1, #15
    7074:	4638      	mov	r0, r7
    7076:	4493      	add	fp, r2
    7078:	f7ff ff4e 	bl	6f18 <_Unwind_GetGR>
    707c:	4583      	cmp	fp, r0
    707e:	d839      	bhi.n	70f4 <__gnu_unwind_pr_common+0x104>
    7080:	f02a 0201 	bic.w	r2, sl, #1
    7084:	445a      	add	r2, fp
    7086:	4282      	cmp	r2, r0
    7088:	bf94      	ite	ls
    708a:	2000      	movls	r0, #0
    708c:	2001      	movhi	r0, #1
    708e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7092:	f003 0302 	and.w	r3, r3, #2
    7096:	f00a 0a01 	and.w	sl, sl, #1
    709a:	ea43 030a 	orr.w	r3, r3, sl
    709e:	2b01      	cmp	r3, #1
    70a0:	d049      	beq.n	7136 <__gnu_unwind_pr_common+0x146>
    70a2:	2b02      	cmp	r3, #2
    70a4:	d032      	beq.n	710c <__gnu_unwind_pr_common+0x11c>
    70a6:	2b00      	cmp	r3, #0
    70a8:	d1cc      	bne.n	7044 <__gnu_unwind_pr_common+0x54>
    70aa:	f1b8 0f00 	cmp.w	r8, #0
    70ae:	d002      	beq.n	70b6 <__gnu_unwind_pr_common+0xc6>
    70b0:	2800      	cmp	r0, #0
    70b2:	f040 80cd 	bne.w	7250 <__gnu_unwind_pr_common+0x260>
    70b6:	3404      	adds	r4, #4
    70b8:	f8d4 a000 	ldr.w	sl, [r4]
    70bc:	f1ba 0f00 	cmp.w	sl, #0
    70c0:	d1cd      	bne.n	705e <__gnu_unwind_pr_common+0x6e>
    70c2:	a905      	add	r1, sp, #20
    70c4:	4638      	mov	r0, r7
    70c6:	f000 fb2b 	bl	7720 <__gnu_unwind_execute>
    70ca:	2800      	cmp	r0, #0
    70cc:	d1ba      	bne.n	7044 <__gnu_unwind_pr_common+0x54>
    70ce:	9b01      	ldr	r3, [sp, #4]
    70d0:	2b00      	cmp	r3, #0
    70d2:	d0b3      	beq.n	703c <__gnu_unwind_pr_common+0x4c>
    70d4:	210f      	movs	r1, #15
    70d6:	4638      	mov	r0, r7
    70d8:	f7ff ff1e 	bl	6f18 <_Unwind_GetGR>
    70dc:	210e      	movs	r1, #14
    70de:	4602      	mov	r2, r0
    70e0:	4638      	mov	r0, r7
    70e2:	f7ff ff3d 	bl	6f60 <_Unwind_SetGR>
    70e6:	4638      	mov	r0, r7
    70e8:	4a6a      	ldr	r2, [pc, #424]	; (7294 <__gnu_unwind_pr_common+0x2a4>)
    70ea:	210f      	movs	r1, #15
    70ec:	f7ff ff38 	bl	6f60 <_Unwind_SetGR>
    70f0:	2007      	movs	r0, #7
    70f2:	e7a8      	b.n	7046 <__gnu_unwind_pr_common+0x56>
    70f4:	2000      	movs	r0, #0
    70f6:	e7ca      	b.n	708e <__gnu_unwind_pr_common+0x9e>
    70f8:	f8d4 9004 	ldr.w	r9, [r4, #4]
    70fc:	3408      	adds	r4, #8
    70fe:	e7b5      	b.n	706c <__gnu_unwind_pr_common+0x7c>
    7100:	0209      	lsls	r1, r1, #8
    7102:	2303      	movs	r3, #3
    7104:	9105      	str	r1, [sp, #20]
    7106:	f8ad 301c 	strh.w	r3, [sp, #28]
    710a:	e78a      	b.n	7022 <__gnu_unwind_pr_common+0x32>
    710c:	6823      	ldr	r3, [r4, #0]
    710e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    7112:	f1b8 0f00 	cmp.w	r8, #0
    7116:	d145      	bne.n	71a4 <__gnu_unwind_pr_common+0x1b4>
    7118:	b128      	cbz	r0, 7126 <__gnu_unwind_pr_common+0x136>
    711a:	9a02      	ldr	r2, [sp, #8]
    711c:	2a00      	cmp	r2, #0
    711e:	d05c      	beq.n	71da <__gnu_unwind_pr_common+0x1ea>
    7120:	f1bb 0f00 	cmp.w	fp, #0
    7124:	d074      	beq.n	7210 <__gnu_unwind_pr_common+0x220>
    7126:	2b00      	cmp	r3, #0
    7128:	da00      	bge.n	712c <__gnu_unwind_pr_common+0x13c>
    712a:	3404      	adds	r4, #4
    712c:	f10b 0b01 	add.w	fp, fp, #1
    7130:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    7134:	e7c0      	b.n	70b8 <__gnu_unwind_pr_common+0xc8>
    7136:	f1b8 0f00 	cmp.w	r8, #0
    713a:	d119      	bne.n	7170 <__gnu_unwind_pr_common+0x180>
    713c:	b1b0      	cbz	r0, 716c <__gnu_unwind_pr_common+0x17c>
    713e:	e9d4 2300 	ldrd	r2, r3, [r4]
    7142:	1c99      	adds	r1, r3, #2
    7144:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    7148:	f43f af7c 	beq.w	7044 <__gnu_unwind_pr_common+0x54>
    714c:	f105 0158 	add.w	r1, r5, #88	; 0x58
    7150:	3301      	adds	r3, #1
    7152:	9104      	str	r1, [sp, #16]
    7154:	f000 8090 	beq.w	7278 <__gnu_unwind_pr_common+0x288>
    7158:	1d20      	adds	r0, r4, #4
    715a:	f7ff fdc9 	bl	6cf0 <_Unwind_decode_typeinfo_ptr.isra.0>
    715e:	ab04      	add	r3, sp, #16
    7160:	4601      	mov	r1, r0
    7162:	4628      	mov	r0, r5
    7164:	f3af 8000 	nop.w
    7168:	2800      	cmp	r0, #0
    716a:	d15b      	bne.n	7224 <__gnu_unwind_pr_common+0x234>
    716c:	3408      	adds	r4, #8
    716e:	e7a3      	b.n	70b8 <__gnu_unwind_pr_common+0xc8>
    7170:	210d      	movs	r1, #13
    7172:	4638      	mov	r0, r7
    7174:	f8d5 9020 	ldr.w	r9, [r5, #32]
    7178:	f7ff fece 	bl	6f18 <_Unwind_GetGR>
    717c:	4581      	cmp	r9, r0
    717e:	d1f5      	bne.n	716c <__gnu_unwind_pr_common+0x17c>
    7180:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7182:	429c      	cmp	r4, r3
    7184:	d1f2      	bne.n	716c <__gnu_unwind_pr_common+0x17c>
    7186:	4620      	mov	r0, r4
    7188:	f7ff fcec 	bl	6b64 <selfrel_offset31>
    718c:	210f      	movs	r1, #15
    718e:	4602      	mov	r2, r0
    7190:	4638      	mov	r0, r7
    7192:	f7ff fee5 	bl	6f60 <_Unwind_SetGR>
    7196:	4638      	mov	r0, r7
    7198:	462a      	mov	r2, r5
    719a:	2100      	movs	r1, #0
    719c:	f7ff fee0 	bl	6f60 <_Unwind_SetGR>
    71a0:	2007      	movs	r0, #7
    71a2:	e750      	b.n	7046 <__gnu_unwind_pr_common+0x56>
    71a4:	210d      	movs	r1, #13
    71a6:	4638      	mov	r0, r7
    71a8:	f8d5 9020 	ldr.w	r9, [r5, #32]
    71ac:	f7ff feb4 	bl	6f18 <_Unwind_GetGR>
    71b0:	4581      	cmp	r9, r0
    71b2:	d001      	beq.n	71b8 <__gnu_unwind_pr_common+0x1c8>
    71b4:	6823      	ldr	r3, [r4, #0]
    71b6:	e7b6      	b.n	7126 <__gnu_unwind_pr_common+0x136>
    71b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71ba:	429c      	cmp	r4, r3
    71bc:	d1fa      	bne.n	71b4 <__gnu_unwind_pr_common+0x1c4>
    71be:	2204      	movs	r2, #4
    71c0:	2100      	movs	r1, #0
    71c2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    71c6:	18a3      	adds	r3, r4, r2
    71c8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    71cc:	636b      	str	r3, [r5, #52]	; 0x34
    71ce:	6823      	ldr	r3, [r4, #0]
    71d0:	428b      	cmp	r3, r1
    71d2:	db59      	blt.n	7288 <__gnu_unwind_pr_common+0x298>
    71d4:	2301      	movs	r3, #1
    71d6:	9301      	str	r3, [sp, #4]
    71d8:	e7a8      	b.n	712c <__gnu_unwind_pr_common+0x13c>
    71da:	f105 0358 	add.w	r3, r5, #88	; 0x58
    71de:	f8cd 800c 	str.w	r8, [sp, #12]
    71e2:	f104 0a04 	add.w	sl, r4, #4
    71e6:	46b0      	mov	r8, r6
    71e8:	4691      	mov	r9, r2
    71ea:	461e      	mov	r6, r3
    71ec:	e00d      	b.n	720a <__gnu_unwind_pr_common+0x21a>
    71ee:	9604      	str	r6, [sp, #16]
    71f0:	f7ff fd7e 	bl	6cf0 <_Unwind_decode_typeinfo_ptr.isra.0>
    71f4:	ab04      	add	r3, sp, #16
    71f6:	4601      	mov	r1, r0
    71f8:	2200      	movs	r2, #0
    71fa:	4628      	mov	r0, r5
    71fc:	f3af 8000 	nop.w
    7200:	f109 0901 	add.w	r9, r9, #1
    7204:	f10a 0a04 	add.w	sl, sl, #4
    7208:	b9e8      	cbnz	r0, 7246 <__gnu_unwind_pr_common+0x256>
    720a:	45d9      	cmp	r9, fp
    720c:	4650      	mov	r0, sl
    720e:	d1ee      	bne.n	71ee <__gnu_unwind_pr_common+0x1fe>
    7210:	4638      	mov	r0, r7
    7212:	210d      	movs	r1, #13
    7214:	f7ff fe80 	bl	6f18 <_Unwind_GetGR>
    7218:	9b04      	ldr	r3, [sp, #16]
    721a:	6228      	str	r0, [r5, #32]
    721c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    7220:	2006      	movs	r0, #6
    7222:	e710      	b.n	7046 <__gnu_unwind_pr_common+0x56>
    7224:	4681      	mov	r9, r0
    7226:	210d      	movs	r1, #13
    7228:	4638      	mov	r0, r7
    722a:	f7ff fe75 	bl	6f18 <_Unwind_GetGR>
    722e:	f1b9 0f02 	cmp.w	r9, #2
    7232:	6228      	str	r0, [r5, #32]
    7234:	d125      	bne.n	7282 <__gnu_unwind_pr_common+0x292>
    7236:	462b      	mov	r3, r5
    7238:	9a04      	ldr	r2, [sp, #16]
    723a:	f843 2f2c 	str.w	r2, [r3, #44]!
    723e:	626b      	str	r3, [r5, #36]	; 0x24
    7240:	62ac      	str	r4, [r5, #40]	; 0x28
    7242:	2006      	movs	r0, #6
    7244:	e6ff      	b.n	7046 <__gnu_unwind_pr_common+0x56>
    7246:	4646      	mov	r6, r8
    7248:	6823      	ldr	r3, [r4, #0]
    724a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    724e:	e76a      	b.n	7126 <__gnu_unwind_pr_common+0x136>
    7250:	4620      	mov	r0, r4
    7252:	f7ff fc87 	bl	6b64 <selfrel_offset31>
    7256:	3404      	adds	r4, #4
    7258:	4602      	mov	r2, r0
    725a:	63ac      	str	r4, [r5, #56]	; 0x38
    725c:	4628      	mov	r0, r5
    725e:	4614      	mov	r4, r2
    7260:	f3af 8000 	nop.w
    7264:	2800      	cmp	r0, #0
    7266:	f43f aeed 	beq.w	7044 <__gnu_unwind_pr_common+0x54>
    726a:	4638      	mov	r0, r7
    726c:	4622      	mov	r2, r4
    726e:	210f      	movs	r1, #15
    7270:	f7ff fe76 	bl	6f60 <_Unwind_SetGR>
    7274:	2007      	movs	r0, #7
    7276:	e6e6      	b.n	7046 <__gnu_unwind_pr_common+0x56>
    7278:	4638      	mov	r0, r7
    727a:	210d      	movs	r1, #13
    727c:	f7ff fe4c 	bl	6f18 <_Unwind_GetGR>
    7280:	6228      	str	r0, [r5, #32]
    7282:	9b04      	ldr	r3, [sp, #16]
    7284:	626b      	str	r3, [r5, #36]	; 0x24
    7286:	e7db      	b.n	7240 <__gnu_unwind_pr_common+0x250>
    7288:	f10b 0001 	add.w	r0, fp, #1
    728c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7290:	e77a      	b.n	7188 <__gnu_unwind_pr_common+0x198>
    7292:	bf00      	nop
    7294:	00000000 	.word	0x00000000

00007298 <__aeabi_unwind_cpp_pr0>:
    7298:	2300      	movs	r3, #0
    729a:	e6a9      	b.n	6ff0 <__gnu_unwind_pr_common>

0000729c <__aeabi_unwind_cpp_pr1>:
    729c:	2301      	movs	r3, #1
    729e:	e6a7      	b.n	6ff0 <__gnu_unwind_pr_common>

000072a0 <__aeabi_unwind_cpp_pr2>:
    72a0:	2302      	movs	r3, #2
    72a2:	e6a5      	b.n	6ff0 <__gnu_unwind_pr_common>

000072a4 <_Unwind_VRS_Pop>:
    72a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    72a8:	4606      	mov	r6, r0
    72aa:	b0c3      	sub	sp, #268	; 0x10c
    72ac:	4615      	mov	r5, r2
    72ae:	461c      	mov	r4, r3
    72b0:	2904      	cmp	r1, #4
    72b2:	f200 80b9 	bhi.w	7428 <_Unwind_VRS_Pop+0x184>
    72b6:	e8df f001 	tbb	[pc, r1]
    72ba:	539a      	.short	0x539a
    72bc:	29b7      	.short	0x29b7
    72be:	03          	.byte	0x03
    72bf:	00          	.byte	0x00
    72c0:	2c00      	cmp	r4, #0
    72c2:	f040 80b1 	bne.w	7428 <_Unwind_VRS_Pop+0x184>
    72c6:	2a10      	cmp	r2, #16
    72c8:	f200 80ae 	bhi.w	7428 <_Unwind_VRS_Pop+0x184>
    72cc:	6803      	ldr	r3, [r0, #0]
    72ce:	06d8      	lsls	r0, r3, #27
    72d0:	f100 80f3 	bmi.w	74ba <_Unwind_VRS_Pop+0x216>
    72d4:	af20      	add	r7, sp, #128	; 0x80
    72d6:	4638      	mov	r0, r7
    72d8:	f000 f992 	bl	7600 <__gnu_Unwind_Save_WMMXC>
    72dc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    72de:	2300      	movs	r3, #0
    72e0:	2401      	movs	r4, #1
    72e2:	fa04 f203 	lsl.w	r2, r4, r3
    72e6:	422a      	tst	r2, r5
    72e8:	4601      	mov	r1, r0
    72ea:	d004      	beq.n	72f6 <_Unwind_VRS_Pop+0x52>
    72ec:	f851 2b04 	ldr.w	r2, [r1], #4
    72f0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    72f4:	4608      	mov	r0, r1
    72f6:	3301      	adds	r3, #1
    72f8:	2b04      	cmp	r3, #4
    72fa:	d1f2      	bne.n	72e2 <_Unwind_VRS_Pop+0x3e>
    72fc:	63b0      	str	r0, [r6, #56]	; 0x38
    72fe:	4638      	mov	r0, r7
    7300:	f000 f974 	bl	75ec <__gnu_Unwind_Restore_WMMXC>
    7304:	2000      	movs	r0, #0
    7306:	b043      	add	sp, #268	; 0x10c
    7308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    730c:	2c03      	cmp	r4, #3
    730e:	f040 808b 	bne.w	7428 <_Unwind_VRS_Pop+0x184>
    7312:	b294      	uxth	r4, r2
    7314:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    7318:	2b10      	cmp	r3, #16
    731a:	ea4f 4512 	mov.w	r5, r2, lsr #16
    731e:	f200 8083 	bhi.w	7428 <_Unwind_VRS_Pop+0x184>
    7322:	6803      	ldr	r3, [r0, #0]
    7324:	071f      	lsls	r7, r3, #28
    7326:	f100 80d0 	bmi.w	74ca <_Unwind_VRS_Pop+0x226>
    732a:	af20      	add	r7, sp, #128	; 0x80
    732c:	4638      	mov	r0, r7
    732e:	f000 f93b 	bl	75a8 <__gnu_Unwind_Save_WMMXD>
    7332:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    7336:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    7338:	b154      	cbz	r4, 7350 <_Unwind_VRS_Pop+0xac>
    733a:	460b      	mov	r3, r1
    733c:	1ae8      	subs	r0, r5, r3
    733e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    7342:	00e4      	lsls	r4, r4, #3
    7344:	581a      	ldr	r2, [r3, r0]
    7346:	f843 2b04 	str.w	r2, [r3], #4
    734a:	428b      	cmp	r3, r1
    734c:	d1fa      	bne.n	7344 <_Unwind_VRS_Pop+0xa0>
    734e:	4425      	add	r5, r4
    7350:	4638      	mov	r0, r7
    7352:	63b5      	str	r5, [r6, #56]	; 0x38
    7354:	f000 f906 	bl	7564 <__gnu_Unwind_Restore_WMMXD>
    7358:	2000      	movs	r0, #0
    735a:	b043      	add	sp, #268	; 0x10c
    735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7360:	2c01      	cmp	r4, #1
    7362:	ea4f 4812 	mov.w	r8, r2, lsr #16
    7366:	b295      	uxth	r5, r2
    7368:	d05a      	beq.n	7420 <_Unwind_VRS_Pop+0x17c>
    736a:	2c05      	cmp	r4, #5
    736c:	d15c      	bne.n	7428 <_Unwind_VRS_Pop+0x184>
    736e:	eb08 0905 	add.w	r9, r8, r5
    7372:	f1b9 0f20 	cmp.w	r9, #32
    7376:	d857      	bhi.n	7428 <_Unwind_VRS_Pop+0x184>
    7378:	f1b8 0f0f 	cmp.w	r8, #15
    737c:	d977      	bls.n	746e <_Unwind_VRS_Pop+0x1ca>
    737e:	46a9      	mov	r9, r5
    7380:	2d00      	cmp	r5, #0
    7382:	f040 8088 	bne.w	7496 <_Unwind_VRS_Pop+0x1f2>
    7386:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7388:	b36d      	cbz	r5, 73e6 <_Unwind_VRS_Pop+0x142>
    738a:	af20      	add	r7, sp, #128	; 0x80
    738c:	f04f 0900 	mov.w	r9, #0
    7390:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    7394:	3f04      	subs	r7, #4
    7396:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    739a:	f853 1b04 	ldr.w	r1, [r3], #4
    739e:	f847 1f04 	str.w	r1, [r7, #4]!
    73a2:	42ab      	cmp	r3, r5
    73a4:	d1f9      	bne.n	739a <_Unwind_VRS_Pop+0xf6>
    73a6:	f1b9 0f00 	cmp.w	r9, #0
    73aa:	d00f      	beq.n	73cc <_Unwind_VRS_Pop+0x128>
    73ac:	466f      	mov	r7, sp
    73ae:	4641      	mov	r1, r8
    73b0:	2910      	cmp	r1, #16
    73b2:	bf38      	it	cc
    73b4:	2110      	movcc	r1, #16
    73b6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    73ba:	3984      	subs	r1, #132	; 0x84
    73bc:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    73c0:	f853 0b04 	ldr.w	r0, [r3], #4
    73c4:	f841 0f04 	str.w	r0, [r1, #4]!
    73c8:	42ab      	cmp	r3, r5
    73ca:	d1f9      	bne.n	73c0 <_Unwind_VRS_Pop+0x11c>
    73cc:	2c01      	cmp	r4, #1
    73ce:	f000 8084 	beq.w	74da <_Unwind_VRS_Pop+0x236>
    73d2:	f1b8 0f0f 	cmp.w	r8, #15
    73d6:	63b5      	str	r5, [r6, #56]	; 0x38
    73d8:	d945      	bls.n	7466 <_Unwind_VRS_Pop+0x1c2>
    73da:	f1b9 0f00 	cmp.w	r9, #0
    73de:	d002      	beq.n	73e6 <_Unwind_VRS_Pop+0x142>
    73e0:	4668      	mov	r0, sp
    73e2:	f000 f8b7 	bl	7554 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    73e6:	2000      	movs	r0, #0
    73e8:	b043      	add	sp, #268	; 0x10c
    73ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    73ee:	b9dc      	cbnz	r4, 7428 <_Unwind_VRS_Pop+0x184>
    73f0:	6b87      	ldr	r7, [r0, #56]	; 0x38
    73f2:	4623      	mov	r3, r4
    73f4:	2001      	movs	r0, #1
    73f6:	b294      	uxth	r4, r2
    73f8:	f106 0c04 	add.w	ip, r6, #4
    73fc:	fa00 f203 	lsl.w	r2, r0, r3
    7400:	4222      	tst	r2, r4
    7402:	4639      	mov	r1, r7
    7404:	d004      	beq.n	7410 <_Unwind_VRS_Pop+0x16c>
    7406:	f851 2b04 	ldr.w	r2, [r1], #4
    740a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    740e:	460f      	mov	r7, r1
    7410:	3301      	adds	r3, #1
    7412:	2b10      	cmp	r3, #16
    7414:	d1f2      	bne.n	73fc <_Unwind_VRS_Pop+0x158>
    7416:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    741a:	d1e4      	bne.n	73e6 <_Unwind_VRS_Pop+0x142>
    741c:	63b7      	str	r7, [r6, #56]	; 0x38
    741e:	e004      	b.n	742a <_Unwind_VRS_Pop+0x186>
    7420:	eb08 0305 	add.w	r3, r8, r5
    7424:	2b10      	cmp	r3, #16
    7426:	d903      	bls.n	7430 <_Unwind_VRS_Pop+0x18c>
    7428:	2002      	movs	r0, #2
    742a:	b043      	add	sp, #268	; 0x10c
    742c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7430:	f1b8 0f0f 	cmp.w	r8, #15
    7434:	d8f8      	bhi.n	7428 <_Unwind_VRS_Pop+0x184>
    7436:	6833      	ldr	r3, [r6, #0]
    7438:	07da      	lsls	r2, r3, #31
    743a:	d506      	bpl.n	744a <_Unwind_VRS_Pop+0x1a6>
    743c:	4630      	mov	r0, r6
    743e:	f023 0303 	bic.w	r3, r3, #3
    7442:	f840 3b48 	str.w	r3, [r0], #72
    7446:	f000 f879 	bl	753c <__gnu_Unwind_Save_VFP>
    744a:	af20      	add	r7, sp, #128	; 0x80
    744c:	4638      	mov	r0, r7
    744e:	f000 f875 	bl	753c <__gnu_Unwind_Save_VFP>
    7452:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7454:	2d00      	cmp	r5, #0
    7456:	d199      	bne.n	738c <_Unwind_VRS_Pop+0xe8>
    7458:	461d      	mov	r5, r3
    745a:	3504      	adds	r5, #4
    745c:	63b5      	str	r5, [r6, #56]	; 0x38
    745e:	4638      	mov	r0, r7
    7460:	f000 f868 	bl	7534 <__gnu_Unwind_Restore_VFP>
    7464:	e7bf      	b.n	73e6 <_Unwind_VRS_Pop+0x142>
    7466:	a820      	add	r0, sp, #128	; 0x80
    7468:	f000 f86c 	bl	7544 <__gnu_Unwind_Restore_VFP_D>
    746c:	e7b5      	b.n	73da <_Unwind_VRS_Pop+0x136>
    746e:	f1b9 0f10 	cmp.w	r9, #16
    7472:	d940      	bls.n	74f6 <_Unwind_VRS_Pop+0x252>
    7474:	f1a9 0910 	sub.w	r9, r9, #16
    7478:	6833      	ldr	r3, [r6, #0]
    747a:	07d9      	lsls	r1, r3, #31
    747c:	d508      	bpl.n	7490 <_Unwind_VRS_Pop+0x1ec>
    747e:	f023 0301 	bic.w	r3, r3, #1
    7482:	4630      	mov	r0, r6
    7484:	f043 0302 	orr.w	r3, r3, #2
    7488:	f840 3b48 	str.w	r3, [r0], #72
    748c:	f000 f85e 	bl	754c <__gnu_Unwind_Save_VFP_D>
    7490:	f1b9 0f00 	cmp.w	r9, #0
    7494:	d032      	beq.n	74fc <_Unwind_VRS_Pop+0x258>
    7496:	6833      	ldr	r3, [r6, #0]
    7498:	075a      	lsls	r2, r3, #29
    749a:	d420      	bmi.n	74de <_Unwind_VRS_Pop+0x23a>
    749c:	f1b8 0f0f 	cmp.w	r8, #15
    74a0:	d925      	bls.n	74ee <_Unwind_VRS_Pop+0x24a>
    74a2:	466f      	mov	r7, sp
    74a4:	4638      	mov	r0, r7
    74a6:	f1c8 0510 	rsb	r5, r8, #16
    74aa:	f000 f857 	bl	755c <__gnu_Unwind_Save_VFP_D_16_to_31>
    74ae:	2d00      	cmp	r5, #0
    74b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    74b2:	f77f af7c 	ble.w	73ae <_Unwind_VRS_Pop+0x10a>
    74b6:	af20      	add	r7, sp, #128	; 0x80
    74b8:	e76a      	b.n	7390 <_Unwind_VRS_Pop+0xec>
    74ba:	f023 0310 	bic.w	r3, r3, #16
    74be:	6033      	str	r3, [r6, #0]
    74c0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    74c4:	f000 f89c 	bl	7600 <__gnu_Unwind_Save_WMMXC>
    74c8:	e704      	b.n	72d4 <_Unwind_VRS_Pop+0x30>
    74ca:	f023 0308 	bic.w	r3, r3, #8
    74ce:	6003      	str	r3, [r0, #0]
    74d0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    74d4:	f000 f868 	bl	75a8 <__gnu_Unwind_Save_WMMXD>
    74d8:	e727      	b.n	732a <_Unwind_VRS_Pop+0x86>
    74da:	af20      	add	r7, sp, #128	; 0x80
    74dc:	e7bd      	b.n	745a <_Unwind_VRS_Pop+0x1b6>
    74de:	4630      	mov	r0, r6
    74e0:	f023 0304 	bic.w	r3, r3, #4
    74e4:	f840 3bd0 	str.w	r3, [r0], #208
    74e8:	f000 f838 	bl	755c <__gnu_Unwind_Save_VFP_D_16_to_31>
    74ec:	e7d6      	b.n	749c <_Unwind_VRS_Pop+0x1f8>
    74ee:	a820      	add	r0, sp, #128	; 0x80
    74f0:	f000 f82c 	bl	754c <__gnu_Unwind_Save_VFP_D>
    74f4:	e7d5      	b.n	74a2 <_Unwind_VRS_Pop+0x1fe>
    74f6:	f04f 0900 	mov.w	r9, #0
    74fa:	e7bd      	b.n	7478 <_Unwind_VRS_Pop+0x1d4>
    74fc:	f1b8 0f0f 	cmp.w	r8, #15
    7500:	f63f af41 	bhi.w	7386 <_Unwind_VRS_Pop+0xe2>
    7504:	af20      	add	r7, sp, #128	; 0x80
    7506:	4638      	mov	r0, r7
    7508:	f000 f820 	bl	754c <__gnu_Unwind_Save_VFP_D>
    750c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    750e:	2d00      	cmp	r5, #0
    7510:	f47f af3c 	bne.w	738c <_Unwind_VRS_Pop+0xe8>
    7514:	4638      	mov	r0, r7
    7516:	f000 f815 	bl	7544 <__gnu_Unwind_Restore_VFP_D>
    751a:	e764      	b.n	73e6 <_Unwind_VRS_Pop+0x142>

0000751c <__restore_core_regs>:
    751c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    7520:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    7524:	469c      	mov	ip, r3
    7526:	46a6      	mov	lr, r4
    7528:	f84c 5d04 	str.w	r5, [ip, #-4]!
    752c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    7530:	46e5      	mov	sp, ip
    7532:	bd00      	pop	{pc}

00007534 <__gnu_Unwind_Restore_VFP>:
    7534:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    7538:	4770      	bx	lr
    753a:	bf00      	nop

0000753c <__gnu_Unwind_Save_VFP>:
    753c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    7540:	4770      	bx	lr
    7542:	bf00      	nop

00007544 <__gnu_Unwind_Restore_VFP_D>:
    7544:	ec90 0b20 	vldmia	r0, {d0-d15}
    7548:	4770      	bx	lr
    754a:	bf00      	nop

0000754c <__gnu_Unwind_Save_VFP_D>:
    754c:	ec80 0b20 	vstmia	r0, {d0-d15}
    7550:	4770      	bx	lr
    7552:	bf00      	nop

00007554 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7554:	ecd0 0b20 	vldmia	r0, {d16-d31}
    7558:	4770      	bx	lr
    755a:	bf00      	nop

0000755c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    755c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    7560:	4770      	bx	lr
    7562:	bf00      	nop

00007564 <__gnu_Unwind_Restore_WMMXD>:
    7564:	ecf0 0102 	ldfe	f0, [r0], #8
    7568:	ecf0 1102 	ldfe	f1, [r0], #8
    756c:	ecf0 2102 	ldfe	f2, [r0], #8
    7570:	ecf0 3102 	ldfe	f3, [r0], #8
    7574:	ecf0 4102 	ldfe	f4, [r0], #8
    7578:	ecf0 5102 	ldfe	f5, [r0], #8
    757c:	ecf0 6102 	ldfe	f6, [r0], #8
    7580:	ecf0 7102 	ldfe	f7, [r0], #8
    7584:	ecf0 8102 	ldfp	f0, [r0], #8
    7588:	ecf0 9102 	ldfp	f1, [r0], #8
    758c:	ecf0 a102 	ldfp	f2, [r0], #8
    7590:	ecf0 b102 	ldfp	f3, [r0], #8
    7594:	ecf0 c102 	ldfp	f4, [r0], #8
    7598:	ecf0 d102 	ldfp	f5, [r0], #8
    759c:	ecf0 e102 	ldfp	f6, [r0], #8
    75a0:	ecf0 f102 	ldfp	f7, [r0], #8
    75a4:	4770      	bx	lr
    75a6:	bf00      	nop

000075a8 <__gnu_Unwind_Save_WMMXD>:
    75a8:	ece0 0102 	stfe	f0, [r0], #8
    75ac:	ece0 1102 	stfe	f1, [r0], #8
    75b0:	ece0 2102 	stfe	f2, [r0], #8
    75b4:	ece0 3102 	stfe	f3, [r0], #8
    75b8:	ece0 4102 	stfe	f4, [r0], #8
    75bc:	ece0 5102 	stfe	f5, [r0], #8
    75c0:	ece0 6102 	stfe	f6, [r0], #8
    75c4:	ece0 7102 	stfe	f7, [r0], #8
    75c8:	ece0 8102 	stfp	f0, [r0], #8
    75cc:	ece0 9102 	stfp	f1, [r0], #8
    75d0:	ece0 a102 	stfp	f2, [r0], #8
    75d4:	ece0 b102 	stfp	f3, [r0], #8
    75d8:	ece0 c102 	stfp	f4, [r0], #8
    75dc:	ece0 d102 	stfp	f5, [r0], #8
    75e0:	ece0 e102 	stfp	f6, [r0], #8
    75e4:	ece0 f102 	stfp	f7, [r0], #8
    75e8:	4770      	bx	lr
    75ea:	bf00      	nop

000075ec <__gnu_Unwind_Restore_WMMXC>:
    75ec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    75f0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    75f4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    75f8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    75fc:	4770      	bx	lr
    75fe:	bf00      	nop

00007600 <__gnu_Unwind_Save_WMMXC>:
    7600:	fca0 8101 	stc2	1, cr8, [r0], #4
    7604:	fca0 9101 	stc2	1, cr9, [r0], #4
    7608:	fca0 a101 	stc2	1, cr10, [r0], #4
    760c:	fca0 b101 	stc2	1, cr11, [r0], #4
    7610:	4770      	bx	lr
    7612:	bf00      	nop

00007614 <_Unwind_RaiseException>:
    7614:	46ec      	mov	ip, sp
    7616:	b500      	push	{lr}
    7618:	e92d 5000 	stmdb	sp!, {ip, lr}
    761c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7620:	f04f 0300 	mov.w	r3, #0
    7624:	e92d 000c 	stmdb	sp!, {r2, r3}
    7628:	a901      	add	r1, sp, #4
    762a:	f7ff fbf1 	bl	6e10 <__gnu_Unwind_RaiseException>
    762e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7632:	b012      	add	sp, #72	; 0x48
    7634:	4770      	bx	lr
    7636:	bf00      	nop

00007638 <_Unwind_Resume>:
    7638:	46ec      	mov	ip, sp
    763a:	b500      	push	{lr}
    763c:	e92d 5000 	stmdb	sp!, {ip, lr}
    7640:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7644:	f04f 0300 	mov.w	r3, #0
    7648:	e92d 000c 	stmdb	sp!, {r2, r3}
    764c:	a901      	add	r1, sp, #4
    764e:	f7ff fc19 	bl	6e84 <__gnu_Unwind_Resume>
    7652:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    7656:	b012      	add	sp, #72	; 0x48
    7658:	4770      	bx	lr
    765a:	bf00      	nop

0000765c <_Unwind_Resume_or_Rethrow>:
    765c:	46ec      	mov	ip, sp
    765e:	b500      	push	{lr}
    7660:	e92d 5000 	stmdb	sp!, {ip, lr}
    7664:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    7668:	f04f 0300 	mov.w	r3, #0
    766c:	e92d 000c 	stmdb	sp!, {r2, r3}
    7670:	a901      	add	r1, sp, #4
    7672:	f7ff fc29 	bl	6ec8 <__gnu_Unwind_Resume_or_Rethrow>
    7676:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    767a:	b012      	add	sp, #72	; 0x48
    767c:	4770      	bx	lr
    767e:	bf00      	nop

00007680 <_Unwind_ForcedUnwind>:
    7680:	46ec      	mov	ip, sp
    7682:	b500      	push	{lr}
    7684:	e92d 5000 	stmdb	sp!, {ip, lr}
    7688:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    768c:	f04f 0300 	mov.w	r3, #0
    7690:	e92d 000c 	stmdb	sp!, {r2, r3}
    7694:	ab01      	add	r3, sp, #4
    7696:	f7ff fbeb 	bl	6e70 <__gnu_Unwind_ForcedUnwind>
    769a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    769e:	b012      	add	sp, #72	; 0x48
    76a0:	4770      	bx	lr
    76a2:	bf00      	nop

000076a4 <_Unwind_Backtrace>:
    76a4:	46ec      	mov	ip, sp
    76a6:	b500      	push	{lr}
    76a8:	e92d 5000 	stmdb	sp!, {ip, lr}
    76ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    76b0:	f04f 0300 	mov.w	r3, #0
    76b4:	e92d 000c 	stmdb	sp!, {r2, r3}
    76b8:	aa01      	add	r2, sp, #4
    76ba:	f7ff fc5d 	bl	6f78 <__gnu_Unwind_Backtrace>
    76be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    76c2:	b012      	add	sp, #72	; 0x48
    76c4:	4770      	bx	lr
    76c6:	bf00      	nop

000076c8 <next_unwind_byte>:
    76c8:	7a02      	ldrb	r2, [r0, #8]
    76ca:	b97a      	cbnz	r2, 76ec <next_unwind_byte+0x24>
    76cc:	7a43      	ldrb	r3, [r0, #9]
    76ce:	b1a3      	cbz	r3, 76fa <next_unwind_byte+0x32>
    76d0:	6842      	ldr	r2, [r0, #4]
    76d2:	3b01      	subs	r3, #1
    76d4:	b410      	push	{r4}
    76d6:	7243      	strb	r3, [r0, #9]
    76d8:	6813      	ldr	r3, [r2, #0]
    76da:	2103      	movs	r1, #3
    76dc:	1d14      	adds	r4, r2, #4
    76de:	7201      	strb	r1, [r0, #8]
    76e0:	021a      	lsls	r2, r3, #8
    76e2:	6044      	str	r4, [r0, #4]
    76e4:	6002      	str	r2, [r0, #0]
    76e6:	bc10      	pop	{r4}
    76e8:	0e18      	lsrs	r0, r3, #24
    76ea:	4770      	bx	lr
    76ec:	6803      	ldr	r3, [r0, #0]
    76ee:	3a01      	subs	r2, #1
    76f0:	7202      	strb	r2, [r0, #8]
    76f2:	021a      	lsls	r2, r3, #8
    76f4:	6002      	str	r2, [r0, #0]
    76f6:	0e18      	lsrs	r0, r3, #24
    76f8:	4770      	bx	lr
    76fa:	20b0      	movs	r0, #176	; 0xb0
    76fc:	4770      	bx	lr
    76fe:	bf00      	nop

00007700 <_Unwind_GetGR.constprop.0>:
    7700:	b500      	push	{lr}
    7702:	b085      	sub	sp, #20
    7704:	aa03      	add	r2, sp, #12
    7706:	2300      	movs	r3, #0
    7708:	9200      	str	r2, [sp, #0]
    770a:	4619      	mov	r1, r3
    770c:	220c      	movs	r2, #12
    770e:	f7ff fbeb 	bl	6ee8 <_Unwind_VRS_Get>
    7712:	9803      	ldr	r0, [sp, #12]
    7714:	b005      	add	sp, #20
    7716:	f85d fb04 	ldr.w	pc, [sp], #4
    771a:	bf00      	nop

0000771c <unwind_UCB_from_context>:
    771c:	e7f0      	b.n	7700 <_Unwind_GetGR.constprop.0>
    771e:	bf00      	nop

00007720 <__gnu_unwind_execute>:
    7720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7724:	4605      	mov	r5, r0
    7726:	b085      	sub	sp, #20
    7728:	460e      	mov	r6, r1
    772a:	f04f 0800 	mov.w	r8, #0
    772e:	4630      	mov	r0, r6
    7730:	f7ff ffca 	bl	76c8 <next_unwind_byte>
    7734:	28b0      	cmp	r0, #176	; 0xb0
    7736:	4604      	mov	r4, r0
    7738:	f000 80b2 	beq.w	78a0 <__gnu_unwind_execute+0x180>
    773c:	0607      	lsls	r7, r0, #24
    773e:	d520      	bpl.n	7782 <__gnu_unwind_execute+0x62>
    7740:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    7744:	2b80      	cmp	r3, #128	; 0x80
    7746:	d04d      	beq.n	77e4 <__gnu_unwind_execute+0xc4>
    7748:	2b90      	cmp	r3, #144	; 0x90
    774a:	d036      	beq.n	77ba <__gnu_unwind_execute+0x9a>
    774c:	2ba0      	cmp	r3, #160	; 0xa0
    774e:	d060      	beq.n	7812 <__gnu_unwind_execute+0xf2>
    7750:	2bb0      	cmp	r3, #176	; 0xb0
    7752:	d074      	beq.n	783e <__gnu_unwind_execute+0x11e>
    7754:	2bc0      	cmp	r3, #192	; 0xc0
    7756:	f000 808b 	beq.w	7870 <__gnu_unwind_execute+0x150>
    775a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    775e:	2bd0      	cmp	r3, #208	; 0xd0
    7760:	d10b      	bne.n	777a <__gnu_unwind_execute+0x5a>
    7762:	f000 0207 	and.w	r2, r0, #7
    7766:	3201      	adds	r2, #1
    7768:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    776c:	2305      	movs	r3, #5
    776e:	2101      	movs	r1, #1
    7770:	4628      	mov	r0, r5
    7772:	f7ff fd97 	bl	72a4 <_Unwind_VRS_Pop>
    7776:	2800      	cmp	r0, #0
    7778:	d0d9      	beq.n	772e <__gnu_unwind_execute+0xe>
    777a:	2009      	movs	r0, #9
    777c:	b005      	add	sp, #20
    777e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7782:	f10d 090c 	add.w	r9, sp, #12
    7786:	2300      	movs	r3, #0
    7788:	4619      	mov	r1, r3
    778a:	0087      	lsls	r7, r0, #2
    778c:	f8cd 9000 	str.w	r9, [sp]
    7790:	220d      	movs	r2, #13
    7792:	4628      	mov	r0, r5
    7794:	f7ff fba8 	bl	6ee8 <_Unwind_VRS_Get>
    7798:	b2ff      	uxtb	r7, r7
    779a:	9b03      	ldr	r3, [sp, #12]
    779c:	f8cd 9000 	str.w	r9, [sp]
    77a0:	3704      	adds	r7, #4
    77a2:	0660      	lsls	r0, r4, #25
    77a4:	bf4c      	ite	mi
    77a6:	1bdf      	submi	r7, r3, r7
    77a8:	18ff      	addpl	r7, r7, r3
    77aa:	2300      	movs	r3, #0
    77ac:	4619      	mov	r1, r3
    77ae:	220d      	movs	r2, #13
    77b0:	4628      	mov	r0, r5
    77b2:	9703      	str	r7, [sp, #12]
    77b4:	f7ff fbbc 	bl	6f30 <_Unwind_VRS_Set>
    77b8:	e7b9      	b.n	772e <__gnu_unwind_execute+0xe>
    77ba:	f000 030d 	and.w	r3, r0, #13
    77be:	2b0d      	cmp	r3, #13
    77c0:	d0db      	beq.n	777a <__gnu_unwind_execute+0x5a>
    77c2:	af03      	add	r7, sp, #12
    77c4:	2300      	movs	r3, #0
    77c6:	f000 020f 	and.w	r2, r0, #15
    77ca:	4619      	mov	r1, r3
    77cc:	9700      	str	r7, [sp, #0]
    77ce:	4628      	mov	r0, r5
    77d0:	f7ff fb8a 	bl	6ee8 <_Unwind_VRS_Get>
    77d4:	2300      	movs	r3, #0
    77d6:	9700      	str	r7, [sp, #0]
    77d8:	4619      	mov	r1, r3
    77da:	220d      	movs	r2, #13
    77dc:	4628      	mov	r0, r5
    77de:	f7ff fba7 	bl	6f30 <_Unwind_VRS_Set>
    77e2:	e7a4      	b.n	772e <__gnu_unwind_execute+0xe>
    77e4:	4630      	mov	r0, r6
    77e6:	f7ff ff6f 	bl	76c8 <next_unwind_byte>
    77ea:	0224      	lsls	r4, r4, #8
    77ec:	4320      	orrs	r0, r4
    77ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    77f2:	d0c2      	beq.n	777a <__gnu_unwind_execute+0x5a>
    77f4:	0104      	lsls	r4, r0, #4
    77f6:	2300      	movs	r3, #0
    77f8:	b2a2      	uxth	r2, r4
    77fa:	4619      	mov	r1, r3
    77fc:	4628      	mov	r0, r5
    77fe:	f7ff fd51 	bl	72a4 <_Unwind_VRS_Pop>
    7802:	2800      	cmp	r0, #0
    7804:	d1b9      	bne.n	777a <__gnu_unwind_execute+0x5a>
    7806:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    780a:	bf18      	it	ne
    780c:	f04f 0801 	movne.w	r8, #1
    7810:	e78d      	b.n	772e <__gnu_unwind_execute+0xe>
    7812:	43c2      	mvns	r2, r0
    7814:	f002 0307 	and.w	r3, r2, #7
    7818:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    781c:	411a      	asrs	r2, r3
    781e:	0701      	lsls	r1, r0, #28
    7820:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    7824:	f04f 0300 	mov.w	r3, #0
    7828:	bf48      	it	mi
    782a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    782e:	4619      	mov	r1, r3
    7830:	4628      	mov	r0, r5
    7832:	f7ff fd37 	bl	72a4 <_Unwind_VRS_Pop>
    7836:	2800      	cmp	r0, #0
    7838:	f43f af79 	beq.w	772e <__gnu_unwind_execute+0xe>
    783c:	e79d      	b.n	777a <__gnu_unwind_execute+0x5a>
    783e:	28b1      	cmp	r0, #177	; 0xb1
    7840:	d033      	beq.n	78aa <__gnu_unwind_execute+0x18a>
    7842:	28b2      	cmp	r0, #178	; 0xb2
    7844:	f000 808b 	beq.w	795e <__gnu_unwind_execute+0x23e>
    7848:	28b3      	cmp	r0, #179	; 0xb3
    784a:	d039      	beq.n	78c0 <__gnu_unwind_execute+0x1a0>
    784c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    7850:	2bb4      	cmp	r3, #180	; 0xb4
    7852:	d092      	beq.n	777a <__gnu_unwind_execute+0x5a>
    7854:	f000 0207 	and.w	r2, r0, #7
    7858:	3201      	adds	r2, #1
    785a:	2301      	movs	r3, #1
    785c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    7860:	4619      	mov	r1, r3
    7862:	4628      	mov	r0, r5
    7864:	f7ff fd1e 	bl	72a4 <_Unwind_VRS_Pop>
    7868:	2800      	cmp	r0, #0
    786a:	f43f af60 	beq.w	772e <__gnu_unwind_execute+0xe>
    786e:	e784      	b.n	777a <__gnu_unwind_execute+0x5a>
    7870:	28c6      	cmp	r0, #198	; 0xc6
    7872:	d042      	beq.n	78fa <__gnu_unwind_execute+0x1da>
    7874:	28c7      	cmp	r0, #199	; 0xc7
    7876:	d04c      	beq.n	7912 <__gnu_unwind_execute+0x1f2>
    7878:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    787c:	2bc0      	cmp	r3, #192	; 0xc0
    787e:	d05b      	beq.n	7938 <__gnu_unwind_execute+0x218>
    7880:	28c8      	cmp	r0, #200	; 0xc8
    7882:	d060      	beq.n	7946 <__gnu_unwind_execute+0x226>
    7884:	28c9      	cmp	r0, #201	; 0xc9
    7886:	f47f af78 	bne.w	777a <__gnu_unwind_execute+0x5a>
    788a:	4630      	mov	r0, r6
    788c:	f7ff ff1c 	bl	76c8 <next_unwind_byte>
    7890:	0302      	lsls	r2, r0, #12
    7892:	f000 000f 	and.w	r0, r0, #15
    7896:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    789a:	3001      	adds	r0, #1
    789c:	4302      	orrs	r2, r0
    789e:	e765      	b.n	776c <__gnu_unwind_execute+0x4c>
    78a0:	f1b8 0f00 	cmp.w	r8, #0
    78a4:	d018      	beq.n	78d8 <__gnu_unwind_execute+0x1b8>
    78a6:	2000      	movs	r0, #0
    78a8:	e768      	b.n	777c <__gnu_unwind_execute+0x5c>
    78aa:	4630      	mov	r0, r6
    78ac:	f7ff ff0c 	bl	76c8 <next_unwind_byte>
    78b0:	4602      	mov	r2, r0
    78b2:	2800      	cmp	r0, #0
    78b4:	f43f af61 	beq.w	777a <__gnu_unwind_execute+0x5a>
    78b8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    78bc:	d0d0      	beq.n	7860 <__gnu_unwind_execute+0x140>
    78be:	e75c      	b.n	777a <__gnu_unwind_execute+0x5a>
    78c0:	4630      	mov	r0, r6
    78c2:	f7ff ff01 	bl	76c8 <next_unwind_byte>
    78c6:	0301      	lsls	r1, r0, #12
    78c8:	f000 000f 	and.w	r0, r0, #15
    78cc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    78d0:	1c42      	adds	r2, r0, #1
    78d2:	2301      	movs	r3, #1
    78d4:	430a      	orrs	r2, r1
    78d6:	e7c3      	b.n	7860 <__gnu_unwind_execute+0x140>
    78d8:	ac03      	add	r4, sp, #12
    78da:	4643      	mov	r3, r8
    78dc:	220e      	movs	r2, #14
    78de:	4641      	mov	r1, r8
    78e0:	9400      	str	r4, [sp, #0]
    78e2:	4628      	mov	r0, r5
    78e4:	f7ff fb00 	bl	6ee8 <_Unwind_VRS_Get>
    78e8:	9400      	str	r4, [sp, #0]
    78ea:	4628      	mov	r0, r5
    78ec:	4643      	mov	r3, r8
    78ee:	220f      	movs	r2, #15
    78f0:	4641      	mov	r1, r8
    78f2:	f7ff fb1d 	bl	6f30 <_Unwind_VRS_Set>
    78f6:	4640      	mov	r0, r8
    78f8:	e740      	b.n	777c <__gnu_unwind_execute+0x5c>
    78fa:	4630      	mov	r0, r6
    78fc:	f7ff fee4 	bl	76c8 <next_unwind_byte>
    7900:	0301      	lsls	r1, r0, #12
    7902:	f000 000f 	and.w	r0, r0, #15
    7906:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    790a:	1c42      	adds	r2, r0, #1
    790c:	2303      	movs	r3, #3
    790e:	430a      	orrs	r2, r1
    7910:	e7a6      	b.n	7860 <__gnu_unwind_execute+0x140>
    7912:	4630      	mov	r0, r6
    7914:	f7ff fed8 	bl	76c8 <next_unwind_byte>
    7918:	4602      	mov	r2, r0
    791a:	2800      	cmp	r0, #0
    791c:	f43f af2d 	beq.w	777a <__gnu_unwind_execute+0x5a>
    7920:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    7924:	f47f af29 	bne.w	777a <__gnu_unwind_execute+0x5a>
    7928:	2104      	movs	r1, #4
    792a:	4628      	mov	r0, r5
    792c:	f7ff fcba 	bl	72a4 <_Unwind_VRS_Pop>
    7930:	2800      	cmp	r0, #0
    7932:	f43f aefc 	beq.w	772e <__gnu_unwind_execute+0xe>
    7936:	e720      	b.n	777a <__gnu_unwind_execute+0x5a>
    7938:	f000 020f 	and.w	r2, r0, #15
    793c:	3201      	adds	r2, #1
    793e:	2303      	movs	r3, #3
    7940:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    7944:	e78c      	b.n	7860 <__gnu_unwind_execute+0x140>
    7946:	4630      	mov	r0, r6
    7948:	f7ff febe 	bl	76c8 <next_unwind_byte>
    794c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    7950:	f000 030f 	and.w	r3, r0, #15
    7954:	3210      	adds	r2, #16
    7956:	3301      	adds	r3, #1
    7958:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    795c:	e706      	b.n	776c <__gnu_unwind_execute+0x4c>
    795e:	2300      	movs	r3, #0
    7960:	f10d 090c 	add.w	r9, sp, #12
    7964:	220d      	movs	r2, #13
    7966:	4619      	mov	r1, r3
    7968:	f8cd 9000 	str.w	r9, [sp]
    796c:	4628      	mov	r0, r5
    796e:	f7ff fabb 	bl	6ee8 <_Unwind_VRS_Get>
    7972:	4630      	mov	r0, r6
    7974:	f7ff fea8 	bl	76c8 <next_unwind_byte>
    7978:	0602      	lsls	r2, r0, #24
    797a:	f04f 0702 	mov.w	r7, #2
    797e:	d50c      	bpl.n	799a <__gnu_unwind_execute+0x27a>
    7980:	9b03      	ldr	r3, [sp, #12]
    7982:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7986:	40b8      	lsls	r0, r7
    7988:	4403      	add	r3, r0
    798a:	4630      	mov	r0, r6
    798c:	9303      	str	r3, [sp, #12]
    798e:	f7ff fe9b 	bl	76c8 <next_unwind_byte>
    7992:	0603      	lsls	r3, r0, #24
    7994:	f107 0707 	add.w	r7, r7, #7
    7998:	d4f2      	bmi.n	7980 <__gnu_unwind_execute+0x260>
    799a:	9b03      	ldr	r3, [sp, #12]
    799c:	f8cd 9000 	str.w	r9, [sp]
    79a0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    79a4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    79a8:	40bc      	lsls	r4, r7
    79aa:	2300      	movs	r3, #0
    79ac:	4414      	add	r4, r2
    79ae:	4619      	mov	r1, r3
    79b0:	220d      	movs	r2, #13
    79b2:	4628      	mov	r0, r5
    79b4:	9403      	str	r4, [sp, #12]
    79b6:	f7ff fabb 	bl	6f30 <_Unwind_VRS_Set>
    79ba:	e6b8      	b.n	772e <__gnu_unwind_execute+0xe>

000079bc <__gnu_unwind_frame>:
    79bc:	b510      	push	{r4, lr}
    79be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    79c0:	b084      	sub	sp, #16
    79c2:	6853      	ldr	r3, [r2, #4]
    79c4:	2403      	movs	r4, #3
    79c6:	f88d 400c 	strb.w	r4, [sp, #12]
    79ca:	021b      	lsls	r3, r3, #8
    79cc:	f102 0408 	add.w	r4, r2, #8
    79d0:	4608      	mov	r0, r1
    79d2:	79d2      	ldrb	r2, [r2, #7]
    79d4:	9301      	str	r3, [sp, #4]
    79d6:	a901      	add	r1, sp, #4
    79d8:	9402      	str	r4, [sp, #8]
    79da:	f88d 200d 	strb.w	r2, [sp, #13]
    79de:	f7ff fe9f 	bl	7720 <__gnu_unwind_execute>
    79e2:	b004      	add	sp, #16
    79e4:	bd10      	pop	{r4, pc}
    79e6:	bf00      	nop

000079e8 <_Unwind_GetRegionStart>:
    79e8:	b508      	push	{r3, lr}
    79ea:	f7ff fe97 	bl	771c <unwind_UCB_from_context>
    79ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
    79f0:	bd08      	pop	{r3, pc}
    79f2:	bf00      	nop

000079f4 <_Unwind_GetLanguageSpecificData>:
    79f4:	b508      	push	{r3, lr}
    79f6:	f7ff fe91 	bl	771c <unwind_UCB_from_context>
    79fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    79fc:	79c3      	ldrb	r3, [r0, #7]
    79fe:	3302      	adds	r3, #2
    7a00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7a04:	bd08      	pop	{r3, pc}
    7a06:	bf00      	nop

00007a08 <__aeabi_idiv0>:
    7a08:	4770      	bx	lr
    7a0a:	bf00      	nop

00007a0c <abort>:
    7a0c:	b508      	push	{r3, lr}
    7a0e:	2006      	movs	r0, #6
    7a10:	f000 f86c 	bl	7aec <raise>
    7a14:	2001      	movs	r0, #1
    7a16:	f7fb fae7 	bl	2fe8 <_exit>
    7a1a:	Address 0x0000000000007a1a is out of bounds.


00007a1c <__cxa_atexit>:
    7a1c:	b510      	push	{r4, lr}
    7a1e:	4c05      	ldr	r4, [pc, #20]	; (7a34 <__cxa_atexit+0x18>)
    7a20:	4613      	mov	r3, r2
    7a22:	b12c      	cbz	r4, 7a30 <__cxa_atexit+0x14>
    7a24:	460a      	mov	r2, r1
    7a26:	4601      	mov	r1, r0
    7a28:	2002      	movs	r0, #2
    7a2a:	f3af 8000 	nop.w
    7a2e:	bd10      	pop	{r4, pc}
    7a30:	4620      	mov	r0, r4
    7a32:	e7fc      	b.n	7a2e <__cxa_atexit+0x12>
    7a34:	00000000 	.word	0x00000000

00007a38 <__libc_init_array>:
    7a38:	b570      	push	{r4, r5, r6, lr}
    7a3a:	4d0d      	ldr	r5, [pc, #52]	; (7a70 <__libc_init_array+0x38>)
    7a3c:	4c0d      	ldr	r4, [pc, #52]	; (7a74 <__libc_init_array+0x3c>)
    7a3e:	1b64      	subs	r4, r4, r5
    7a40:	10a4      	asrs	r4, r4, #2
    7a42:	2600      	movs	r6, #0
    7a44:	42a6      	cmp	r6, r4
    7a46:	d109      	bne.n	7a5c <__libc_init_array+0x24>
    7a48:	4d0b      	ldr	r5, [pc, #44]	; (7a78 <__libc_init_array+0x40>)
    7a4a:	4c0c      	ldr	r4, [pc, #48]	; (7a7c <__libc_init_array+0x44>)
    7a4c:	f7f8 fc58 	bl	300 <_init>
    7a50:	1b64      	subs	r4, r4, r5
    7a52:	10a4      	asrs	r4, r4, #2
    7a54:	2600      	movs	r6, #0
    7a56:	42a6      	cmp	r6, r4
    7a58:	d105      	bne.n	7a66 <__libc_init_array+0x2e>
    7a5a:	bd70      	pop	{r4, r5, r6, pc}
    7a5c:	f855 3b04 	ldr.w	r3, [r5], #4
    7a60:	4798      	blx	r3
    7a62:	3601      	adds	r6, #1
    7a64:	e7ee      	b.n	7a44 <__libc_init_array+0xc>
    7a66:	f855 3b04 	ldr.w	r3, [r5], #4
    7a6a:	4798      	blx	r3
    7a6c:	3601      	adds	r6, #1
    7a6e:	e7f2      	b.n	7a56 <__libc_init_array+0x1e>
    7a70:	0000030c 	.word	0x0000030c
    7a74:	0000030c 	.word	0x0000030c
    7a78:	0000030c 	.word	0x0000030c
    7a7c:	00000320 	.word	0x00000320

00007a80 <memcpy>:
    7a80:	440a      	add	r2, r1
    7a82:	4291      	cmp	r1, r2
    7a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    7a88:	d100      	bne.n	7a8c <memcpy+0xc>
    7a8a:	4770      	bx	lr
    7a8c:	b510      	push	{r4, lr}
    7a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7a92:	f803 4f01 	strb.w	r4, [r3, #1]!
    7a96:	4291      	cmp	r1, r2
    7a98:	d1f9      	bne.n	7a8e <memcpy+0xe>
    7a9a:	bd10      	pop	{r4, pc}

00007a9c <_raise_r>:
    7a9c:	291f      	cmp	r1, #31
    7a9e:	b538      	push	{r3, r4, r5, lr}
    7aa0:	4604      	mov	r4, r0
    7aa2:	460d      	mov	r5, r1
    7aa4:	d904      	bls.n	7ab0 <_raise_r+0x14>
    7aa6:	2316      	movs	r3, #22
    7aa8:	6003      	str	r3, [r0, #0]
    7aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7aae:	bd38      	pop	{r3, r4, r5, pc}
    7ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7ab2:	b112      	cbz	r2, 7aba <_raise_r+0x1e>
    7ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7ab8:	b94b      	cbnz	r3, 7ace <_raise_r+0x32>
    7aba:	4620      	mov	r0, r4
    7abc:	f000 f830 	bl	7b20 <_getpid_r>
    7ac0:	462a      	mov	r2, r5
    7ac2:	4601      	mov	r1, r0
    7ac4:	4620      	mov	r0, r4
    7ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7aca:	f000 b817 	b.w	7afc <_kill_r>
    7ace:	2b01      	cmp	r3, #1
    7ad0:	d00a      	beq.n	7ae8 <_raise_r+0x4c>
    7ad2:	1c59      	adds	r1, r3, #1
    7ad4:	d103      	bne.n	7ade <_raise_r+0x42>
    7ad6:	2316      	movs	r3, #22
    7ad8:	6003      	str	r3, [r0, #0]
    7ada:	2001      	movs	r0, #1
    7adc:	e7e7      	b.n	7aae <_raise_r+0x12>
    7ade:	2400      	movs	r4, #0
    7ae0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    7ae4:	4628      	mov	r0, r5
    7ae6:	4798      	blx	r3
    7ae8:	2000      	movs	r0, #0
    7aea:	e7e0      	b.n	7aae <_raise_r+0x12>

00007aec <raise>:
    7aec:	4b02      	ldr	r3, [pc, #8]	; (7af8 <raise+0xc>)
    7aee:	4601      	mov	r1, r0
    7af0:	6818      	ldr	r0, [r3, #0]
    7af2:	f7ff bfd3 	b.w	7a9c <_raise_r>
    7af6:	bf00      	nop
    7af8:	10000094 	.word	0x10000094

00007afc <_kill_r>:
    7afc:	b538      	push	{r3, r4, r5, lr}
    7afe:	4d07      	ldr	r5, [pc, #28]	; (7b1c <_kill_r+0x20>)
    7b00:	2300      	movs	r3, #0
    7b02:	4604      	mov	r4, r0
    7b04:	4608      	mov	r0, r1
    7b06:	4611      	mov	r1, r2
    7b08:	602b      	str	r3, [r5, #0]
    7b0a:	f7fb fa23 	bl	2f54 <_kill>
    7b0e:	1c43      	adds	r3, r0, #1
    7b10:	d102      	bne.n	7b18 <_kill_r+0x1c>
    7b12:	682b      	ldr	r3, [r5, #0]
    7b14:	b103      	cbz	r3, 7b18 <_kill_r+0x1c>
    7b16:	6023      	str	r3, [r4, #0]
    7b18:	bd38      	pop	{r3, r4, r5, pc}
    7b1a:	bf00      	nop
    7b1c:	10000bd4 	.word	0x10000bd4

00007b20 <_getpid_r>:
    7b20:	f7fb ba10 	b.w	2f44 <_getpid>

00007b24 <strlen>:
    7b24:	4603      	mov	r3, r0
    7b26:	f813 2b01 	ldrb.w	r2, [r3], #1
    7b2a:	2a00      	cmp	r2, #0
    7b2c:	d1fb      	bne.n	7b26 <strlen+0x2>
    7b2e:	1a18      	subs	r0, r3, r0
    7b30:	3801      	subs	r0, #1
    7b32:	4770      	bx	lr

00007b34 <sjsu::lpc40xx::Pin::kFunction>:
    7b34:	0300 ffff                                   ....

00007b38 <sjsu::lpc40xx::Pin::kResistor>:
    7b38:	0203 ffff                                   ....

00007b3c <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    7b3c:	0107 ffff                                   ....

00007b40 <sjsu::lpc40xx::Pin::kOpenDrain>:
    7b40:	010a ffff                                   ....

00007b44 <sjsu::lpc17xx::Pin::SetPull(sjsu::Pin::Resistor) const::kResistorModes>:
    7b44:	0302 0100                                   ....

00007b48 <sjsu::lpc17xx::Pin::SetAsAnalogMode(bool) const::file>:
    7b48:	6970 2e6e 7068 0070 6976 7472 6175 206c     pin.hpp.virtual 
    7b58:	6f76 6469 7320 736a 3a75 6c3a 6370 3731     void sjsu::lpc17
    7b68:	7878 3a3a 6950 3a6e 533a 7465 7341 6e41     xx::Pin::SetAsAn
    7b78:	6c61 676f 6f4d 6564 6228 6f6f 296c 6320     alogMode(bool) c
    7b88:	6e6f 7473 0000 0000 5b1b 3334 206d 4157     onst.....[43m WA
    7b98:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    7ba8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7bb8:	256d 3e64 1b20 305b 333b 6d37 6e55 7573     m%d> .[0;37mUnsu
    7bc8:	7070 726f 6574 2064 706f 7265 7461 6f69     pported operatio
    7bd8:	1b6e 305b 0a6d 0000 6f62 6c6f 7320 736a     n.[0m...bool sjs
    7be8:	3a75 6c3a 6370 3034 7878 3a3a 7047 6f69     u::lpc40xx::Gpio
    7bf8:	3a3a 7349 5641 6c61 6469 6f50 7472 2928     ::IsAValidPort()
    7c08:	6320 6e6f 7473 0000 5b1b 3334 206d 4157      const...[43m WA
    7c18:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    7c28:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7c38:	256d 3e64 1b20 305b 333b 6d37 6854 7369     m%d> .[0;37mThis
    7c48:	6720 6970 206f 6f70 7472 6320 6e61 6f6e      gpio port canno
    7c58:	2074 6562 7520 6573 2064 6f66 2072 7845     t be used for Ex
    7c68:	6574 6e72 6c61 4920 746e 7265 7572 7470     ternal Interrupt
    7c78:	2e73 4e20 6565 2064 6f74 7520 6573 4720     s. Need to use G
    7c88:	4950 734f 6f20 206e 6f50 7472 3020 6f20     PIOs on Port 0 o
    7c98:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    7ca8:	6e69 2074 616d 6e69 2928 0000 5b1b 3234     int main()...[42
    7cb8:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    7cc8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7cd8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7ce8:	6157 7469 6e69 2067 6f66 2072 6e49 6574     Waiting for Inte
    7cf8:	7272 7075 0a74 5b1b 6d30 000a 6f76 6469     rrupt..[0m..void
    7d08:	6b20 7965 6f62 7261 5f64 6e69 6574 7272      keyboard_interr
    7d18:	7075 2874 0029 0000 5b1b 3234 206d 2020     upt()....[42m   
    7d28:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    7d38:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7d48:	256d 3e64 1b20 305b 333b 6d37 4b0a 7965     m%d> .[0;37m.Key
    7d58:	6420 7465 6365 6574 0a64 1b0a 305b 0a6d      detected...[0m.
    7d68:	0000 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    7d78:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    7d88:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    7d98:	1b20 305b 333b 6d37 654b 2079 7270 7365      .[0;37mKey pres
    7da8:	6573 3a64 3120 1b0a 305b 0a6d 0000 0000     sed: 1..[0m.....
    7db8:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    7dc8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7dd8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7de8:	333b 6d37 654b 2079 7270 7365 6573 3a64     ;37mKey pressed:
    7df8:	3220 1b0a 305b 0a6d 0000 0000 5b1b 3234      2..[0m......[42
    7e08:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    7e18:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7e28:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7e38:	654b 2079 7270 7365 6573 3a64 3320 1b0a     Key pressed: 3..
    7e48:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
    7e58:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    7e68:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7e78:	256d 3e64 1b20 305b 333b 6d37 654b 2079     m%d> .[0;37mKey 
    7e88:	7270 7365 6573 3a64 4120 1b0a 305b 0a6d     pressed: A..[0m.
    7e98:	0000 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    7ea8:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    7eb8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    7ec8:	1b20 305b 333b 6d37 654b 2079 7270 7365      .[0;37mKey pres
    7ed8:	6573 3a64 3420 1b0a 305b 0a6d 0000 0000     sed: 4..[0m.....
    7ee8:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    7ef8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7f08:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7f18:	333b 6d37 654b 2079 7270 7365 6573 3a64     ;37mKey pressed:
    7f28:	3520 1b0a 305b 0a6d 0000 0000 5b1b 3234      5..[0m......[42
    7f38:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    7f48:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7f58:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7f68:	654b 2079 7270 7365 6573 3a64 3620 1b0a     Key pressed: 6..
    7f78:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
    7f88:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    7f98:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7fa8:	256d 3e64 1b20 305b 333b 6d37 654b 2079     m%d> .[0;37mKey 
    7fb8:	7270 7365 6573 3a64 4220 1b0a 305b 0a6d     pressed: B..[0m.
    7fc8:	0000 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    7fd8:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    7fe8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    7ff8:	1b20 305b 333b 6d37 654b 2079 7270 7365      .[0;37mKey pres
    8008:	6573 3a64 3720 1b0a 305b 0a6d 0000 0000     sed: 7..[0m.....
    8018:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    8028:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8038:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8048:	333b 6d37 654b 2079 7270 7365 6573 3a64     ;37mKey pressed:
    8058:	3820 1b0a 305b 0a6d 0000 0000 5b1b 3234      8..[0m......[42
    8068:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    8078:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    8088:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    8098:	654b 2079 7270 7365 6573 3a64 3920 1b0a     Key pressed: 9..
    80a8:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
    80b8:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    80c8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    80d8:	256d 3e64 1b20 305b 333b 6d37 654b 2079     m%d> .[0;37mKey 
    80e8:	7270 7365 6573 3a64 4320 1b0a 305b 0a6d     pressed: C..[0m.
    80f8:	0000 0000 5b1b 3234 206d 2020 4920 464e     .....[42m    INF
    8108:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    8118:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8128:	1b20 305b 333b 6d37 654b 2079 7270 7365      .[0;37mKey pres
    8138:	6573 3a64 2a20 1b0a 305b 0a6d 0000 0000     sed: *..[0m.....
    8148:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    8158:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8168:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8178:	333b 6d37 654b 2079 7270 7365 6573 3a64     ;37mKey pressed:
    8188:	3020 1b0a 305b 0a6d 0000 0000 5b1b 3234      0..[0m......[42
    8198:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    81a8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    81b8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    81c8:	654b 2079 7270 7365 6573 3a64 2320 1b0a     Key pressed: #..
    81d8:	305b 0a6d 0000 0000 5b1b 3234 206d 2020     [0m......[42m   
    81e8:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    81f8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8208:	256d 3e64 1b20 305b 333b 6d37 654b 2079     m%d> .[0;37mKey 
    8218:	7270 7365 6573 3a64 4420 1b0a 305b 0a6d     pressed: D..[0m.
    8228:	ff00 ffff                                   ....

0000822c <sjsu::lpc40xx::Gpio::IsAValidPort() const::file>:
    822c:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00008238 <main::file>:
    8238:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008244 <keyboard_interrupt()::file>:
    8244:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008250 <keyboard_interrupt()::file>:
    8250:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

0000825c <keyboard_interrupt()::file>:
    825c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008268 <keyboard_interrupt()::file>:
    8268:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008274 <keyboard_interrupt()::file>:
    8274:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008280 <keyboard_interrupt()::file>:
    8280:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

0000828c <keyboard_interrupt()::file>:
    828c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008298 <keyboard_interrupt()::file>:
    8298:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082a4 <keyboard_interrupt()::file>:
    82a4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082b0 <keyboard_interrupt()::file>:
    82b0:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082bc <keyboard_interrupt()::file>:
    82bc:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082c8 <keyboard_interrupt()::file>:
    82c8:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082d4 <keyboard_interrupt()::file>:
    82d4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082e0 <keyboard_interrupt()::file>:
    82e0:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082ec <keyboard_interrupt()::file>:
    82ec:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000082f8 <keyboard_interrupt()::file>:
    82f8:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008304 <keyboard_interrupt()::file>:
    8304:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00008310 <vtable for sjsu::lpc40xx::Gpio>:
	...
    8318:	0db5 0000 0e1d 0000 0e61 0000 0e8f 0000     ........a.......
    8328:	0eb3 0000 0f01 0000 0fdd 0000               ............

00008334 <vtable for sjsu::lpc17xx::Pin>:
	...
    833c:	09e5 0000 09f9 0000 0a59 0000 0ae1 0000     ........Y.......
    834c:	0ab5 0000                                   ....

00008350 <vtable for sjsu::Gpio>:
	...
    8358:	64e3 0000 64e3 0000 64e3 0000 64e3 0000     .d...d...d...d..
    8368:	64e3 0000 64e3 0000 64e3 0000               .d...d...d..

00008374 <vtable for sjsu::lpc40xx::Pin>:
	...
    837c:	04d9 0000 04ed 0000 0521 0000 0591 0000     ........!.......
    838c:	0555 0000                                   U...

00008390 <vtable for sjsu::Pin>:
	...
    8398:	64e3 0000 64e3 0000 64e3 0000 64e3 0000     .d...d...d...d..
    83a8:	64e3 0000 2020 6425 2029 7830 3025 5838     .d..  %d) 0x%08X
    83b8:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    83c8:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    83d8:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    83e8:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    83f8:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8408:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8418:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8428:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8438:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8448:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8458:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8468:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8478:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8488:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8498:	6175 206c 6f76 6469 7320 736a 3a75 723a     ual void sjsu::r
    84a8:	6f74 3a73 543a 7361 536b 6863 6465 6c75     tos::TaskSchedul
    84b8:	7265 3a3a 6441 5464 7361 286b 6a73 7573     er::AddTask(sjsu
    84c8:	3a3a 7472 736f 3a3a 6154 6b73 6e49 6574     ::rtos::TaskInte
    84d8:	6672 6361 2a65 0029 5b1b 3534 206d 2020     rface*)..[45m   
    84e8:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    84f8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8508:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8518:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8528:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8538:	2820 6174 6b73 635f 756f 746e 205f 202b      (task_count_ + 
    8548:	2031 203c 6f63 666e 6769 3a3a 546b 7361     1 < config::kTas
    8558:	536b 6863 6465 6c75 7265 6953 657a 0a29     kSchedulerSize).
    8568:	2020 2020 2020 2020 2020 6854 2065 6373               The sc
    8578:	6568 7564 656c 2072 7369 6320 7275 6572     heduler is curre
    8588:	746e 796c 6620 6c75 2c6c 7420 6568 7420     ntly full, the t
    8598:	7361 206b 6977 6c6c 6e20 746f 6220 2065     ask will not be 
    85a8:	6461 6564 2e64 4320 6e6f 6973 6564 2072     added. Consider 
    85b8:	6e69 7263 6165 6973 676e 7420 6568 7320     increasing the s
    85c8:	6863 6465 6c75 7265 7320 7a69 2065 6f63     cheduler size co
    85d8:	666e 6769 7275 7461 6f69 2e6e 5b1b 6d30     nfiguration..[0m
    85e8:	5b1b 6d30 000a 0000 500a 6972 746e 6e69     .[0m.....Printin
    85f8:	2067 7453 6361 206b 7254 6361 3a65 000a     g Stack Trace:..
    8608:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    8618:	3a3a 7472 736f 3a3a 6154 6b73 6353 6568     ::rtos::TaskSche
    8628:	7564 656c 3a72 523a 6e75 6154 6b73 7628     duler::RunTask(v
    8638:	696f 2a64 0029 0000 5b1b 3534 206d 2020     oid*)....[45m   
    8648:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8658:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8668:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8678:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    8688:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    8698:	2820 546b 7361 496b 646e 7865 3c20 6b20      (kTaskIndex < k
    86a8:	6154 6b73 6f43 6e75 2974 200a 2020 2020     TaskCount).     
    86b8:	2020 2020 5420 6568 7420 7361 206b 6e69          The task in
    86c8:	6564 2078 6873 756f 646c 6e20 746f 6520     dex should not e
    86d8:	6378 6565 2064 6874 2065 6174 6b73 6320     xceed the task c
    86e8:	756f 746e 1b2e 305b 1b6d 305b 0a6d 0000     ount..[0m.[0m...
    86f8:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8708:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8718:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8728:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8738:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8748:	5420 7365 6574 3a64 2820 6174 6b73 502e      Tested: (task.P
    8758:	6572 7552 286e 2929 200a 2020 2020 2020     reRun()).       
    8768:	2020 5020 6572 7552 286e 2029 6166 6c69        PreRun() fail
    8778:	6465 6620 726f 7420 7361 3a6b 2520 2c73     ed for task: %s,
    8788:	7420 7265 696d 616e 6974 676e 7320 6863      terminating sch
    8798:	6465 6c75 7265 1b21 305b 1b6d 305b 0a6d     eduler!.[0m.[0m.
    87a8:	0000 0000 5b1b 3334 206d 4157 4e52 4e49     .....[43m WARNIN
    87b8:	1b47 305b 393b 6d34 253a 3a73 5b1b 3b30     G.[0;94m:%s:.[0;
    87c8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    87d8:	1b20 305b 333b 6d37 6e41 6520 7272 726f      .[0;37mAn error
    87e8:	6f20 6363 7275 6572 2c64 7420 6568 6620      occurred, the f
    87f8:	6c6f 6f6c 6977 676e 7420 7361 206b 6977     ollowing task wi
    8808:	6c6c 6220 2065 7573 7073 6e65 6564 3a64     ll be suspended:
    8818:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8828:	6f76 6469 7320 736a 3a75 723a 6f74 3a73     void sjsu::rtos:
    8838:	543a 7361 536b 6863 6465 6c75 7265 3a3a     :TaskScheduler::
    8848:	6e49 7469 6169 696c 657a 6c41 546c 7361     InitializeAllTas
    8858:	736b 2928 0000 0000 5b1b 3534 206d 2020     ks().....[45m   
    8868:	5245 4f52 1b52 305b 393b 6d34 253a 3a73     ERROR.[0;94m:%s:
    8878:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    8888:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    8898:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    88a8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    88b8:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    88c8:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    88d8:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    88e8:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    88f8:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    8908:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8918:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8928:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8938:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8948:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8958:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    8968:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    8978:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    8988:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    8998:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    89a8:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    89b8:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    89c8:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    89d8:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    89e8:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    89f8:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    8a08:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    8a18:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    8a28:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    8a38:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    8a48:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    8a58:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    8a68:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    8a78:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    8a88:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    8a98:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    8aa8:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    8ab8:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    8ac8:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    8ad8:	6b63 7274 6361 2065 5254 4341 5345 223d     cktrace TRACES="
    8ae8:	0000 0000 7830 7025 0020 0000 0a22 1b0a     ....0x%p ..."...
    8af8:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    8b08:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    8b18:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    8b28:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    8b38:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    8b48:	6c6c 6465 002e 0000 5b1b 3134 486d 7261     lled.....[41mHar
    8b58:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    8b68:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    8b78:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    8b88:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    8b98:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    8ba8:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    8bb8:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    8bc8:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    8bd8:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    8be8:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    8bf8:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    8c08:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    8c18:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    8c28:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    8c38:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    8c48:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00008c54 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    8c54:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    8c64:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    8c74:	bc20 4cbe 6b28 4e6e 743a 0074                ..L(knN:tt.

00008c80 <config::kSystemClockRateMhz>:
    8c80:	0000 4240                                   ..@B

00008c84 <config::kRtosFrequency>:
    8c84:	0000 447a 2020 6425 2029 7830 3025 5838     ..zD  %d) 0x%08X
    8c94:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    8ca4:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    8cb4:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    8cc4:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    8cd4:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    8ce4:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    8cf4:	7320 6174 6b63 7274 6361 2065 5254 4341      stacktrace TRAC
    8d04:	5345 223d 0000 0000 7830 7025 0020 0000     ES="....0x%p ...
    8d14:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    8d24:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    8d34:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    8d44:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    8d54:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    8d64:	2067 6163 6c6c 6465 002e 0000 6976 7472     g called....virt
    8d74:	6175 206c 6f76 6469 7320 736a 3a75 6c3a     ual void sjsu::l
    8d84:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    8d94:	746e 6f72 6c6c 7265 3a3a 6553 5074 7265     ntroller::SetPer
    8da4:	7069 6568 6172 436c 6f6c 6b63 6944 6976     ipheralClockDivi
    8db4:	6564 2872 6f63 736e 2074 6a73 7573 3a3a     der(const sjsu::
    8dc4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8dd4:	3a3a 6550 6972 6870 7265 6c61 4449 2c26     ::PeripheralID&,
    8de4:	7520 6e69 3874 745f 2029 6f63 736e 0074      uint8_t) const.
    8df4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    8e04:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    8e14:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    8e24:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    8e34:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    8e44:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    8e54:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    8e64:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    8e74:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    8e84:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    8e94:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    8ea4:	7254 6361 3a65 000a 6975 746e 3233 745f     Trace:..uint32_t
    8eb4:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    8ec4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    8ed4:	3a3a 6143 636c 6c75 7461 5065 6c6c 7528     ::CalculatePll(u
    8ee4:	696e 7374 3a3a 7266 7165 6575 636e 3a79     nits::frequency:
    8ef4:	6d3a 6765 6861 7265 7a74 745f 202c 6e75     :megahertz_t, un
    8f04:	7469 3a73 663a 6572 7571 6e65 7963 3a3a     its::frequency::
    8f14:	656d 6167 6568 7472 5f7a 2974 6320 6e6f     megahertz_t) con
    8f24:	7473 0000 5b1b 3534 206d 2020 5245 4f52     st...[45m   ERRO
    8f34:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    8f44:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    8f54:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    8f64:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    8f74:	6974 6e6f 5420 7365 6574 3a64 2820 6564     tion Tested: (de
    8f84:	6973 6572 5f64 7266 7165 6575 636e 2079     sired_frequency 
    8f94:	203c 3833 5f34 484d 207a 2626 6420 7365     < 384_MHz && des
    8fa4:	7269 6465 665f 6572 7571 6e65 7963 3e20     ired_frequency >
    8fb4:	3120 5f32 484d 297a 200a 2020 2020 2020      12_MHz).       
    8fc4:	2020 4620 6572 7571 6e65 7963 6d20 7375        Frequency mus
    8fd4:	2074 6562 6c20 776f 7265 7420 6168 206e     t be lower than 
    8fe4:	3833 2034 484d 617a 646e 6720 6572 7461     384 MHzand great
    8ff4:	7265 7420 6168 206e 726f 6520 7571 6c61     er than or equal
    9004:	7420 206f 3231 4d20 7a48 5b1b 6d30 5b1b      to 12 MHz.[0m.[
    9014:	6d30 000a 5b1b 3534 206d 2020 5245 4f52     0m...[45m   ERRO
    9024:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9034:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9044:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9054:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9064:	6974 6e6f 5420 7365 6574 3a64 2820 6964     tion Tested: (di
    9074:	6976 6564 5f72 6176 756c 2065 203c 2938     vider_value < 8)
    9084:	200a 2020 2020 2020 2020 5020 4c4c 6420     .          PLL d
    9094:	7669 6469 7265 7620 6c61 6575 7720 6e65     ivider value wen
    90a4:	2074 756f 2074 666f 6220 756f 646e 1b73     t out of bounds.
    90b4:	305b 1b6d 305b 0a6d 0000 0000 6f76 6469     [0m.[0m.....void
    90c4:	7320 736a 3a75 6c3a 6370 3034 7878 3a3a      sjsu::lpc40xx::
    90d4:	7953 7473 6d65 6f43 746e 6f72 6c6c 7265     SystemController
    90e4:	3a3a 6553 4374 7570 6c43 636f 446b 7669     ::SetCpuClockDiv
    90f4:	6469 7265 7528 6e69 3874 745f 2029 6f63     ider(uint8_t) co
    9104:	736e 0074 5b1b 3534 206d 2020 5245 4f52     nst..[45m   ERRO
    9114:	1b52 305b 393b 6d34 253a 3a73 5b1b 3b30     R.[0;94m:%s:.[0;
    9124:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    9134:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    9144:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    9154:	6974 6e6f 5420 7365 6574 3a64 2820 7063     tion Tested: (cp
    9164:	5f75 6964 6976 6564 2072 203c 3233 0a29     u_divider < 32).
    9174:	2020 2020 2020 2020 2020 6944 6976 6564               Divide
    9184:	2072 756d 7473 276e 2074 7865 6563 6465     r mustn't exceed
    9194:	3320 1b32 305b 1b6d 305b 0a6d 0000 0000      32.[0m.[0m.....
    91a4:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    91b4:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().
    91c4:	5b1b 3534 206d 2020 5245 4f52 1b52 305b     .[45m   ERROR.[0
    91d4:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    91e4:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    91f4:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    9204:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    9214:	5420 7365 6574 3a64 2820 6974 656d 5f72      Tested: (timer_
    9224:	7473 7261 5f74 7473 7461 7375 3d20 203d     start_status == 
    9234:	6a73 7573 3a3a 7453 7461 7375 3a3a 536b     sjsu::Status::kS
    9244:	6375 6563 7373 0a29 2020 2020 2020 2020     uccess).        
    9254:	2020 7953 7473 6d65 5420 6d69 7265 2820       System Timer (
    9264:	7375 6465 6220 2079 7246 6565 5452 534f     used by FreeRTOS
    9274:	2029 6168 2073 4146 4c49 4445 7420 206f     ) has FAILED to 
    9284:	7473 7261 2174 5b1b 6d30 5b1b 6d30 000a     start!.[0m.[0m..
    9294:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    92a4:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    92b4:	7075 4374 6e6f 7274 6c6f 656c 3c72 4e6b     uptController<kN
    92c4:	6d75 6562 4f72 4966 746e 7265 7572 7470     umberOfInterrupt
    92d4:	2c73 6b20 764e 6369 7250 6f69 6972 7974     s, kNvicPriority
    92e4:	6942 7374 3a3e 553a 726e 6765 7369 6574     Bits>::Unregiste
    92f4:	6572 4864 6e61 6c64 7265 2928 5b20 6977     redHandler() [wi
    9304:	6874 7520 736e 6769 656e 2064 6e69 2074     th unsigned int 
    9314:	4e6b 6d75 6562 4f72 4966 746e 7265 7572     kNumberOfInterru
    9324:	7470 2073 203d 3334 203b 6f6c 676e 7520     pts = 43; long u
    9334:	736e 6769 656e 2064 6e69 2074 4e6b 6976     nsigned int kNvi
    9344:	5063 6972 726f 7469 4279 7469 2073 203d     cPriorityBits = 
    9354:	5d35 0000 2020 4420 4245 4755 5b1b 3b30     5]..   DEBUG.[0;
    9364:	3439 3a6d 7325 1b3a 305b 393b 6d32 7325     94m:%s:.[0;92m%s
    9374:	1b3a 305b 393b 6d33 6425 203e 5b1b 3b30     :.[0;93m%d> .[0;
    9384:	3733 4e6d 206f 6e69 6574 7272 7075 2074     37mNo interrupt 
    9394:	6168 646e 656c 2072 6f66 6e75 2e64 4420     handler found. D
    93a4:	7369 6261 696c 676e 6920 746e 7265 7572     isabling interru
    93b4:	7470 7220 7165 6575 7473 2520 2164 5b1b     pt request %d!.[
    93c4:	6d30 000a                                   0m..

000093c8 <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    93c8:	4240 000f                                   @B..

000093cc <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    93cc:	0000 4140                                   ..@A

000093d0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    93d0:	0000 4140                                   ..@A

000093d4 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    93d4:	0100 ffff                                   ....

000093d8 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    93d8:	0100 ffff                                   ....

000093dc <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    93dc:	0500 ffff                                   ....

000093e0 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    93e0:	0108 ffff                                   ....

000093e4 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    93e4:	0208 ffff                                   ....

000093e8 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    93e8:	0208 ffff                                   ....

000093ec <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    93ec:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    93fc:	2e72 7068 0070 ffff                         r.hpp...

00009404 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    9404:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9414:	2e72 7068 0070 ffff                         r.hpp...

0000941c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    941c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    942c:	2e72 7068 0070 ffff                         r.hpp...

00009434 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    9434:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    9444:	2e72 7068 0070 ffff                         r.hpp...

0000944c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    944c:	837c 0000 0200 0000                         |.......

00009454 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    9454:	837c 0000 0300 0000                         |.......

0000945c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    945c:	837c 0000 0802 0000                         |.......

00009464 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    9464:	837c 0000 0902 0000                         |.......

0000946c <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    946c:	837c 0000 1c04 0000                         |.......

00009474 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    9474:	837c 0000 1d04 0000                         |.......

0000947c <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    947c:	837c 0000 1d01 0000                         |.......

00009484 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    9484:	837c 0000 0902 0000                         |.......

0000948c <sjsu::lpc40xx::Uart::Port::kUart0>:
    948c:	c000 4000 0003 0000 944c 0000 9454 0000     ...@....L...T...
    949c:	0009 0000                                   ....

000094a0 <sjsu::InitializePlatform()::file>:
    94a0:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000094ac <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    94b4:	60b5 0000 60e5 0000 6141 0000               .`...`..Aa..

000094c0 <vtable for sjsu::lpc40xx::Uart>:
	...
    94c8:	56a9 0000 5753 0000 57e5 0000 5837 0000     .V..SW...W..7X..
    94d8:	5885 0000 523b 0000                         .X..;R..

000094e0 <vtable for sjsu::lpc40xx::SystemController>:
	...
    94e8:	4b25 0000 4bc1 0000 4c19 0000 4c3d 0000     %K...K...L..=L..
    94f8:	4c59 0000 4c95 0000 4cc9 0000               YL...L...L..

00009504 <vtable for sjsu::cortex::SystemTimer>:
	...
    950c:	47b1 0000 4841 0000 4a15 0000 4861 0000     .G..AH...J..aH..

0000951c <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()::file>:
    951c:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...

0000952c <__sf_fake_stderr>:
	...

0000954c <__sf_fake_stdin>:
	...

0000956c <__sf_fake_stdout>:
	...
